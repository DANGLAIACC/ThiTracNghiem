4777084
~~~
{"count": 57, "next": null, "previous": null, "results": [{"_class": "assessment", "id": 69267416, "assessment_type": "multi-select", "prompt": {"question": "<p>Which are some of the benefits of using Infrastructure as Code in an organization? (select three)</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Infrastructure as Code has many benefits. For starters, IaC allows you to create a blueprint of your data center as code that can be <strong><em>versioned</em></strong>, <strong><em>shared</em></strong>, and <strong><em>reused</em></strong>. Because IaC is code, it can (and should) be stored and managed in a <strong>code repository</strong>, such as GitHub, GitLab, or Bitbucket.&nbsp; Changes can be proposed or submitted via Pull Requests (PRs), which can help ensure a proper workflow, enable an approval process, and follow a typical development lifecycle.</p><p>One of the primary reasons that Terraform (or other IaC tools) are becoming more popular is because they are mostly <strong><em>platform agnostic</em></strong>. You can use Terraform to provision and manage resources on various platforms, SaaS products, and even local infrastructure.</p><p>IaC is generally <strong><em>easy to read</em></strong> (and develop). Terraform is written in HashiCorp Configuration Language (HCL), while others may use YAML or solution-specific languages (like Microsoft ARM). But generally, IaC code is easy to read and understand</p><p><strong>Incorrect Answer:</strong></p><p>IaC is written using a <strong><em>declarative</em></strong> approach (<strong><em>not imperative</em></strong>), which allows users to simply focus on what the eventual target configuration should be, and the tool manages the process of how that happens. This often speeds things up because resources can be created/managed in parallel when there aren't any implicit or explicit dependencies.</p><p><a href=\"https://developer.hashicorp.com/terraform/tutorials/aws-get-started/infrastructure-as-code\">https://developer.hashicorp.com/terraform/tutorials/aws-get-started/infrastructure-as-code</a></p><p><a href=\"https://www.terraform.io/use-cases/infrastructure-as-code\">https://www.terraform.io/use-cases/infrastructure-as-code</a></p>", "answers": ["<p>IaC allows you to commit your configurations to version control to safely collaborate on infrastructure</p>", "<p>IaC uses a human-readable configuration language to help you write infrastructure code quickly</p>", "<p>IaC is written as an imperative approach, where specific commands need to be executed in the correct order</p>", "<p>IaC code can be used to manage infrastructure on multiple cloud platforms</p>"]}, "correct_response": ["a", "b", "d"], "section": "Objective 1 - Understand Infrastructure as Code Concepts", "question_plain": "Which are some of the benefits of using Infrastructure as Code in an organization? (select three)", "related_lectures": []}, {"_class": "assessment", "id": 69267394, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Which of the following statements represents the most accurate statement about the Terraform language:</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Terraform is written in HashiCorp Configuration Language (HCL). However, Terraform also supports a syntax that is JSON compatible (<a href=\"https://developer.hashicorp.com/terraform/language/syntax/json\">https://developer.hashicorp.com/terraform/language/syntax/json</a>).</p><p>Terraform is primarily designed on <strong><em>immutable</em></strong> infrastructure principles <a href=\"https://www.hashicorp.com/resources/what-is-mutable-vs-immutable-infrastructure\">https://www.hashicorp.com/resources/what-is-mutable-vs-immutable-infrastructure</a></p><p>Terraform is also a <strong><em>declarative language</em></strong>, where you simply declare the desired state, and Terraform ensures that real-world resources match the desired state as written. An imperative approach is different, where the tool uses a step-by-step workflow to create the desired state.</p><p><strong>Incorrect Answers:</strong></p><p>Terraform is not a configuration management tool - <a href=\"https://developer.hashicorp.com/terraform/intro/vs/chef-puppet\">https://developer.hashicorp.com/terraform/intro/vs/chef-puppet</a></p>", "answers": ["<p>Terraform is an immutable, declarative, Infrastructure as Code provisioning language based on Hashicorp Configuration Language, or optionally JSON.</p>", "<p>Terraform is a mutable, declarative, Infrastructure as Code configuration management language based on Hashicorp Configuration Language, or optionally JSON.</p>", "<p>Terraform is an immutable, imperative, Infrastructure as Code configuration management language based on Hashicorp Configuration Language, or optionally JSON.</p>", "<p>Terraform is a mutable, imperative, Infrastructure as Code provisioning language based on Hashicorp Configuration Language, or optionally YAML.</p>"]}, "correct_response": ["a"], "section": "Objective 1 - Understand Infrastructure as Code Concepts", "question_plain": "Which of the following statements represents the most accurate statement about the Terraform language:", "related_lectures": []}, {"_class": "assessment", "id": 69267418, "assessment_type": "multiple-choice", "prompt": {"question": "<p>True or False?&nbsp;Rather than use a state file, Terraform can inspect cloud resources on every run to validate that the real-world resources match the desired state.</p>", "relatedLectureIds": "", "feedbacks": ["", ""], "explanation": "<p><strong>State is a necessary requirement for Terraform to function.</strong> And in the scenarios where Terraform may be able to get away without state, doing so would require shifting massive amounts of complexity from one place (state) to another place (the replacement concept).</p><p>To support mapping configuration to resources in the real world, Terraform uses its own state structure. Terraform can guarantee one-to-one mapping when it creates objects and records their identities in the state. Terraform state also serves as a performance improvement - rather than having to scan every single resource to determine the current state of each resource.</p><p><a href=\"https://developer.hashicorp.com/terraform/language/state/purpose\">https://developer.hashicorp.com/terraform/language/state/purpose</a></p>", "answers": ["<p>True</p>", "<p>False</p>"]}, "correct_response": ["b"], "section": "Objective 2 - Understand Terraform's Purpose (vs other IaC)", "question_plain": "True or False?&nbsp;Rather than use a state file, Terraform can inspect cloud resources on every run to validate that the real-world resources match the desired state.", "related_lectures": []}, {"_class": "assessment", "id": 69267372, "assessment_type": "multiple-choice", "prompt": {"question": "<p>You are writing Terraform to deploy resources, and have included provider blocks as shown below:</p><p><br></p><pre class=\"prettyprint linenums\">provider \"aws\" {\n  region  = \"us-east-1\"\n}\n\nprovider \"aws\" {\n  region = \"us-west-1\"\n}</pre><p><br></p><p>When you validate the Terraform configuration, you get the following error:</p><p><br></p><pre class=\"prettyprint linenums\">Error: Duplicate provider configuration\n\n  on main.tf line 5:\n   5: provider \"aws\" {\n\nA default provider configuration for \"aws\" was already given at\nmain.tf:1,1-15. If multiple configurations are required, set the xxxx\nargument for alternative configurations.</pre><p><br></p><p>What additional parameter is required to use multiple provider blocks of the same type, but with distinct configurations, such as cloud regions, namespaces, or other desired settings?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>An <code>alias</code> meta-argument is used when using the same provider with different configurations for different resources. This feature allows you to include multiple provider blocks that refer to different configurations. In this example, you would need something like this:</p><p><br></p><pre class=\"prettyprint linenums\">provider \"aws\" {\n  region  = \"us-east-1\"\n}\n\nprovider \"aws\" {\n  region = \"us-west-1\"\n  alias = \"west\"\n}</pre><p><br></p><p>When writing Terraform code to deploy resources, the resources that you want to deploy to the \"<strong>west</strong>\" region would need to specify the alias within the resource block.&nbsp;This instructs Terraform to use the configuration specified in that provider block. So in this case, the resource would be deployed to \"<strong>us-west-2</strong>\" region and not the \"<strong>us-east-1</strong>\" region. this configuration is common when using multiple cloud regions or namespaces in applications like Consul, Vault, or Nomad.</p><p><a href=\"https://developer.hashicorp.com/terraform/language/providers/configuration#alias-multiple-provider-instances\">https://developer.hashicorp.com/terraform/language/providers/configuration#alias-multiple-provider-instances</a></p>", "answers": ["<p><code>alias</code> </p>", "<p><code>multi</code> </p>", "<p><code>version</code> </p>", "<p><code>label</code> </p>"]}, "correct_response": ["a"], "section": "Objective 3 - Understand Terraform Basics", "question_plain": "You are writing Terraform to deploy resources, and have included provider blocks as shown below:provider \"aws\" {\n  region  = \"us-east-1\"\n}\n\nprovider \"aws\" {\n  region = \"us-west-1\"\n}When you validate the Terraform configuration, you get the following error:Error: Duplicate provider configuration\n\n  on main.tf line 5:\n   5: provider \"aws\" {\n\nA default provider configuration for \"aws\" was already given at\nmain.tf:1,1-15. If multiple configurations are required, set the xxxx\nargument for alternative configurations.What additional parameter is required to use multiple provider blocks of the same type, but with distinct configurations, such as cloud regions, namespaces, or other desired settings?", "related_lectures": []}, {"_class": "assessment", "id": 69267380, "assessment_type": "multi-select", "prompt": {"question": "<p>Provider dependencies are created in several different ways. Select the valid provider dependencies from the following list: (select three)</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>The existence of a provider plugin found locally in the working directory does not itself create a provider dependency. The plugin can exist without any reference to it in the Terraform configuration.</p><p><a href=\"https://developer.hashicorp.com/terraform/language/providers/requirements\">https://developer.hashicorp.com/terraform/language/providers/requirements</a></p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/providers\">https://developer.hashicorp.com/terraform/cli/commands/providers</a></p><p><br></p>", "answers": ["<p>Explicit use of a provider block in configuration, optionally including a version constraint.&nbsp; </p>", "<p>Use of any resource block or data block in the configuration, belonging to a particular provider</p>", "<p>Existence of any resource instance belonging to a particular provider in the current <em>state</em>.</p>", "<p>Existence of any provider plugins found locally in the working directory.</p>"]}, "correct_response": ["a", "b", "c"], "section": "Objective 3 - Understand Terraform Basics", "question_plain": "Provider dependencies are created in several different ways. Select the valid provider dependencies from the following list: (select three)", "related_lectures": []}, {"_class": "assessment", "id": 69267374, "assessment_type": "multiple-choice", "prompt": {"question": "<p>A user runs <code>terraform init</code> on their RHEL-based server, and per the output, two provider plugins are downloaded:</p><p><br></p><pre class=\"prettyprint linenums\">$ terraform init\n\nInitializing the backend...\n\nInitializing provider plugins...\n- Checking for available provider plugins...\n- Downloading plugin for provider \"aws\" (hashicorp/aws) 2.44.0...\n- Downloading plugin for provider \"random\" (hashicorp/random) 2.2.1...\n\nTerraform has been successfully initialized!\n</pre><p><br></p><p>Where are these plugins downloaded and stored on the server?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>By default, <code>terraform init</code> downloads plugins into a subdirectory of the working directory, <code>.terraform/providers</code> so that each working directory is self-contained.</p><p><br></p><p>See the example below, where I ran a terraform init and you can see the resulting directory (highlighted in the red box) and then the actual provider that was downloaded (highlighted by the green arrow)</p><p><br></p><img src=\"https://img-b.udemycdn.com/redactor/raw/practice_test_question_explanation/2023-02-11_15-21-21-d3ef65b58d9dcdf6393d3f8fc0e52d4e.png\"><p><a href=\"https://developer.hashicorp.com/terraform/plugin#installing-plugins\">https://developer.hashicorp.com/terraform/plugin#installing-plugins</a></p>", "answers": ["<p>The <code>.terraform/providers</code> directory in the current working directory</p>", "<p>The <code>.terraform.d</code> directory in the current working directory</p>", "<p>The <code>.terraform.plugins</code> directory in the current working directory</p>", "<p><code>/etc/terraform/plugins</code> </p>"]}, "correct_response": ["a"], "section": "Objective 3 - Understand Terraform Basics", "question_plain": "A user runs terraform init on their RHEL-based server, and per the output, two provider plugins are downloaded:$ terraform init\n\nInitializing the backend...\n\nInitializing provider plugins...\n- Checking for available provider plugins...\n- Downloading plugin for provider \"aws\" (hashicorp/aws) 2.44.0...\n- Downloading plugin for provider \"random\" (hashicorp/random) 2.2.1...\n\nTerraform has been successfully initialized!\nWhere are these plugins downloaded and stored on the server?", "related_lectures": []}, {"_class": "assessment", "id": 69267390, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Environment variables can be used to set the value of input variables. The environment variables must be in the format <code>\"____\"_&lt;<em>variablename</em>&gt;</code>. </p><p>Select the correct prefix string from the following list.</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Terraform allows you to use environment variables to set values in your Terraform configuration. This can be useful for specifying values specific to the environment in which Terraform is running or providing values that can be easily changed without modifying the Terraform configuration.</p><p>To use a variable in Terraform, you need to define the variable using the following syntax in your Terraform configuration:</p><p><br></p><pre class=\"prettyprint linenums\">variable \"instructor_name\" {\n  type = string\n}</pre><p>You can then set the value of the environment variable when you run Terraform by exporting the variable in your shell before running any Terraform commands:</p><p><br></p><pre class=\"prettyprint linenums\">$&nbsp;export TF_VAR_instructor_name=\"bryan\"\n$&nbsp;terraform apply</pre><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/cli/config/environment-variables\">https://developer.hashicorp.com/terraform/cli/config/environment-variables</a></p>", "answers": ["<p><code>TF_VAR</code> </p>", "<p><code>TF_ENV</code> </p>", "<p><code>TF_VAR_VALUE</code> </p>", "<p><code>TF_ENV_VAR</code> </p>"]}, "correct_response": ["a"], "section": "Objective 3 - Understand Terraform Basics", "question_plain": "Environment variables can be used to set the value of input variables. The environment variables must be in the format \"____\"_&lt;variablename&gt;. Select the correct prefix string from the following list.", "related_lectures": []}, {"_class": "assessment", "id": 69267334, "assessment_type": "multiple-choice", "prompt": {"question": "<p>While Terraform is generally written using the HashiCorp Configuration Language (HCL). What other syntax can Terraform be expressed in?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Terraform can be expressed using two syntaxes: <strong>HashiCorp Configuration Language (HCL)</strong>, which is the primary syntax for Terraform, and <strong>JSON</strong>.</p><p>The <em>HCL syntax is designed to be human-readable and easy to write</em>, and it provides many features designed explicitly for Terraform, such as interpolation, variables, and modules.</p><p>The <strong><em>JSON syntax is a machine-readable alternative</em></strong> to HCL, and it is typically used when importing existing infrastructure into Terraform or when integrating Terraform with other tools that expect data in JSON format.</p><p>While Terraform will automatically detect the syntax of a file based on its extension, you can also specify the syntax explicitly by including a <code><strong>terraform</strong></code> stanza in the file, as follows:</p><p><br></p><pre class=\"prettyprint linenums\"># HCL syntax Example\n# terraform { }\n\n\n# JSON syntax Exmample\n{\n  \"terraform\": {}\n}</pre><p><br></p><p>Note that while JSON is supported as a syntax, it is not recommended to use it for writing Terraform configurations from scratch, as the HCL syntax is more user-friendly and provides better support for Terraform's specific features.</p><p><a href=\"https://github.com/hashicorp/hcl/blob/main/hclsyntax/spec.md\">https://github.com/hashicorp/hcl/blob/main/hclsyntax/spec.md</a></p><p><a href=\"https://developer.hashicorp.com/terraform/language/syntax/json\">https://developer.hashicorp.com/terraform/language/syntax/json</a></p>", "answers": ["<p>JSON</p>", "<p>YAML</p>", "<p>XML</p>", "<p>TypeScript</p>"]}, "correct_response": ["a"], "section": "Objective 3 - Understand Terraform Basics", "question_plain": "While Terraform is generally written using the HashiCorp Configuration Language (HCL). What other syntax can Terraform be expressed in?", "related_lectures": []}, {"_class": "assessment", "id": 69267310, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Why might a user opt to include the following snippet in their configuration file?</p><p><br></p><pre class=\"prettyprint linenums\">terraform {\n  required_version = \"&gt;= 1.3.8\"\n}</pre>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>The <code><strong>required_version</strong></code> parameter in a <code><strong>terraform</strong></code> block is used to specify the minimum version of Terraform that is required to run the configuration. This parameter is optional, but it can be useful for ensuring that a Terraform configuration is only run with a version of Terraform that is known to be compatible.</p><p>For example, if your Terraform configuration uses features that were introduced in Terraform 1.3.8, you could include the following <code><strong>terraform</strong></code> block in your configuration to ensure that Terraform 1.3.8 or later is used:</p><p><br></p><pre class=\"prettyprint linenums\">terraform {\n  required_version = \"&gt;= 1.3.8\"\n}</pre><p><br></p><p>When you run Terraform, it will check the version of Terraform that is being used against the <code><strong>required_version</strong></code> parameter and it will raise an error if the version is lower than the required version.</p><p>This can be especially useful in larger organizations or projects where multiple people are working on the same Terraform code, as it helps to ensure that everyone is using the same version of Terraform and reduces the risk of encountering unexpected behavior or bugs due to differences in Terraform versions.</p><p><a href=\"https://developer.hashicorp.com/terraform/language/settings#specifying-a-required-terraform-version\">https://developer.hashicorp.com/terraform/language/settings#specifying-a-required-terraform-version</a></p>", "answers": ["<p>The user wants to specify the minimum version of Terraform that is required to run the configuration</p>", "<p>The user wants to ensure that the application being deployed is a minimum version of 1.3.8</p>", "<p>this ensures that all Terraform providers are above a certain version to match the application being deployed</p>", "<p>versions before Terraform 1.3.8 were not approved by HashiCorp to be used in production</p>"]}, "correct_response": ["a"], "section": "Objective 3 - Understand Terraform Basics", "question_plain": "Why might a user opt to include the following snippet in their configuration file?terraform {\n  required_version = \"&gt;= 1.3.8\"\n}", "related_lectures": []}, {"_class": "assessment", "id": 69267388, "assessment_type": "multi-select", "prompt": {"question": "<p>When using constraint expressions to signify a version of a provider, which of the following are valid provider versions that satisfy the expression found in the following code snippet: (select two)</p><p><br></p><pre class=\"prettyprint linenums\">terraform {\n  required_providers {\n    aws = \"~&gt; 1.2.0\"\n  }\n}</pre>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>In a <code><strong>required_version</strong></code> parameter in Terraform, the tilde (<code><strong>~</strong></code>) symbol followed by the greater than symbol (<code><strong>&gt;</strong></code>) specifies a \"compatible with\" version constraint.</p><p>For example, if your Terraform configuration specifies <code><strong>required_version = \"~&gt; 1.12.0\"</strong></code>, Terraform will accept any version of Terraform 1.12 that is greater than or equal to version 1.12.0 and less than 1.13.0. In other words, Terraform will accept any version of Terraform 1.12 that is considered compatible with version 1.12.0.</p><p>This type of version constraint is useful when your Terraform configuration uses features that are available in a specific version of Terraform, but you also want to allow for later versions of Terraform that are compatible with that version. This allows you to specify a minimum required version of Terraform, while also allowing for later versions that are compatible with your configuration.</p><p>Note that version constraints specified using the tilde and greater than symbols are specific to Terraform, and they are not a standard part of the Semantic Versioning specification.</p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/language/modules/syntax#version\">https://developer.hashicorp.com/terraform/language/modules/syntax#version</a></p><p><a href=\"https://developer.hashicorp.com/terraform/language/expressions/version-constraints#version-constraint-syntax\">https://developer.hashicorp.com/terraform/language/expressions/version-constraints#version-constraint-syntax</a></p>", "answers": ["<p>Terraform 1.2.3</p>", "<p>Terraform 1.2.9</p>", "<p>Terraform 1.3.1</p>", "<p>Terraform 1.3.0</p>"]}, "correct_response": ["a", "b"], "section": "Objective 3 - Understand Terraform Basics", "question_plain": "When using constraint expressions to signify a version of a provider, which of the following are valid provider versions that satisfy the expression found in the following code snippet: (select two)terraform {\n  required_providers {\n    aws = \"~&gt; 1.2.0\"\n  }\n}", "related_lectures": []}, {"_class": "assessment", "id": 69267312, "assessment_type": "multiple-choice", "prompt": {"question": "<p>You are using Terraform to deploy some cloud resources and have developed the following code. However, you receive an error when trying to provision the resource. Which of the following answer fixes the syntax of the&nbsp; Terraform code?</p><p><br></p><pre class=\"prettyprint linenums\">resource \"aws_security_group\" \"vault_elb\" {\n  name        = \"${var.name_prefix}-vault-elb\"\n  description = Vault ELB\n  vpc_id      = var.vpc_id\n}</pre>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>When assigning a value to an argument in Terraform, there are a few requirements that must be met:</p><p><br></p><ol><li><p>Data type: The value must be of the correct data type for the argument. Terraform supports several data types, including <strong>strings</strong>, numbers, booleans, lists, and maps.</p></li><li><p>Value constraints: Some arguments may have specific value constraints that must be met. For example, an argument may only accept values within a certain range or values from a specific set of values.</p></li></ol><p><strong>When assigning a value to an argument expecting a string, it must be enclosed in quotes (\"...\") unless it is being generated programmatically.</strong></p><p><a href=\"https://developer.hashicorp.com/terraform/language/syntax/configuration#arguments-and-blocks\">https://developer.hashicorp.com/terraform/language/syntax/configuration#arguments-and-blocks</a></p>", "answers": ["<pre class=\"prettyprint linenums\">resource \"aws_security_group\" \"vault_elb\" {\n  name        = \"${var.name_prefix}-vault-elb\"\n  description = \"Vault ELB\"\n  vpc_id      = var.vpc_id\n}</pre>", "<pre class=\"prettyprint linenums\">resource \"aws_security_group\" \"vault_elb\" {\n  name        = \"${var.name_prefix}-vault-elb\"\n  description = \"${Vault ELB}\"\n  vpc_id      = var.vpc_id\n}</pre>", "<pre class=\"prettyprint linenums\">resource \"aws_security_group\" \"vault_elb\" {\n  name        = \"${var.name_prefix}-vault-elb\"\n  description = var_Vault ELB\n  vpc_id      = var.vpc_id\n}</pre>", "<pre class=\"prettyprint linenums\">resource \"aws_security_group\" \"vault_elb\" {\n  name        = \"${var.name_prefix}-vault-elb\"\n  description = [Vault ELB]\n  vpc_id      = var.vpc_id\n}</pre>"]}, "correct_response": ["a"], "section": "Objective 3 - Understand Terraform Basics", "question_plain": "You are using Terraform to deploy some cloud resources and have developed the following code. However, you receive an error when trying to provision the resource. Which of the following answer fixes the syntax of the&nbsp; Terraform code?resource \"aws_security_group\" \"vault_elb\" {\n  name        = \"${var.name_prefix}-vault-elb\"\n  description = Vault ELB\n  vpc_id      = var.vpc_id\n}", "related_lectures": []}, {"_class": "assessment", "id": 69267352, "assessment_type": "multi-select", "prompt": {"question": "<p>Terraform is distributed as a single binary and available for many different platforms. Select all Operating Systems that Terraform is available for. (select five)</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", "", "", ""], "explanation": "<p>Terraform is a cross-platform tool and can be installed on several operating systems, including:</p><p><br></p><ol><li><p>Windows: Terraform can be installed on <strong>Windows</strong> operating systems using the Windows installer.</p></li><li><p><strong>macOS</strong>: Terraform can be installed on macOS using the macOS installer or using Homebrew.</p></li><li><p>Linux: Terraform can be installed on <strong>Linux</strong> operating systems using the binary distribution or through package management systems, such as apt or yum.</p></li><li><p><strong>Unix</strong>: Terraform can be installed on Unix-like operating systems using the binary distribution.</p></li></ol><p><strong><em>There is no Terraform binary for AIX.</em></strong> Terraform is available for macOS, FreeBSD, OpenBSD, Linux, Solaris, and Windows.&nbsp;</p><p><a href=\"https://www.terraform.io/downloads.html\">https://www.terraform.io/downloads.html</a></p>", "answers": ["<p>macOS</p>", "<p>Linux</p>", "<p>Solaris</p>", "<p>Windows</p>", "<p>FreeBSD</p>", "<p>AIX</p>"]}, "correct_response": ["a", "b", "c", "d", "e"], "section": "Objective 3 - Understand Terraform Basics", "question_plain": "Terraform is distributed as a single binary and available for many different platforms. Select all Operating Systems that Terraform is available for. (select five)", "related_lectures": []}, {"_class": "assessment", "id": 69267376, "assessment_type": "multiple-choice", "prompt": {"question": "<p>True or False? Using the latest versions of Terraform, <code>terraform init</code> cannot automatically download community providers.</p><p><br></p><p><img src=\"https://img-b.udemycdn.com/redactor/raw/2020-01-10_23-13-55-79e04c7b786410e72b6d5efdf60599f7.png\"></p><p><br></p>", "relatedLectureIds": "", "feedbacks": ["", ""], "explanation": "<p>False. With the latest versions of Terraform, <code><strong>terraform init</strong></code> can automatically download community providers. More specifically, this feature was added with Terraform 0.13. Before 0.13, <code><strong>terraform init</strong></code> would <strong>NOT</strong> download community providers.</p><p>Terraform includes a built-in provider registry that allows you to easily install and manage the providers you need for your Terraform configuration. When you run <code><strong>terraform init</strong></code>, Terraform will check your configuration for any required providers and download them automatically if they are not already installed on your system. This includes both official Terraform providers and community-maintained providers.</p><p>To use a community-maintained provider in your Terraform configuration, you need to specify the provider in your configuration using the <code><strong>provider</strong></code> block and include the provider's source repository in your configuration. Terraform will download and install the provider automatically when you run <code><strong>terraform init</strong></code>, provided that the provider is available in the Terraform provider registry.</p><p><br></p><p><a href=\"https://www.hashicorp.com/blog/automatic-installation-of-third-party-providers-with-terraform-0-13\">https://www.hashicorp.com/blog/automatic-installation-of-third-party-providers-with-terraform-0-13</a></p>", "answers": ["<p>True</p>", "<p>False</p>"]}, "correct_response": ["b"], "section": "Objective 3 - Understand Terraform Basics", "question_plain": "True or False? Using the latest versions of Terraform, terraform init cannot automatically download community providers.", "related_lectures": []}, {"_class": "assessment", "id": 69267316, "assessment_type": "multiple-choice", "prompt": {"question": "<p>When writing Terraform code, how many spaces between each nesting level does HashiCorp recommends that you use?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>HashiCorp, the creator of Terraform, recommends using <strong>two spaces</strong> for indentation when writing Terraform code. This is a convention that helps to improve readability and consistency across Terraform configurations.</p><p>For example, when defining a resource in Terraform, you would use two spaces to indent each level of the resource definition, as in the following example:</p><p><br></p><pre class=\"prettyprint linenums\">resource \"aws_instance\" \"example\" {\n  ami           = \"ami-0c55b159cbfafe1f0\"\n  instance_type = \"t2.micro\"\n\n  tags = {\n    Name = \"example-instance\"\n  }\n}</pre><p><br></p><p>While this is the recommended convention,<strong><em> it is not a strict requirement </em></strong>and Terraform will still function correctly even if you use a different number of spaces or a different type of indentation. However, using two spaces for indentation is a widely adopted convention in the Terraform community and is recommended by HashiCorp to improve the readability and maintainability of your Terraform configurations.</p><p><br></p><p><a href=\"https://www.terraform.io/docs/configuration/style.html\">Check this link</a> for more information</p>", "answers": ["<p>2</p>", "<p>4</p>", "<p>1</p>", "<p>5</p>"]}, "correct_response": ["a"], "section": "Objective 3 - Understand Terraform Basics", "question_plain": "When writing Terraform code, how many spaces between each nesting level does HashiCorp recommends that you use?", "related_lectures": []}, {"_class": "assessment", "id": 69267318, "assessment_type": "multiple-choice", "prompt": {"question": "<p>When multiple arguments with single-line values appear on consecutive lines at the same nesting level, HashiCorp recommends that you:</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>HashiCorp style conventions suggest that you align the equals sign for consecutive arguments for easing readability for configurations:</p><p><br></p><pre class=\"prettyprint linenums\">ami           = \"abc123\"\ninstance_type = \"t2.micro\"\nsubnet_id     = \"subnet-a6b9cc2d59cc\"</pre><p><br></p><p><strong>Notice how the equal (=) signs are aligned, even though the arguments are of different lengths.</strong></p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/language/syntax/style\">https://developer.hashicorp.com/terraform/language/syntax/style</a></p>", "answers": ["<p>align the equals signs</p><p><br></p><pre class=\"prettyprint linenums\">ami           = \"abc123\" \ninstance_type = \"t2.micro\"</pre>", "<p>put arguments in alphabetical order</p><p><br></p><pre class=\"prettyprint linenums\">name = \"www.example.com\" \nrecords = [aws_eip.lb.public_ip]\ntype = \"A\"\nttl = \"300\"\nzone_id = aws_route53_zone.primary.zone_id</pre>", "<p>place all arguments using a variable at the top</p><p><br></p><pre class=\"prettyprint linenums\">ami = var.aws_ami\ninstance_type = var.instance_size\nsubnet_id = \"subnet-0bb1c79de3EXAMPLE\"\ntags = {\n  Name = \"HelloWorld\"\n}\n</pre>", "<p>place a space in between each line</p><p><br></p><pre class=\"prettyprint linenums\">type = \"A\"\n\nttl = \"300\"\n\nzone_id = aws_route53_zone.primary.zone_id</pre>"]}, "correct_response": ["a"], "section": "Objective 3 - Understand Terraform Basics", "question_plain": "When multiple arguments with single-line values appear on consecutive lines at the same nesting level, HashiCorp recommends that you:", "related_lectures": []}, {"_class": "assessment", "id": 69267320, "assessment_type": "multiple-choice", "prompt": {"question": "<p>A user creates three workspaces from the command line: <code>prod</code>, <code>dev</code>, and <code>test</code>. Which of the following commands will the user run to switch to the <code>dev</code> workspace?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>The command used to switch to the dev workspace in Terraform is <code><strong>terraform workspace select dev</strong></code>.</p><p>Terraform workspaces allow you to manage multiple sets of infrastructure resources that share the same configuration. To switch to a specific workspace in Terraform, you use the <code><strong>terraform workspace select</strong></code> command followed by the name of the workspace you want to switch to. In this case, the name of the workspace is \"dev\".</p><p>After running this command, Terraform will switch to the <code><strong>dev</strong></code> workspace, and all subsequent Terraform commands will apply to the resources in that workspace. If the <code><strong>dev</strong></code> workspace does not yet exist, Terraform will <strong>NOT</strong> create it for you.</p><p>Here's an example of using the <code><strong>terraform workspace select</strong></code> command to switch to the dev workspace:</p><p><br></p><pre class=\"prettyprint linenums\">$ terraform workspace select dev\nSwitched to workspace \"dev\".</pre><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/workspace/select\">https://developer.hashicorp.com/terraform/cli/commands/workspace/select</a></p>", "answers": ["<p><code>terraform workspace select dev</code> </p>", "<p><code>terraform workspace switch dev</code> </p>", "<p><code>terraform workspace dev</code> </p>", "<p><code>terraform workspace -switch dev</code> </p>"]}, "correct_response": ["a"], "section": "Objective 4 - Use Terraform Outside of Core Workflow", "question_plain": "A user creates three workspaces from the command line: prod, dev, and test. Which of the following commands will the user run to switch to the dev workspace?", "related_lectures": []}, {"_class": "assessment", "id": 69267414, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Harry has deployed resources on Azure using Terraform. However, he has discovered that his co-workers Ron and Ginny have manually created a few resources using the Azure console. Since it is company policy to manage production workloads using IaC, how can Harry bring these resources under Terraform management without negatively impacting the availability of the deployed resources?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>To manage the resources created manually by Ron and Ginny in Terraform without negatively impacting the availability of the deployed resources, Harry can follow the steps below:</p><p><br></p><ol><li><p>Import the existing resources: Harry can use the <code><strong>terraform import</strong></code> command to import the existing resources into Terraform. The <code><strong>terraform import</strong></code> command allows you to import existing infrastructure into Terraform, creating a Terraform state file for the resources.</p><p><br></p></li><li><p>Modify the Terraform configuration: After importing the resources, Harry can modify the Terraform configuration to reflect the desired state of the resources. This will allow him to manage the resources using Terraform just like any other Terraform-managed resource</p><p><br></p></li><li><p>Test the changes: Before applying the changes, Harry can use the <code><strong>terraform plan</strong></code> command to preview the changes that will be made to the resources. This will allow him to verify that the changes will not negatively impact the availability of the resources.</p><p><br></p></li><li><p>Apply the changes: If the changes are correct, Harry can use the <code><strong>terraform apply</strong></code> command to apply the changes to the resources.</p></li></ol><p>By following these steps, Harry can start managing the manually created resources in Terraform while ensuring that the availability of the deployed resources is not impacted.</p><p><br></p><p>The <code>terraform import</code> command is used to <a href=\"https://developer.hashicorp.com/terraform/cli/commands/import\">import existing resources</a> into Terraform. This allows you to take resources that you\u2019ve created by some other means and bring them under Terraform management.</p><p><em>Note that terraform import </em><strong><em>DOES&nbsp;NOT</em></strong><em> generate configuration, it only modifies state. You'll still need to write a configuration block for the resource for which it will be mapped using the </em><code><em>terraform import</em></code><em> command.</em></p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/import\"><strong>https://developer.hashicorp.com/terraform/cli/commands/import</strong></a></p>", "answers": ["<p>use <code>terraform import</code> to import the existing resources under Terraform management</p>", "<p>rewrite the Terraform configuration file to deploy new resources, run a <code>terraform apply</code>, and migrate users to the newly deployed resources. Manually delete the other resources created by Ron and Ginny.</p>", "<p>run a <code>terraform get</code> to retrieve other resources that are not under Terraform management</p>", "<p>resources created outside of Terraform cannot be managed by Terraform</p>"]}, "correct_response": ["a"], "section": "Objective 4 - Use Terraform Outside of Core Workflow", "question_plain": "Harry has deployed resources on Azure using Terraform. However, he has discovered that his co-workers Ron and Ginny have manually created a few resources using the Azure console. Since it is company policy to manage production workloads using IaC, how can Harry bring these resources under Terraform management without negatively impacting the availability of the deployed resources?", "related_lectures": []}, {"_class": "assessment", "id": 69267412, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Emma is a Terraform expert, and she has automated <em>all the things</em> with Terraform. A virtual machine was provisioned during a recent deployment, but a local script did not work correctly. As a result, the virtual machine needs to be destroyed and recreated. </p><p>How can Emma quickly have Terraform recreate <strong><em>the one resource</em></strong> without having to destroy everything that was created?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>The <code><strong>terraform apply -replace</strong></code> command manually marks a Terraform-managed resource for replacement, forcing it to be destroyed and recreated on the <code><strong>apply</strong></code> execution. </p><p>You could also use <code><strong>terraform destroy -target &lt;virtual machine&gt;</strong></code> and destroy only the virtual machine and then run a terraform apply again.</p><p><br></p><p><strong>IMPORTANT - PLEASE&nbsp;READ</strong></p><p>This command replaces <code><strong>terraform taint</strong></code>, which was the command that would be used up until 0.15.x. You may still see <code><strong>terraform taint</strong></code> on the actual exam until it is updated.</p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/taint\">https://developer.hashicorp.com/terraform/cli/commands/taint</a></p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/plan#replace-address\">https://developer.hashicorp.com/terraform/cli/commands/plan#replace-address</a></p>", "answers": ["<p>use <code>terraform apply -replace=aws_instance.web</code> to mark the virtual machine for replacement</p>", "<p>use <code>terraform state rm aws_instance.web</code> to remove the resource from the state file, which will cause Terraform to recreate the instance again</p>", "<p>use <code>terraform import</code> to import the error so Terraform is aware of the problem</p>", "<p>use <code>terraform refresh</code> to refresh the state and make Terraform aware of the error</p>"]}, "correct_response": ["a"], "section": "Objective 4 - Use Terraform Outside of Core Workflow", "question_plain": "Emma is a Terraform expert, and she has automated all the things with Terraform. A virtual machine was provisioned during a recent deployment, but a local script did not work correctly. As a result, the virtual machine needs to be destroyed and recreated. How can Emma quickly have Terraform recreate the one resource without having to destroy everything that was created?", "related_lectures": []}, {"_class": "assessment", "id": 69267322, "assessment_type": "multiple-choice", "prompt": {"question": "<p>A user has created three workspaces using the command line - <code>prod</code>, <code>dev</code>, and <code>test</code>. The user wants to create a fourth workspace named <code>stage</code>. </p><p>Which command will the user execute to accomplish this task?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>The user can execute the following command to create a fourth workspace named <code><strong>stage</strong></code>:\n</p><pre class=\"prettyprint linenums\">$&nbsp;terraform workspace new stage</pre><p><br></p><p>This command will create a new Terraform workspace named <code><strong>stage</strong></code>. The user can then switch to the new workspace using the <code><strong>terraform workspace select</strong></code> command and use it to manage resources in the new environment.</p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/workspace/new\">https://developer.hashicorp.com/terraform/cli/commands/workspace/new</a></p>", "answers": ["<p><code>terraform workspace new stage</code> </p>", "<p><code>terraform workspace create stage</code> </p>", "<p><code>terraform workspace -new stage</code> </p>", "<p><code>terraform workspace -create stage</code> </p>"]}, "correct_response": ["a"], "section": "Objective 4 - Use Terraform Outside of Core Workflow", "question_plain": "A user has created three workspaces using the command line - prod, dev, and test. The user wants to create a fourth workspace named stage. Which command will the user execute to accomplish this task?", "related_lectures": []}, {"_class": "assessment", "id": 69267350, "assessment_type": "multiple-choice", "prompt": {"question": "<p>What tasks can the <code>terraform state</code> command be used for in Terraform?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>The <code><strong>terraform state</strong></code> command and its subcommands can be used for various tasks related to the Terraform state. Some of the tasks that can be performed using the <code><strong>terraform state</strong></code> command are:</p><p><br></p><ol><li><p>Inspecting the Terraform state: The <code><strong>terraform state show</strong></code> subcommand can be used to display the current state of a Terraform configuration. This can be useful for verifying the current state of resources managed by Terraform.</p></li><li><p>Updating the Terraform state: The <code><strong>terraform state mv</strong></code> and <code><strong>terraform state rm</strong></code> subcommands can be used to move and remove resources from the Terraform state, respectively.</p></li><li><p>Pulling and pushing the Terraform state: The <code><strong>terraform state pull</strong></code> and <code><strong>terraform state push</strong></code> subcommands can be used to retrieve and upload the Terraform state from and to a remote backend, respectively. This is useful when multiple users or systems are working with the same Terraform configuration.</p></li><li><p>Importing resources into Terraform: The <code><strong>terraform state import</strong></code> subcommand can be used to import existing resources into the Terraform state. This allows Terraform to manage resources that were created outside of Terraform.</p></li></ol><p>By using the <code><strong>terraform state</strong></code> command and its subcommands, users can manage and manipulate the Terraform state in various ways, helping to ensure that their Terraform configurations are in the desired state.</p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/state/list\">https://developer.hashicorp.com/terraform/cli/commands/state/list</a></p><p><a href=\"https://developer.hashicorp.com/terraform/cli/state\">https://developer.hashicorp.com/terraform/cli/state</a></p>", "answers": ["<p>modify the current state, such as removing items</p>", "<p>refresh the existing state</p>", "<p>create a new state file</p>", "<p>there is no such command</p>"]}, "correct_response": ["a"], "section": "Objective 4 - Use Terraform Outside of Core Workflow", "question_plain": "What tasks can the terraform state command be used for in Terraform?", "related_lectures": []}, {"_class": "assessment", "id": 69267408, "assessment_type": "multi-select", "prompt": {"question": "<p>When you add a new module to a configuration, Terraform must download it before it can be used. What two commands can be used to download and update modules? (select two)</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>The two Terraform commands used to download and update modules are:</p><p><br></p><ol><li><p><code><strong>terraform init</strong></code>: This command downloads and updates the required modules for the Terraform configuration. It also sets up the backend for state storage if specified in the configuration.</p><p><br></p></li><li><p><code><strong>terraform get</strong></code>: This command is used to download and update modules for a Terraform configuration. It can be used to update specific modules by specifying the module name and version number, or it can be used to update all modules by simply running the command without any arguments.</p></li></ol><p>It's important to note that <code><strong>terraform init</strong></code> is typically run automatically when running other Terraform commands, so you may not need to run <code><strong>terraform get</strong></code> separately. However, if you need to update specific modules, running <code><strong>terraform get</strong></code> can be useful.</p><p><br></p><p><a href=\"https://learn.hashicorp.com/tutorials/terraform/module-create?in=terraform/modules#install-the-local-module\">https://learn.hashicorp.com/tutorials/terraform/module-create?in=terraform/modules#install-the-local-module</a></p>", "answers": ["<p><code>terraform get</code> </p>", "<p><code>terraform init</code> </p>", "<p><code>terraform refresh</code> </p>", "<p><code>terraform plan</code> </p>"]}, "correct_response": ["a", "b"], "section": "Objective 5 - Interact with Terraform Modules", "question_plain": "When you add a new module to a configuration, Terraform must download it before it can be used. What two commands can be used to download and update modules? (select two)", "related_lectures": []}, {"_class": "assessment", "id": 69267410, "assessment_type": "multiple-choice", "prompt": {"question": "<p>What do the declarations, such as <code><strong>name</strong></code>, <code><strong>cidr</strong></code>, and <code><strong>azs</strong></code>, in the following Terraform code represent and what purpose do they serve?</p><p><br></p><pre class=\"prettyprint linenums\">module \"vpc\" {\n  source  = \"terraform-aws-modules/vpc/aws\"\n  version = \"2.21.0\"\n\n  name = var.vpc_name\n  cidr = var.vpc_cidr\n\n  azs             = var.vpc_azs\n  private_subnets = var.vpc_private_subnets\n  public_subnets  = var.vpc_public_subnets\n\n  enable_nat_gateway = var.vpc_enable_nat_gateway\n\n  tags = var.vpc_tags\n}</pre>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>To pass values to a Terraform module when calling the module in your code, you use input variables. Input variables are a way to pass values into a Terraform module from the calling code. They allow the module to be flexible and reusable, as the same module can be used with different input values in different contexts.</p><p>In this example, the values for the <code><strong>name</strong></code>, <code><strong>cidr</strong></code>, and <code><strong>azs</strong></code> inputs are passed to the module as values of variables. The variables are defined in the calling code in the calling module using the <code><strong>variable</strong></code> block.</p><p>To pass the values to the module, you can specify them in a number of ways, such as:</p><p><br></p><ul><li><p>Using command-line flags when running Terraform</p></li><li><p>Storing the values in a Terraform <code>.tfvars</code> file and passing that file to Terraform when running it</p></li><li><p>Using environment variables</p></li></ul><p>For more information on Terraform modules and input variables, I recommend checking out the Terraform documentation: <a href=\"https://www.terraform.io/docs/modules/index.html\"><strong>https://www.terraform.io/docs/modules/index.html</strong></a></p><p><br></p><p><a href=\"https://learn.hashicorp.com/tutorials/terraform/module-use#set-values-for-module-input-variables\">https://learn.hashicorp.com/tutorials/terraform/module-use#set-values-for-module-input-variables</a></p>", "answers": ["<p>these are <code>variables</code> that are passed into the child module likely used for resource creation</p>", "<p>these are the <code>outputs</code> that the child module will return</p>", "<p>these are where the <code>variable declarations</code> are created so Terraform is aware of these variables within the calling module</p>", "<p>the <code>value</code> of these variables will be obtained from values created within the child module</p>"]}, "correct_response": ["a"], "section": "Objective 5 - Interact with Terraform Modules", "question_plain": "What do the declarations, such as name, cidr, and azs, in the following Terraform code represent and what purpose do they serve?module \"vpc\" {\n  source  = \"terraform-aws-modules/vpc/aws\"\n  version = \"2.21.0\"\n\n  name = var.vpc_name\n  cidr = var.vpc_cidr\n\n  azs             = var.vpc_azs\n  private_subnets = var.vpc_private_subnets\n  public_subnets  = var.vpc_public_subnets\n\n  enable_nat_gateway = var.vpc_enable_nat_gateway\n\n  tags = var.vpc_tags\n}", "related_lectures": []}, {"_class": "assessment", "id": 69267378, "assessment_type": "multi-select", "prompt": {"question": "<p>Anyone can publish and share modules on the <code>Terraform Public Module Registry</code>, and meeting the requirements for publishing a module is extremely easy. </p><p>What are some of the requirements that must be met in order to publish a module on the Terraform Public Module Registry? (select three)</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>The list below contains all the requirements for publishing a module. Meeting the requirements for publishing a module is extremely easy. The list may appear long only to ensure we're detailed, but adhering to the requirements should happen naturally.</p><p><br></p><ul><li><p><strong>GitHub.</strong> The module must be on GitHub and must be a public repo. This is only a requirement for the <a href=\"https://registry.terraform.io/\">public registry</a>. If you're using a private registry, you may ignore this requirement</p><p><br></p></li><li><p><strong>Named </strong><code><strong>terraform-&lt;PROVIDER&gt;-&lt;NAME&gt;</strong></code><strong>.</strong> Module repositories must use this three-part name format, where <code>&lt;NAME&gt;</code> reflects the type of infrastructure the module manages and <code>&lt;PROVIDER&gt;</code> is the main provider where it creates that infrastructure. The <code>&lt;NAME&gt;</code> segment can contain additional hyphens. Examples: <code>terraform-google-vault</code> or <code>terraform-aws-ec2-instance</code>.</p><p><br></p></li><li><p><strong>Repository description.</strong> The GitHub repository description is used to populate the short description of the module. This should be a simple one-sentence description of the module.</p><p><br></p></li><li><p><strong>Standard module structure.</strong> The module must adhere to the <a href=\"https://developer.hashicorp.com/terraform/language/modules/develop#standard-module-structure\">standard module structure</a>. This allows the registry to inspect your module and generate documentation, track resource usage, parse submodules and examples, and more.</p><p><br></p></li><li><p><code><strong>x.y.z</strong></code><strong> tags for releases.</strong> The registry uses tags to identify module versions. Release tag names must be a <a href=\"http://semver.org/\">semantic version</a>, which can optionally be prefixed with a <code>v</code>. For example, <code>v1.0.4</code> and <code>0.9.2</code>. To publish a module initially, at least one release tag must be present. Tags that don't look like version numbers are ignored.</p></li></ul><p><a href=\"https://developer.hashicorp.com/terraform/registry/modules/publish#requirements\">https://developer.hashicorp.com/terraform/registry/modules/publish#requirements</a></p>", "answers": ["<p>The module must be on GitHub and must be a public repo.</p>", "<p>Module repositories must use this three-part name format, <em>terraform-&lt;PROVIDER&gt;-&lt;NAME&gt;</em>.</p>", "<p>The registry uses tags to identify module versions. Release tag names must be for the format <em>x.y.z</em>, and can optionally be prefixed with a <code>v</code> .</p>", "<p>The module must be PCI/HIPPA&nbsp;compliant.</p>"]}, "correct_response": ["a", "b", "c"], "section": "Objective 5 - Interact with Terraform Modules", "question_plain": "Anyone can publish and share modules on the Terraform Public Module Registry, and meeting the requirements for publishing a module is extremely easy. What are some of the requirements that must be met in order to publish a module on the Terraform Public Module Registry? (select three)", "related_lectures": []}, {"_class": "assessment", "id": 69267406, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Sara has her entire application automated using Terraform, but she needs to start automating more infrastructure components, such as creating a new subnet, DNS record, and load balancer. Sara wants to create these new resources using modules so she easily reuse the code. However, Sara is having problems getting the <code>subnet_id</code> from the <em>subnet </em>module to pass to the <em>load balancer</em> module. </p><p><strong>modules/subnet.tf:</strong></p><pre class=\"prettyprint linenums\">resource \"aws_subnet\" \"bryan\" {\n  vpc_id     = aws_vpc.krausen.id\n  cidr_block = \"10.0.1.0/24\"\n\n  tags = {\n    Name = \"Krausen Subnet\"\n  }\n}</pre><p><br></p><p>What could fix this problem?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Modules also have output values, which are defined within the module with the <code>output</code> keyword. You can access them by referring to <code>module.&lt;MODULE NAME&gt;.&lt;OUTPUT NAME&gt;</code>. Like input variables, module outputs are listed under the <code>outputs</code> tab in the <a href=\"https://registry.terraform.io/modules/terraform-aws-modules/vpc/aws/2.21.0?tab=outputs\">Terraform registry</a>.</p><p>Module outputs are usually either passed to other parts of your configuration, or defined as outputs in your root module.</p><p><a href=\"https://learn.hashicorp.com/tutorials/terraform/module-use#define-root-output-values\">https://learn.hashicorp.com/tutorials/terraform/module-use#define-root-output-values</a></p>", "answers": ["<p>add an <code>output</code> block to the <em>subnet</em> module and retrieve the value using <code>module.subnet.subnet_id</code> for the <em>load balancer</em> module</p>", "<p>move the <em>subnet</em> and <em>load balancer</em> resource into the main configuration file so they can easily be referenced</p>", "<p>publish the module to a Terraform registry first</p>", "<p>references to resources that are created within a module cannot be used within other modules</p>"]}, "correct_response": ["a"], "section": "Objective 5 - Interact with Terraform Modules", "question_plain": "Sara has her entire application automated using Terraform, but she needs to start automating more infrastructure components, such as creating a new subnet, DNS record, and load balancer. Sara wants to create these new resources using modules so she easily reuse the code. However, Sara is having problems getting the subnet_id from the subnet module to pass to the load balancer module. modules/subnet.tf:resource \"aws_subnet\" \"bryan\" {\n  vpc_id     = aws_vpc.krausen.id\n  cidr_block = \"10.0.1.0/24\"\n\n  tags = {\n    Name = \"Krausen Subnet\"\n  }\n}What could fix this problem?", "related_lectures": []}, {"_class": "assessment", "id": 69267332, "assessment_type": "multiple-choice", "prompt": {"question": "<p>You are performing a code review of a colleague's Terraform code and see the following code. Where is this module stored?</p><p><br></p><pre class=\"prettyprint linenums\">module \"vault-aws-tgw\" {\n  source  = \"terraform-vault-aws-tgw/hcp\"\n  version = \"1.0.0\"\n  \n  client_id      = \"4djlsn29sdnjk2btk\"\n  hvn_id         = \"a4c9357ead4de\"\n  route_table_id = \"rtb-a221958bc5892eade331\"\n}</pre>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>You can use the Terraform Public Module Registry by referencing the modules you want to use in your Terraform code and including them as part of your configuration.</p><p>To reference a module from the Terraform Public Module Registry, you can use the <code><strong>module</strong></code> block in your Terraform code. For example, if you want to use a VPC module from the registry, you would add the following code to your Terraform configuration:</p><p><br></p><pre class=\"prettyprint linenums\">module \"vpc\" {\n  source = \"terraform-aws-modules/vpc\"\n  version = \"2.34.0\"\n\n  # Add any required variables and configuration here\n}</pre><p><br></p><p>The <code><strong>source</strong></code> attribute specifies the module source, which is the repository on the Terraform Public Module Registry. The <code><strong>version</strong></code> attribute specifies the version of the module you want to use.</p><p>You can also pass values for variables in the module by them within the <code><strong>module</strong></code> block. For example:</p><p><br></p><pre class=\"prettyprint linenums\">module \"vpc\" {\n  source = \"terraform-aws-modules/vpc\"\n  version = \"2.34.0\"\n\n  name = \"my-vpc\"\n  cidr = \"10.0.0.0/16\"\n  azs  = [\"us-west-2a\", \"us-west-2b\", \"us-west-2c\"]\n}</pre><p><br></p><p>Once you've specified the module in your Terraform code, you can use it as you would any other resource. For example, you could reference the VPC ID created by the VPC module with the following code:</p><p><br></p><pre class=\"prettyprint linenums\">output \"vpc_id\" {\n  value = module.vpc.vpc_id\n}</pre><p><br></p><p>You can find more information on using modules from the Terraform Public Module Registry in the Terraform documentation: <a href=\"https://www.terraform.io/docs/configuration/modules.html\"><strong>https://www.terraform.io/docs/configuration/modules.html</strong></a></p>", "answers": ["<p>a local code repository on your network</p>", "<p>the Terraform public module registry</p>", "<p>in a local file under a directory named <code>terraform/vault-aws-tgw/hcp</code> </p>", "<p>in a Terraform Cloud private module registry</p>"]}, "correct_response": ["b"], "section": "Objective 5 - Interact with Terraform Modules", "question_plain": "You are performing a code review of a colleague's Terraform code and see the following code. Where is this module stored?module \"vault-aws-tgw\" {\n  source  = \"terraform-vault-aws-tgw/hcp\"\n  version = \"1.0.0\"\n  \n  client_id      = \"4djlsn29sdnjk2btk\"\n  hvn_id         = \"a4c9357ead4de\"\n  route_table_id = \"rtb-a221958bc5892eade331\"\n}", "related_lectures": []}, {"_class": "assessment", "id": 69267348, "assessment_type": "multiple-choice", "prompt": {"question": "<p>True or False? By default, the <code>terraform destroy</code> command will prompt the user for confirmation before proceeding.</p>", "relatedLectureIds": "", "feedbacks": ["", ""], "explanation": "<p>True. By default, Terraform will prompt for confirmation before proceeding with the <code><strong>terraform destroy</strong></code> command. This prompt allows you to verify that you really want to destroy the infrastructure that Terraform is managing before it actually does so.</p><p>Terraform destroy will always prompt for confirmation before executing unless passed the <code><strong>-auto-approve</strong></code> flag.</p><p><br></p><pre class=\"prettyprint linenums\">$ terraform destroy\nDo you really want to destroy all resources?\n  Terraform will destroy all your managed infrastructure, as shown above.\n  There is no undo. Only 'yes' will be accepted to confirm.\n\n  Enter a value: yes\n</pre><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/tutorials/aws-get-started/aws-destroy\">https://developer.hashicorp.com/terraform/tutorials/aws-get-started/aws-destroy</a></p>", "answers": ["<p>True</p>", "<p>False</p>"]}, "correct_response": ["a"], "section": "Objective 6 - Use the core Terraform workflow", "question_plain": "True or False? By default, the terraform destroy command will prompt the user for confirmation before proceeding.", "related_lectures": []}, {"_class": "assessment", "id": 69267402, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Oscar is modifying his Terraform configuration file but isn't 100% sure it's correct. He is afraid that changes made could negatively affect production workloads. </p><p>How can Oscar validate the changes that will be made without impacting existing workloads?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>The <code>terraform plan</code> command is used to create an execution plan. Terraform performs a refresh, unless explicitly disabled, and then determines what actions are necessary to achieve the desired state specified in the configuration files. </p><p>This command is a convenient way to check whether the execution plan for a set of changes matches your expectations without making any changes to real resources or the state.</p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/plan\">https://developer.hashicorp.com/terraform/cli/commands/plan</a></p>", "answers": ["<p>run a <code>terraform plan</code> and validate the changes that will be made</p>", "<p>run a <code>terraform validate</code> to ensure the changes won't impact the production workloads</p>", "<p>run <code>terraform refresh</code> to compare his existing configuration file against the current one</p>", "<p>run <code>terraform apply</code> using a <em>local-exec provisioner</em> so the configuration won't impact existing workloads</p>"]}, "correct_response": ["a"], "section": "Objective 6 - Use the core Terraform workflow", "question_plain": "Oscar is modifying his Terraform configuration file but isn't 100% sure it's correct. He is afraid that changes made could negatively affect production workloads. How can Oscar validate the changes that will be made without impacting existing workloads?", "related_lectures": []}, {"_class": "assessment", "id": 69267404, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Henry has been working on automating his Azure infrastructure for a new application using Terraform. His application runs successfully, but he has added a new resource to create a DNS record using the new Infoblox provider. He has added the new resource but gets an error when he runs a <code>terraform plan</code>. </p><p>What should Henry do first before running a <code>plan</code> and <code>apply</code>?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>In this scenario, Henry has introduced a new provider. Therefore, Terraform needs to download the plugin to support the new resource he has added. Running <code><strong>terraform init</strong></code> will download the Infoblox plugin. Once that is complete, a <code>plan</code> and <code>apply</code> can be executed as needed.</p><p>You would need to rerun <code><strong>terraform init</strong></code> after modifying your code for the following reasons:</p><p><br></p><ol><li><p><strong>Adding a new provider</strong>: If you've added a new provider to your code, you'll need to run <code><strong>terraform init</strong></code> to download the provider's binary and configure it.</p><p><br></p></li><li><p>Updating the provider configuration: If you've updated the configuration of an existing provider, you'll need to run <code><strong>terraform init</strong></code> to apply the changes.</p><p><br></p></li><li><p>Updating the version of a provider: If you've updated the version of a provider, you'll need to run <code><strong>terraform init</strong></code> to download the updated version of the provider's binary.</p><p><br></p></li><li><p>Adding or removing a module: If you've added or removed a module from your code, you'll need to run <code><strong>terraform init</strong></code> to download the required modules and dependencies.</p></li></ol><p>In short, <code><strong>terraform init</strong></code> is used to initialize a Terraform working directory, and you'll need to rerun it whenever you make changes to your code that affect the providers, modules, or versions you're using.</p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/init\">https://developer.hashicorp.com/terraform/cli/commands/init</a></p>", "answers": ["<p>since a new provider has been introduced,&nbsp; <code>terraform init</code> needs to be run to download the Infoblox plugin</p>", "<p>the Azure plugin doesn't support Infoblox directly, so Henry needs to put the DNS resource in another configuration file</p>", "<p>you can't mix resources from different providers within the same configuration file, so Henry should create a module for the DNS resource and reference it from the main configuration</p>", "<p>Henry should run a <code>terraform plan -refresh=true</code> to update the state for the new DNS resource</p>"]}, "correct_response": ["a"], "section": "Objective 6 - Use the core Terraform workflow", "question_plain": "Henry has been working on automating his Azure infrastructure for a new application using Terraform. His application runs successfully, but he has added a new resource to create a DNS record using the new Infoblox provider. He has added the new resource but gets an error when he runs a terraform plan. What should Henry do first before running a plan and apply?", "related_lectures": []}, {"_class": "assessment", "id": 69267392, "assessment_type": "multiple-choice", "prompt": {"question": "<p>In order to reduce the time it takes to provision resources, Terraform uses parallelism. By default, how many resources will Terraform provision concurrently during a <code>terraform apply</code>?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>By default, Terraform will provision resources concurrently with a <strong>maximum of 10 concurrent resource operations</strong>. This setting is controlled by the <code><strong>parallelism</strong></code> configuration option in Terraform, which can be set globally in the Terraform configuration file or on a per-module basis.</p><p>The <code><strong>parallelism</strong></code> setting determines the number of resource operations that Terraform will run in parallel, so increasing the <code><strong>parallelism</strong></code> setting will result in Terraform provisioning resources more quickly, but can also increase the risk of rate-limiting or other errors from the API.</p><p>You can adjust the <code><strong>parallelism</strong></code> setting in your Terraform configuration file by adding the following code:</p><p><br></p><pre class=\"prettyprint linenums\">terraform {\n  parallelism = 20\n}</pre><p>This setting sets the maximum number of concurrent resource operations to 10. You can adjust this number to meet your specific needs and constraints.</p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/internals/graph#walking-the-graph\">https://developer.hashicorp.com/terraform/internals/graph#walking-the-graph</a></p>", "answers": ["<p>10</p>", "<p>20</p>", "<p>50</p>", "<p>5</p>"]}, "correct_response": ["a"], "section": "Objective 6 - Use the core Terraform workflow", "question_plain": "In order to reduce the time it takes to provision resources, Terraform uses parallelism. By default, how many resources will Terraform provision concurrently during a terraform apply?", "related_lectures": []}, {"_class": "assessment", "id": 69267382, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Which Terraform command will check and report errors within modules, attribute names, and value types to ensure they are syntactically valid and internally consistent?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>The <code><strong>terraform validate</strong></code> command is used to check and report errors within modules, attribute names, and value types to ensure they are syntactically valid and internally consistent. This command performs basic validation of the Terraform configuration files in the current directory, checking for issues such as missing required attributes, invalid attribute values, and incorrect structure of the Terraform code.</p><p>For example, if you run <code><strong>terraform validate</strong></code> and there are syntax errors in your Terraform code, Terraform will display an error message indicating the line number and description of the issue. If no errors are found, the command will return with no output.</p><p>It's recommended to run <code><strong>terraform validate</strong></code> before running <code><strong>terraform apply</strong></code>, to ensure that your Terraform code is valid and will not produce unexpected results.</p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/validate\">https://developer.hashicorp.com/terraform/cli/commands/validate</a></p>", "answers": ["<p><code>terraform validate</code> </p>", "<p><code>terraform fmt</code> </p>", "<p><code>terraform show</code> </p>", "<p><code>terraform format</code> </p>"]}, "correct_response": ["a"], "section": "Objective 6 - Use the core Terraform workflow", "question_plain": "Which Terraform command will check and report errors within modules, attribute names, and value types to ensure they are syntactically valid and internally consistent?", "related_lectures": []}, {"_class": "assessment", "id": 69267326, "assessment_type": "multiple-choice", "prompt": {"question": "<p>A \"backend\" in Terraform determines how state is loaded and how an operation such as <code>apply</code> is executed. Which of the following is <strong>not</strong> a supported backend type?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p><strong>GitHub is not a supported backend type.</strong> </p><p>The Terraform backend is responsible for storing the state of your Terraform infrastructure and ensuring that state is consistent across all team members. Terraform state is used to store information about the resources that Terraform has created, and is used by Terraform to determine what actions are necessary when you run Terraform commands like <code><strong>apply</strong></code> or <code><strong>plan</strong></code>.</p><p>Terraform provides several backend options, including:</p><p><br></p><ul><li><p><code><strong>local</strong></code> backend: The default backend, which stores Terraform state on the local filesystem. This backend is suitable for small, single-user deployments, but can become a bottleneck as the size of your infrastructure grows or as multiple users start managing the infrastructure.</p><p><br></p></li><li><p><code><strong>remote</strong></code> backend: This backend stores Terraform state in a remote location, such as an S3 bucket, a Consul server, or a Terraform Enterprise instance. The remote backend allows multiple users to share the same state and reduces the risk of state corruption due to disk failures or other issues.</p><p><br></p></li><li><p><code><strong>consul</strong></code> backend: This backend stores Terraform state in a Consul cluster. Consul provides a highly available and durable storage solution for Terraform state, and also provides features like locking and versioning that are important for collaboration.</p><p><br></p></li><li><p><code><strong>s3</strong></code> backend: This backend stores Terraform state in an S3 bucket. S3 provides a highly available and durable storage solution for Terraform state, and is a popular option for storing Terraform state for large infrastructure deployments.</p></li></ul><p>When choosing a backend, you should consider the needs of your infrastructure, including the size of your deployment, the number of users who will be managing the infrastructure, and the level of collaboration that will be required. It's also important to consider the cost and performance characteristics of each backend, as some backends may be more expensive or may require more setup and maintenance than others.</p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/language/settings/backends/configuration\">https://developer.hashicorp.com/terraform/language/settings/backends/configuration</a></p>", "answers": ["<p><code>github</code> </p>", "<p><code>consul</code> </p>", "<p><code>local</code> </p>", "<p><code>s3</code> </p>"]}, "correct_response": ["a"], "section": "Objective 7 - Implement and Maintain State", "question_plain": "A \"backend\" in Terraform determines how state is loaded and how an operation such as apply is executed. Which of the following is not a supported backend type?", "related_lectures": []}, {"_class": "assessment", "id": 69267400, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Freddy and his co-worker Jason are deploying resources in GCP using Terraform for their team. After resources have been deployed, they must destroy the cloud-based resources to save on costs. However, two other team members, Michael and Chucky, are using a Cloud SQL instance for testing and request to keep it running.</p><p>How can Freddy and Jason destroy all other resources without negatively impacting the database?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>To destroy all Terraform-managed resources except for a single resource, you can use the <code><strong>terraform state</strong></code> command to remove the state for the resources you want to preserve. This effectively tells Terraform that those resources no longer exist, so it will not attempt to destroy them when you run <code><strong>terraform destroy</strong></code>.</p><p>Here's an example of how you could do this:</p><p><br></p><ol><li><p>Identify the resource you want to preserve. In this example, let's assume you want to preserve a resource named <code><strong>prod_db</strong></code>.</p><p><br></p></li><li><p>Run <code><strong>terraform state list</strong></code> to see a list of all Terraform-managed resources.</p><p><br></p></li><li><p>Run <code><strong>terraform state rm</strong></code> for each resource you want to keep, like the <code><strong>prod_db</strong></code>. For example:</p><p><br></p><pre class=\"prettyprint linenums\">terraform state rm google_sql_database_instance.prod_db\nterraform state rm aws_instance.another_instance</pre><p><br></p></li><li><p>Run <code><strong>terraform destroy</strong></code> to destroy all remaining resources. Terraform will not attempt to destroy the resource you preserved in step 3 because Terraform no longer manages it.</p></li></ol><p>Note that this approach can be dangerous and is not recommended if you have multiple Terraform workspaces or if you are using a remote state backend, as it can cause inconsistencies in your state file. In those cases, it is usually better to use a separate Terraform workspace for the resources you want to preserve or to utilize Terraform's built-in resource-targeting functionality to destroy only specific resources.</p><p><strong>All other options would be too time-consuming or will cause an outage to the database.</strong></p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/state/rm\">https://developer.hashicorp.com/terraform/cli/commands/state/rm</a></p>", "answers": ["<p>run a <code>terraform state rm</code> command to remove the Cloud SQL instance from Terraform management before running the <code>terraform destroy</code> command</p>", "<p>run a <code>terraform destroy</code>, modify the configuration file to include only the Cloud SQL resource, and then run a <code>terraform apply</code> </p>", "<p>take a snapshot of the database, run a <code>terraform destroy</code>, and then recreate the database in the GCP&nbsp;console by restoring the snapshot</p>", "<p>delete the entire state file using the <code>terraform state rm</code> command and manually delete the other resources in GCP</p>"]}, "correct_response": ["a"], "section": "Objective 7 - Implement and Maintain State", "question_plain": "Freddy and his co-worker Jason are deploying resources in GCP using Terraform for their team. After resources have been deployed, they must destroy the cloud-based resources to save on costs. However, two other team members, Michael and Chucky, are using a Cloud SQL instance for testing and request to keep it running.How can Freddy and Jason destroy all other resources without negatively impacting the database?", "related_lectures": []}, {"_class": "assessment", "id": 69267366, "assessment_type": "multiple-choice", "prompt": {"question": "<p>You and a colleague are working on updating some Terraform configurations within your organization. You need to follow a new naming standard for the local name within your resource blocks. However, you don't want Terraform to replace the object after changing your configuration files.</p><p>As an example, you want to change <code>data-bucket</code> to now be <code>prod-encrypted-data-s3-bucket</code> in the following resource block:</p><p><br></p><pre class=\"prettyprint linenums\">resource \"aws_s3_bucket\" \"data-bucket\" {\n  bucket = \"corp-production-data-bucket\"\n\n  tags = {\n    Name        = \"corp-production-data-bucket\"\n    Environment = \"prod\"\n  }\n}</pre><p><br></p><p>After updating the resource block, what command would you run to update the local name while ensuring Terraform does not replace the existing resource?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>You can use <code>terraform state mv</code> when you wish to retain an existing remote object but track it as a different resource instance address in Terraform, such as if you have renamed a resource block or you have moved it into a different module in your configuration.</p><p>In this case, Terraform would not touch the actual resource that is deployed, but it would simply attach the existing object to the new address in Terraform.</p><p><br></p><p><strong>WRONG&nbsp;ANSWERS:</strong></p><p><br></p><ul><li><p><code><strong>terraform apply - replace</strong></code> - this would cause Terraform to replace the resource</p></li><li><p><code><strong>terraform apply - refresh-only</strong></code> - this command is used to reconcile any changes to the real-world resources and update state to reflect those changes. It would not help us solve our problem</p></li><li><p><code><strong>terraform state rm</strong></code> - This command is used to remove a resource from state entirely while leaving the real-world resource intact. The bucket would still exist but it wouldn't help us with renaming our resource in our configuration file.</p></li></ul><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/state/mv#usage\">https://developer.hashicorp.com/terraform/cli/commands/state/mv#usage</a></p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/state/mv#example-rename-a-resource\">A specific example relating to this question </a></p><p><br></p>", "answers": ["<p><code>terraform state mv aws_s3_bucket.data-bucket aws_s3_bucket.prod-encrypted-data-s3-bucket</code> </p>", "<p><code>terraform apply -replace aws_s3_bucket.data-bucket</code> </p>", "<p><code>terraform apply -refresh-only</code> </p>", "<p><code>terraform state rm aws_s3_bucket.data-bucket</code> </p>"]}, "correct_response": ["a"], "section": "Objective 7 - Implement and Maintain State", "question_plain": "You and a colleague are working on updating some Terraform configurations within your organization. You need to follow a new naming standard for the local name within your resource blocks. However, you don't want Terraform to replace the object after changing your configuration files.As an example, you want to change data-bucket to now be prod-encrypted-data-s3-bucket in the following resource block:resource \"aws_s3_bucket\" \"data-bucket\" {\n  bucket = \"corp-production-data-bucket\"\n\n  tags = {\n    Name        = \"corp-production-data-bucket\"\n    Environment = \"prod\"\n  }\n}After updating the resource block, what command would you run to update the local name while ensuring Terraform does not replace the existing resource?", "related_lectures": []}, {"_class": "assessment", "id": 69267384, "assessment_type": "multiple-choice", "prompt": {"question": "<p>True or False?&nbsp;Each Terraform workspace uses its own state file to manage the infrastructure associated with that particular workspace.</p>", "relatedLectureIds": "", "feedbacks": ["", ""], "explanation": "<p>True. Each Terraform workspace uses its own state file to manage the infrastructure associated with that workspace. This allows Terraform to manage multiple sets of infrastructure independently and avoid conflicts. Each Terraform workspace has its own Terraform state file that keeps track of the resources and their attributes, so changes made in one workspace will not affect the infrastructure managed by other workspaces.</p><p>In fact, having different state files provides the benefits of workspaces, where you can separate the management of infrastructure resources so you can make changes to specific resources without impacting resources in others....</p><p><a href=\"https://developer.hashicorp.com/terraform/language/state/workspaces#workspace-internals\">https://developer.hashicorp.com/terraform/language/state/workspaces#workspace-internals</a></p>", "answers": ["<p>True</p>", "<p>False</p>"]}, "correct_response": ["a"], "section": "Objective 7 - Implement and Maintain State", "question_plain": "True or False?&nbsp;Each Terraform workspace uses its own state file to manage the infrastructure associated with that particular workspace.", "related_lectures": []}, {"_class": "assessment", "id": 69267330, "assessment_type": "multiple-choice", "prompt": {"question": "<p>What Terraform command can be used to remove the lock on the state for the current configuration?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>The <code><strong>terraform force-unlock</strong></code> command can be used to remove the lock on the Terraform state for the current configuration. Another option is to use the \"terraform state rm\" command followed by the \"terraform state push\" command to forcibly overwrite the state on the remote backend, effectively removing the lock. It's important to note that these commands should be used with caution, as they can potentially cause conflicts and data loss if not used properly.</p><p>Be very careful forcing an unlock, as it could cause data corruption and problems with your state file.</p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/force-unlock\">https://developer.hashicorp.com/terraform/cli/commands/force-unlock</a></p>", "answers": ["<p><code>terraform force-unlock</code> </p>", "<p><code>terraform unlock</code> </p>", "<p><code>terraform state-unlock</code> </p>", "<p>Removing the lock on a state file is not possible</p>"]}, "correct_response": ["a"], "section": "Objective 7 - Implement and Maintain State", "question_plain": "What Terraform command can be used to remove the lock on the state for the current configuration?", "related_lectures": []}, {"_class": "assessment", "id": 69267386, "assessment_type": "multiple-choice", "prompt": {"question": "<p>True or False? The <code>terraform plan -refresh-only</code> command is used to create a plan whose goal is only to update the Terraform state to match any changes made to remote objects outside of Terraform.</p>", "relatedLectureIds": "", "feedbacks": ["", ""], "explanation": "<p>The <code><strong>terraform plan -refresh-only</strong></code> command is used in Terraform to update the state of your infrastructure in memory without making any actual changes to the infrastructure. The <code><strong>-refresh-only</strong></code> flag tells Terraform to only update its understanding of the current state of the infrastructure and not to make any changes.</p><p>When you run <code><strong>terraform plan -refresh-only</strong></code>, Terraform will query the current state of your infrastructure and update its internal state to reflect what it finds. This can be useful if you want to ensure that Terraform has the most up-to-date information about your infrastructure before generating a plan, without actually making any changes.</p><p>It is important to note that while the <code><strong>terraform plan -refresh-only</strong></code> command updates Terraform's internal state, it does not modify the Terraform state file on disk. The Terraform state file is only updated when Terraform actually makes changes to the infrastructure.</p><p>Note that this command replaced the deprecated command <code><strong>terraform refresh</strong></code></p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/plan#planning-modes\">https://developer.hashicorp.com/terraform/cli/commands/plan#planning-modes</a></p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/refresh\">https://developer.hashicorp.com/terraform/cli/commands/refresh</a></p>", "answers": ["<p>False</p>", "<p>True</p>"]}, "correct_response": ["b"], "section": "Objective 7 - Implement and Maintain State", "question_plain": "True or False? The terraform plan -refresh-only command is used to create a plan whose goal is only to update the Terraform state to match any changes made to remote objects outside of Terraform.", "related_lectures": []}, {"_class": "assessment", "id": 69267324, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Where does Terraform Open Source (OSS)&nbsp;store the <em>local </em>state for workspaces?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Terraform Open Source (OSS) stores the local state for workspaces in a file on disk. For local state, Terraform stores the workspace states in a directory called <code>terraform.tfstate.d/&lt;workspace_name&gt;</code>. Here's a screenshot of a Terraform run that was created using a workspace called <code>training</code>. You can see that Terraform created the <code>terraform.tfstate.d</code> directory, and then a directory with the namespace name underneath it.</p><p>Under each directory, you'll find the state file, which is name <code>terraform.tfstate</code></p><p><br></p><p><img src=\"https://img-b.udemycdn.com/redactor/raw/practice_test_question_explanation/2022-11-18_12-53-25-c8020271c9df1f7cd01ac8daf5ae9911.png\"></p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/cli/workspaces#workspace-internals\">https://developer.hashicorp.com/terraform/cli/workspaces#workspace-internals</a></p>", "answers": ["<p>directory called <code>terraform.tfstate.d/&lt;workspace name&gt;</code> </p>", "<p>directory called <code>terraform.workspaces.tfstate</code> </p>", "<p>a file called <code>terraform.tfstate</code> </p>", "<p>a file called <code>terraform.tfstate.backup</code> </p>"]}, "correct_response": ["a"], "section": "Objective 7 - Implement and Maintain State", "question_plain": "Where does Terraform Open Source (OSS)&nbsp;store the local state for workspaces?", "related_lectures": []}, {"_class": "assessment", "id": 69267338, "assessment_type": "multiple-choice", "prompt": {"question": "<p>What is the correct syntax for defining a <strong><em>list of strings</em></strong> for a variable in Terraform?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>In Terraform, you can use a list of strings variable to store multiple string values and reference those values in your Terraform configuration. Here's how you can use a list of strings variable in Terraform:</p><p><br></p><ol><li><p>Define the variable: To define a list of strings variable in Terraform, you need to specify the <code><strong>type</strong></code> as <code><strong>list(string)</strong></code>. Here's an example:</p></li></ol><pre class=\"prettyprint linenums\">variable \"example_list\" {\n  type = list(string)\n}</pre><p><br></p><ol><li><p>Assign values to the variable: You can assign values to a list of strings variable in your Terraform configuration, for example:</p></li></ol><pre class=\"prettyprint linenums\">variable \"example_list\" {\n  type = list(string)\n  default = [\"string1\", \"string2\", \"string3\"]\n}</pre><p><br></p><p>In this example, the <code><strong>example_list</strong></code> variable is defined as a list of strings and its default value is set to a list of three strings.</p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/tutorials/configuration-language/variables#list-public-and-private-subnets\">https://developer.hashicorp.com/terraform/tutorials/configuration-language/variables#list-public-and-private-subnets</a></p><p><a href=\"https://developer.hashicorp.com/terraform/language/expressions/types#list\">https://developer.hashicorp.com/terraform/language/expressions/types#list</a></p>", "answers": ["<pre class=\"prettyprint linenums\">variable \"public_subnet_cidr_blocks\" {\n  type = &lt;removed&gt;\n  default = [\n    \"10.0.1.0/24\",\n    \"10.0.1.0/24\",\n    \"10.0.1.0/24\", \n    \"10.0.1.0/24\",\n  ]\n}</pre>", "<pre class=\"prettyprint linenums\">variable \"resource_tags\" {\n  description = \"Tags to set for all resources\"\n  type        = &lt;removed&gt;\n  default     = {\n    project     = \"exam-prep\",\n    environment = \"prod\"\n    instructor  = \"krausen\"\n  }\n}</pre>", "<pre class=\"prettyprint linenums\">variable \"public_subnets\" {\n  description = \"The number of public subnets for VPC\"\n  type        = &lt;removed&gt;\n  default     = 2\n}</pre>", "<pre class=\"prettyprint linenums\">variable \"aws_region\" {\n  description = \"AWS region\"\n  type        = &lt;removed&gt;\n  default     = \"us-west-1\"\n}</pre>"]}, "correct_response": ["a"], "section": "Objective 8 - Read, Generate, and Modify Configuration", "question_plain": "What is the correct syntax for defining a list of strings for a variable in Terraform?", "related_lectures": []}, {"_class": "assessment", "id": 69267342, "assessment_type": "multiple-choice", "prompt": {"question": "<p>What Terraform command will launch the Interactive console to evaluate and experiment with expressions?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>The <code><strong>terraform console</strong></code> command in Terraform is a command-line interface (CLI) tool that allows you to interactively evaluate expressions in Terraform. The <code><strong>terraform console</strong></code> command opens a REPL (Read-Eval-Print Loop) environment, where you can type Terraform expressions and see the results immediately. This can be useful for testing and debugging Terraform configurations and understanding how Terraform evaluates expressions.</p><p>Here are a few examples of how the <code><strong>terraform console</strong></code> command can be helpful:</p><p><br></p><ol><li><p>Testing expressions: You can use the <code><strong>terraform console</strong></code> command to test Terraform expressions and see the results immediately. For example, you can test arithmetic operations, string concatenation, and other Terraform expressions to ensure that they are evaluated correctly.</p><p><br></p></li><li><p>Debugging configurations: If you have a complex Terraform configuration and you're not sure why it's not working as expected, you can use the <code><strong>terraform console</strong></code> command to debug the configuration by testing expressions and variables to see their values.</p><p><br></p></li><li><p>Understanding Terraform behavior: If you're new to Terraform and you want to understand how it evaluates expressions and variables, you can use the <code><strong>terraform console</strong></code> command to explore Terraform's behavior and see how different expressions are evaluated.</p></li></ol><p>To use the <code><strong>terraform console</strong></code> command, simply type <code><strong>terraform console</strong></code> in your terminal, and Terraform will open a REPL environment. You can then type Terraform expressions and see the results immediately. You can exit the REPL environment by typing <code><strong>exit</strong></code> or <code><strong>quit</strong></code>.</p><p>It's worth noting that the <code><strong>terraform console</strong></code> command operates in the context of a specific Terraform configuration, so you should run the command from within the directory that contains your Terraform configuration files.</p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/console\">https://developer.hashicorp.com/terraform/cli/commands/console</a></p>", "answers": ["<p><code>terraform console</code> </p>", "<p><code>terraform cmdline</code> </p>", "<p><code>terraform cli</code> </p>", "<p><code>terraform get</code> </p>"]}, "correct_response": ["a"], "section": "Objective 8 - Read, Generate, and Modify Configuration", "question_plain": "What Terraform command will launch the Interactive console to evaluate and experiment with expressions?", "related_lectures": []}, {"_class": "assessment", "id": 69267398, "assessment_type": "multiple-choice", "prompt": {"question": "<p>True or False?&nbsp;The following code is an example of an <strong><em>implicit dependency</em></strong> in Terraform</p><p><br></p><pre class=\"prettyprint linenums\">resource \"aws_instance\" \"web\" {\n  ami           = \"ami-0c55b159cbfafe1f0\"\n  instance_type = \"t2.micro\"\n}\n\nresource \"aws_ebs_volume\" \"data\" {\n  availability_zone = \"us-west-2a\"\n  size              = 1\n\n  tags = {\n    Name = \"data-volume\"\n  }\n}\n\nresource \"aws_volume_attachment\" \"attach_data_volume\" {\n  device_name = \"/dev/xvdf\"\n  volume_id   = aws_ebs_volume.data.id\n  instance_id = aws_instance.web.id\n}\n</pre>", "relatedLectureIds": "", "feedbacks": ["", ""], "explanation": "<p>Terraform <strong><em>implicit dependencies</em></strong> refer to the dependencies between resources in a Terraform configuration but are not <strong>explicitly</strong> defined in the configuration. Terraform uses a graph to track these implicit dependencies and ensures that resources are created, updated, and deleted in the correct order.</p><p>For example, suppose you have a Terraform configuration that creates a virtual machine and a disk. In that case, Terraform will implicitly depend on the disk being created before the virtual machine because the virtual machine needs the disk to function. Terraform will automatically create the disk first and then create the virtual machine.</p><p>Sometimes, Terraform may miss an implicit dependency, resulting in an error when you run <code><strong>terraform apply</strong></code>. In these cases, you can use the <code><strong>depends_on</strong></code> argument to explicitly declare the dependency between resources. For example:</p><p><br></p><pre class=\"prettyprint linenums\">resource \"aws_instance\" \"example\" {\n  ami           = \"ami-0c55b159cbfafe1f0\"\n  instance_type = \"t2.micro\"\n\n  depends_on = [\n    aws_ebs_volume.example\n  ]\n}\n\nresource \"aws_ebs_volume\" \"example\" {\n  availability_zone = \"us-west-2a\"\n  size              = 1\n}\n</pre><p>In this example, the <code><strong>aws_instance</strong></code> resource depends on the <code><strong>aws_ebs_volume</strong></code> resource, and Terraform will create the <code><strong>aws_ebs_volume</strong></code> resource first and then the <code><strong>aws_instance</strong></code> resource.</p><p>In general, Terraform implicit dependencies are handled automatically, but sometimes it may be necessary to use the <code><strong>depends_on</strong></code> argument to ensure that resources are created in the correct order.</p><p><a href=\"https://developer.hashicorp.com/terraform/tutorials/certification-associate-tutorials-003/dependencies\">https://developer.hashicorp.com/terraform/tutorials/certification-associate-tutorials-003/dependencies</a></p>", "answers": ["<p>True</p>", "<p>False</p>"]}, "correct_response": ["a"], "section": "Objective 8 - Read, Generate, and Modify Configuration", "question_plain": "True or False?&nbsp;The following code is an example of an implicit dependency in Terraformresource \"aws_instance\" \"web\" {\n  ami           = \"ami-0c55b159cbfafe1f0\"\n  instance_type = \"t2.micro\"\n}\n\nresource \"aws_ebs_volume\" \"data\" {\n  availability_zone = \"us-west-2a\"\n  size              = 1\n\n  tags = {\n    Name = \"data-volume\"\n  }\n}\n\nresource \"aws_volume_attachment\" \"attach_data_volume\" {\n  device_name = \"/dev/xvdf\"\n  volume_id   = aws_ebs_volume.data.id\n  instance_id = aws_instance.web.id\n}", "related_lectures": []}, {"_class": "assessment", "id": 69267340, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Which code snippet would allow you to retrieve information about existing resources and use that information within your Terraform configuration?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", "", ""], "explanation": "<p>In Terraform, <code>data</code> blocks are used to retrieve data from external sources, such as APIs or databases, and make that data available to your Terraform configuration. With <code>data</code> blocks, you can use information from external sources to drive your infrastructure as code, making it more dynamic and flexible.</p><p>For example, you can use a <code>data</code> block to retrieve a list of Amazon Machine Images (AMIs) from AWS, and then use that data to select the appropriate AMI for a virtual machine you are provisioning:</p><p><br></p><pre class=\"prettyprint linenums\">data \"aws_ami\" \"example\" {\n  most_recent = true\n\n  filter {\n    name   = \"name\"\n    values = [\"amzn2-ami-hvm-2.0.*-x86_64-gp2\"]\n  }\n\n  filter {\n    name   = \"virtualization-type\"\n    values = [\"hvm\"]\n  }\n}\n\nresource \"aws_instance\" \"example\" {\n  ami           = data.aws_ami.example.id\n  instance_type = \"t2.micro\"\n}</pre><p><br></p><p>In this example, the <code><strong>data</strong></code> block retrieves the most recent Amazon Linux 2 HVM AMI, and the <code><strong>aws_instance</strong></code> resource uses the selected AMI to create a virtual machine.</p><p>Data blocks can be used to retrieve information from a wide range of sources, such as databases, APIs, and cloud providers. This information can then be used to conditionally create, update, or delete resources, making your Terraform configurations more flexible and adaptable to changing requirements.</p><p><a href=\"https://developer.hashicorp.com/terraform/language/data-sources\">https://developer.hashicorp.com/terraform/language/data-sources</a></p>", "answers": ["<pre class=\"prettyprint linenums\">data \"aws_ami\" \"aws_instance\" {\n  most_recent = true\n\n  owners = [\"self\"]\n  tags = {\n    Name   = \"app-server\"\n    Tested = \"true\"\n  }\n}</pre>", "<pre class=\"prettyprint linenums\">provider \"google\" {\n  project = \"acme-app\"\n  region  = \"us-central1\"\n}</pre>", "<pre class=\"prettyprint linenums\">locals {\n  service_name = \"forum\"\n  owner        = \"Community Team\"\n}</pre>", "<pre class=\"prettyprint linenums\">module \"deploy-servers\" {\n  source = \"./app-cluster\"\n\n  servers = 5\n}</pre>", "<pre class=\"prettyprint linenums\">resource \"aws_instance\" \"web\" {\n  ami           = \"ami-a1b2c3d4\"\n  instance_type = \"t2.micro\"\n}</pre>"]}, "correct_response": ["a"], "section": "Objective 8 - Read, Generate, and Modify Configuration", "question_plain": "Which code snippet would allow you to retrieve information about existing resources and use that information within your Terraform configuration?", "related_lectures": []}, {"_class": "assessment", "id": 69267360, "assessment_type": "multiple-choice", "prompt": {"question": "<p>What environment variable can be set to enable detailed logging for Terraform?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Terraform has detailed logs that can be enabled by setting the <code>TF_LOG</code> environment variable to any value. This will cause detailed logs to appear on stderr.</p><p>You can set <code>TF_LOG</code> to one of the log levels <code>TRACE</code>, <code>DEBUG</code>, <code>INFO</code>, <code>WARN</code> or <code>ERROR</code> to change the verbosity of the logs. <code>TRACE</code> is the most verbose and it is the default if <code>TF_LOG</code> is set to something other than a log level name.</p><p><a href=\"https://developer.hashicorp.com/terraform/internals/debugging\">https://developer.hashicorp.com/terraform/internals/debugging</a></p>", "answers": ["<p><code>TF_LOG</code> </p>", "<p><code>TF_DEBUG</code> </p>", "<p><code>TF_TRACE</code> </p>", "<p><code>TF_INFO</code> </p>"]}, "correct_response": ["a"], "section": "Objective 8 - Read, Generate, and Modify Configuration", "question_plain": "What environment variable can be set to enable detailed logging for Terraform?", "related_lectures": []}, {"_class": "assessment", "id": 69267396, "assessment_type": "multiple-choice", "prompt": {"question": "<p>True or False?&nbsp;When using the Terraform provider for Vault, the tight integration between these HashiCorp tools provides the ability to mask secrets in the state file.</p>", "relatedLectureIds": "", "feedbacks": ["", ""], "explanation": "<p><strong>False</strong>. By default, Terraform does not provide the ability to mask secrets in the Terraform plan and state files regardless of what provider you are using. While Terraform and Vault are both developed by HashiCorp and have a tight integration, masking secrets in Terraform plans and state files requires additional steps to securely manage sensitive information.</p><p>One common approach is to use environment variables or Terraform input variables to store sensitive information, and then use Terraform's data sources to retrieve the information from the environment or input variables, rather than hardcoding the information into the Terraform configuration. This helps to ensure that sensitive information is not stored in plain text in the Terraform plan or state files.</p><p><a href=\"https://learn.hashicorp.com/tutorials/terraform/secrets-vault\">https://learn.hashicorp.com/tutorials/terraform/secrets-vault</a></p>", "answers": ["<p>True</p>", "<p>False</p>"]}, "correct_response": ["b"], "section": "Objective 8 - Read, Generate, and Modify Configuration", "question_plain": "True or False?&nbsp;When using the Terraform provider for Vault, the tight integration between these HashiCorp tools provides the ability to mask secrets in the state file.", "related_lectures": []}, {"_class": "assessment", "id": 69267344, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Understanding how indexes work is essential when working with different variable types and resource blocks that use <code>count</code> or <code>for_each</code>. Therefore, what is the output value of the following code snippet?</p><p><br></p><pre class=\"prettyprint linenums\">variable \"candy_list\" {\n  type = list(string)\n  default = [\"snickers\", \"kitkat\", \"reeces\", \"m&amp;ms\"]\n}\n\noutput \"give_me_candy\" {\n  value = element(var.candy_list, 2)\n}</pre><p><br></p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>In this example, the <code><strong>candy_list</strong></code> variable is a list of strings, and the <code><strong>output</strong></code> block retrieves the third element in the list (at index 2) and outputs it as the value of <code><strong>give_me_candy</strong></code>.</p><p>Remember that an index starts at [0], and then counts up. Therefore, the following represents the index value as shown in the variable above:</p><ul><li><p><strong>[0]</strong> = snickers</p></li><li><p><strong>[1] </strong>= kitkat</p></li><li><p><strong>[2]</strong> = reeces</p></li><li><p><strong>[3]</strong> = m&amp;ms</p></li></ul><p><a href=\"https://developer.hashicorp.com/terraform/language/functions/index_function\">https://developer.hashicorp.com/terraform/language/functions/index_function</a></p><p><a href=\"https://developer.hashicorp.com/terraform/language/functions/element\">https://developer.hashicorp.com/terraform/language/functions/element</a></p>", "answers": ["<p><code>reeces</code> </p>", "<p><code>snickers</code> </p>", "<p><code>kitkat</code> </p>", "<p><code>m&amp;ms</code> </p>"]}, "correct_response": ["a"], "section": "Objective 8 - Read, Generate, and Modify Configuration", "question_plain": "Understanding how indexes work is essential when working with different variable types and resource blocks that use count or for_each. Therefore, what is the output value of the following code snippet?variable \"candy_list\" {\n  type = list(string)\n  default = [\"snickers\", \"kitkat\", \"reeces\", \"m&amp;ms\"]\n}\n\noutput \"give_me_candy\" {\n  value = element(var.candy_list, 2)\n}", "related_lectures": []}, {"_class": "assessment", "id": 69267354, "assessment_type": "multiple-choice", "prompt": {"question": "<p>In the following code snippet, the <code>block type</code> is identified by which string?</p><p><br></p><pre class=\"prettyprint linenums\">resource \"aws_instance\" \"db\" {\n  ami           = \"ami-123456\"\n  instance_type = \"t2.micro\"\n}</pre>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>In Terraform, resource blocks define the resources you want to create, update, or manage as part of your infrastructure. Other type of block types in Terraform include <code>provider</code>, <code>terraform</code>, <code>output</code>, <code>data</code>, and <code>resource</code>.</p><p>The format of a resource block configuration is as follows:</p><p><br></p><pre class=\"prettyprint linenums\">resource \"TYPE\" \"NAME\" {\n  [CONFIGURATION_KEY = CONFIGURATION_VALUE]\n  ...\n}</pre><p><br></p><p>where:</p><ul><li><p><code><strong>TYPE</strong></code> is the type of resource you want to create, such as an AWS EC2 instance, an Azure storage account, or a Google Cloud Platform compute instance.</p><p><br></p></li><li><p><code><strong>NAME</strong></code> is a unique identifier for the resource, which you can use in other parts of your Terraform configuration to refer to this resource.</p><p><br></p></li><li><p><code><strong>CONFIGURATION_KEY</strong></code> is a key that corresponds to a specific attribute of the resource type.</p><p><br></p></li><li><p><code><strong>CONFIGURATION_VALUE</strong></code> is the value for the attribute specified by <code><strong>CONFIGURATION_KEY</strong></code>.</p></li></ul><p>For example, here is a simple resource block that creates an Amazon Web Services (AWS) EC2 instance:</p><p><br></p><pre class=\"prettyprint linenums\">resource \"aws_instance\" \"example\" {\n  ami           = \"ami-0323c3dd2da7fb37d\"\n  instance_type = \"t2.micro\"\n}</pre><p><br></p><p>In this example, the <code><strong>resource</strong></code> block creates an EC2 instance with the specified Amazon Machine Image (AMI) and instance type.</p><p>It is important to note that each resource type will have its own set of required and optional attributes, and you must specify the required attributes for each resource type in your Terraform configuration. Some common attributes for AWS EC2 instances include the AMI ID, instance type, and security group.</p><p>By defining resources in Terraform, you can manage your infrastructure as code and track changes to your infrastructure over time, making it easier to version control, automate, and collaborate on your infrastructure.</p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/language/resources\">https://developer.hashicorp.com/terraform/language/resources</a></p>", "answers": ["<p><code>resource</code> </p>", "<p><code>aws_instance</code> </p>", "<p><code>db</code> </p>", "<p><code>instance_type</code> </p>"]}, "correct_response": ["a"], "section": "Objective 8 - Read, Generate, and Modify Configuration", "question_plain": "In the following code snippet, the block type is identified by which string?resource \"aws_instance\" \"db\" {\n  ami           = \"ami-123456\"\n  instance_type = \"t2.micro\"\n}", "related_lectures": []}, {"_class": "assessment", "id": 69267356, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Which of the following is a <strong><em>valid</em></strong> variable name in Terraform?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>In Terraform, variable names must follow a set of naming conventions to be considered valid. Here are some examples of invalid variable names:</p><ul><li><p>Names that start with a number: <code><strong>1_invalid_variable_name</strong></code></p></li><li><p>Names that contain spaces or special characters (other than underscores): <code><strong>invalid variable name</strong></code></p></li><li><p>Names that contain only numbers: <code><strong>12345</strong></code></p></li><li><p>Names that are the same as Terraform reserved words, such as <code><strong>var</strong></code>, <code><strong>module</strong></code>, <code><strong>data</strong></code>, <code><strong>count</strong></code>, etc.</p></li></ul><p>It is recommended to use only lowercase letters, numbers, and underscores in variable names and to start variable names with a lowercase letter to ensure they are valid. Additionally, variable names should be descriptive and meaningful to help make your Terraform code more readable and maintainable.</p><p><a href=\"https://developer.hashicorp.com/terraform/tutorials/configuration-language/count\">https://developer.hashicorp.com/terraform/tutorials/configuration-language/count</a></p><p><a href=\"https://developer.hashicorp.com/terraform/language/values/variables#declaring-an-input-variable\">https://developer.hashicorp.com/terraform/language/values/variables#declaring-an-input-variable</a></p>", "answers": ["<p>invalid</p>", "<p>count</p>", "<p>245</p>", "<p>module</p>"]}, "correct_response": ["a"], "section": "Objective 8 - Read, Generate, and Modify Configuration", "question_plain": "Which of the following is a valid variable name in Terraform?", "related_lectures": []}, {"_class": "assessment", "id": 69267358, "assessment_type": "multiple-choice", "prompt": {"question": "<p>In Terraform, most resource dependencies are handled automatically. Which of the following statements best describes how Terraform resource dependencies are handled?&nbsp; </p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Terraform resource dependencies control how resources are created, updated, and destroyed. When Terraform creates or modifies resources, it must be aware of any dependencies that exist between those resources. By declaring these dependencies, Terraform can ensure that resources are created in the correct order so that dependent resources are available before other resources that depend on them.</p><p>To declare a resource dependency, you can use the <code><strong>depends_on</strong></code> argument in a resource block. The <code><strong>depends_on</strong></code> argument takes a list of resource names and specifies that the resource block in which it is declared depends on those resources.</p><p><a href=\"https://developer.hashicorp.com/terraform/language/resources\">https://developer.hashicorp.com/terraform/language/resources</a></p>", "answers": ["<p>Terraform analyzes any expressions within a resource block to find references to other objects and treats those references as implicit ordering requirements when creating, updating, or destroying resources.</p>", "<p>The Terraform binary contains a built-in reference map of all defined Terraform resource dependencies. Updates to this dependency map are reflected in Terraform versions. To ensure you are working with the latest resource dependency map you much be running the latest version of Terraform.</p>", "<p>Resource dependencies are handled automatically by the <code>depends_on</code> meta-argument, which is set to true by default.</p>", "<p>Resource dependencies are identified and maintained in a file called <code>resource.dependencies</code>. Each terraform provider is required to maintain a list of all resource dependencies for the provider and it's included with the plugin during initialization when <code>terraform init</code> is executed. The file is located in the <code>terraform.d</code> folder.</p>"]}, "correct_response": ["a"], "section": "Objective 8 - Read, Generate, and Modify Configuration", "question_plain": "In Terraform, most resource dependencies are handled automatically. Which of the following statements best describes how Terraform resource dependencies are handled?&nbsp;", "related_lectures": []}, {"_class": "assessment", "id": 69267362, "assessment_type": "multiple-choice", "prompt": {"question": "<p>You are adding a new variable to your configuration. Which of the following is <strong>NOT</strong>&nbsp;a valid variable type in Terraform?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", "", ""], "explanation": "<p>The Terraform language uses the following types for its values: <code>string</code>, <code>number</code>, <code>bool</code>, <code>list</code> (or tuple), <code>map</code> (or object). There are no other supported variable types in Terraform, therefore, <code><strong>float</strong></code> is incorrect in this question.</p><p>Don't forget that variable types are included in a variable block, but they are NOT required since Terraform interprets the type from a default value or value provided by other means (ENV, CLI flag, etc)</p><p><br></p><pre class=\"prettyprint linenums\">variable \"practice-exam\" {\n  description = \"bryan's terraform associate practice exams\"\n  type        = string\n  default     = \"highly-rated\"\n}</pre><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/language/expressions/types\">https://developer.hashicorp.com/terraform/language/expressions/types</a></p>", "answers": ["<p><code>float</code> </p>", "<p><code>string</code> </p>", "<p><code>map</code> </p>", "<p><code>bool</code> </p>", "<p><code>number</code> </p>"]}, "correct_response": ["a"], "section": "Objective 8 - Read, Generate, and Modify Configuration", "question_plain": "You are adding a new variable to your configuration. Which of the following is NOT&nbsp;a valid variable type in Terraform?", "related_lectures": []}, {"_class": "assessment", "id": 69267364, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Which of the following variable declarations is going to result in an error?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>This variable declaration for a type <code>list</code> is incorrect because a list expects square brackets <code>[ ]</code> and <strong><em>not</em></strong> curly braces. All of the others are correct variable declarations.</p><p><strong>From the official HashiCorp documentation </strong><a href=\"https://developer.hashicorp.com/terraform/language/expressions/types#lists-tuples\"><strong>found here</strong></a><strong>:</strong></p><p>Lists/tuples are represented by a pair of square brackets containing a comma-separated sequence of values, like <code>[\"a\", 15, true]</code>.</p>", "answers": ["<pre class=\"prettyprint linenums\">variable \"example\" { \n&nbsp; description = \"This is a variable description\" \n&nbsp; type        = list(string) \n  default     = {}\n}</pre>", "<pre class=\"prettyprint linenums\">variable \"example\" {}</pre>", "<pre class=\"prettyprint linenums\">variable \"example\" { \n  description = \"This is a test\"\n  type        = map\n  default     = {\"one\" = 1, \"two\" = 2, \"Three\" = \"3\"}\n}</pre>", "<pre class=\"prettyprint linenums\">variable \"example\" { \n  type = object({})\n}</pre>"]}, "correct_response": ["a"], "section": "Objective 8 - Read, Generate, and Modify Configuration", "question_plain": "Which of the following variable declarations is going to result in an error?", "related_lectures": []}, {"_class": "assessment", "id": 69267368, "assessment_type": "multiple-choice", "prompt": {"question": "<p>In the example below, the <code>depends_on</code> argument creates what type of dependency?</p><pre class=\"prettyprint linenums\">resource \"aws_instance\" \"example\" {\n  ami           = \"ami-2757f631\"\n  instance_type = \"t2.micro\"\n  depends_on = [aws_s3_bucket.company_data]\n}</pre>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Explicit dependencies in Terraform are dependencies that are explicitly declared in the Terraform configuration. These dependencies are used to control the order in which Terraform creates, updates, and destroys resources.</p><p>In Terraform, you can declare explicit dependencies using the <code><strong>depends_on</strong></code> argument in a resource block. The <code><strong>depends_on</strong></code> argument takes a list of resource names and specifies that the resource block in which it is declared depends on those resources.</p><p>For example, consider a scenario where you have a virtual machine (VM) that depends on a virtual network (VNET) and a subnet. You can declare these dependencies using the <code><strong>depends_on</strong></code> argument as follows:</p><p><br></p><pre class=\"prettyprint linenums\">resource \"azurerm_virtual_network\" \"vnet\" {\n  name                = \"example-vnet\"\n  address_space       = [\"10.0.0.0/16\"]\n}\n\nresource \"azurerm_subnet\" \"subnet\" {\n  name                 = \"example-subnet\"\n  virtual_network_name = azurerm_virtual_network.vnet.name\n  address_prefix       = \"10.0.1.0/24\"\n}\n\nresource \"azurerm_network_interface\" \"nic\" {\n  name                = \"example-nic\"\n  location            = azurerm_virtual_network.vnet.location\n  subnet_id           = azurerm_subnet.subnet.id\n  depends_on = [\n    azurerm_subnet.subnet,\n    azurerm_virtual_network.vnet\n  ]\n}</pre><p><br></p><p>In this example, the <code><strong>azurerm_network_interface</strong></code> resource depends on both the <code><strong>azurerm_subnet</strong></code> and the <code><strong>azurerm_virtual_network</strong></code> resources, so Terraform will create those resources first, and then create the <code><strong>azurerm_network_interface</strong></code> resource.</p><p>By declaring explicit dependencies, you can ensure that Terraform creates resources in the correct order, so that dependent resources are available before other resources that depend on them. This helps prevent errors or unexpected behavior when creating or modifying infrastructure, and makes it easier to manage and understand the relationship between resources.</p><p>Overall, the use of explicit dependencies is a critical aspect of Terraform, as it helps ensure that resources are created and managed in the correct order and makes it easier to manage and understand the relationship between resources.</p><p><a href=\"https://learn.hashicorp.com/tutorials/terraform/dependencies\">https://learn.hashicorp.com/tutorials/terraform/dependencies</a></p>", "answers": ["<p>implicit dependency</p>", "<p>explicit dependency</p>", "<p>non-dependency resource</p>", "<p>internal dependency</p>"]}, "correct_response": ["b"], "section": "Objective 8 - Read, Generate, and Modify Configuration", "question_plain": "In the example below, the depends_on argument creates what type of dependency?resource \"aws_instance\" \"example\" {\n  ami           = \"ami-2757f631\"\n  instance_type = \"t2.micro\"\n  depends_on = [aws_s3_bucket.company_data]\n}", "related_lectures": []}, {"_class": "assessment", "id": 69267370, "assessment_type": "multiple-choice", "prompt": {"question": "<p>From the code below, identify the <strong><em>implicit</em></strong> dependency:</p><p><br></p><pre class=\"prettyprint linenums\">resource \"aws_eip\" \"public_ip\" {\n    vpc = true\n    instance = aws_instance.web_server.id\n}\n\nresource \"aws_instance\" \"web_server\" {\n  ami           = \"ami-2757f631\"\n  instance_type = \"t2.micro\"\n  depends_on = [aws_s3_bucket.company_data]\n}</pre>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Implicit dependencies are <strong>not</strong> explicitly declared in the configuration but are automatically detected by Terraform based on the relationships between resources. Implicit dependencies allow Terraform to automatically determine the correct order in which resources should be created, updated, or deleted, ensuring that resources are created in the right order, and dependencies are satisfied.</p><p>For example, if you have a resource that depends on another resource, Terraform will automatically detect this relationship and create the dependent resource after the resource it depends on has been created. This allows Terraform to manage complex infrastructure deployments in an efficient and predictable way.</p><p>The EC2 instance labeled <code><strong>web_server</strong></code> is the <strong><em>implicit</em></strong> dependency as the <code><strong>aws_eip</strong></code> cannot be created until the <code><strong>aws_instance</strong></code> labeled <code><strong>web_server</strong></code> has been provisioned and the <code><strong>id</strong></code> is available.</p><p><br></p><p>Note that <code><strong>aws_s3_bucket.company_data</strong></code> is an <strong>explicit</strong> dependency for the <code><strong>aws_instance.web_server</strong></code></p><p><br></p><p><a href=\"https://learn.hashicorp.com/tutorials/terraform/dependencies\">https://learn.hashicorp.com/tutorials/terraform/dependencies</a></p>", "answers": ["<p>The S3 bucket labeled <code>company_data</code> </p>", "<p>The EC2 instance labeled <code>web_server</code> </p>", "<p>The <code>AMI</code> used for the EC2 instance</p>", "<p>The EIP with an id of <code>ami-2757f631</code> </p>"]}, "correct_response": ["b"], "section": "Objective 8 - Read, Generate, and Modify Configuration", "question_plain": "From the code below, identify the implicit dependency:resource \"aws_eip\" \"public_ip\" {\n    vpc = true\n    instance = aws_instance.web_server.id\n}\n\nresource \"aws_instance\" \"web_server\" {\n  ami           = \"ami-2757f631\"\n  instance_type = \"t2.micro\"\n  depends_on = [aws_s3_bucket.company_data]\n}", "related_lectures": []}, {"_class": "assessment", "id": 69267346, "assessment_type": "multiple-choice", "prompt": {"question": "<p>You are developing a new Terraform module to demonstrate features of the most popular HashiCorp products. You need to spin up an AWS instance for each tool, so you create the resource block as shown below using the <code>for_each</code> meta-argument.</p><p><br></p><pre class=\"prettyprint linenums\">resource \"aws_instance\" \"bryan-demo\" {\n  # ...\n  for_each = {\n    \"terraform\": \"infrastructure\",\n    \"vault\":     \"security\",\n    \"consul\":    \"connectivity\",\n    \"nomad\":     \"scheduler\",\n  }\n}</pre><p>After the deployment, you view the state using the <code>terraform state list</code> command. What resource address would be displayed for the instance related to <code>vault</code>?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>In Terraform, when you use the <code><strong>for_each</strong></code> argument in a resource block, Terraform generates multiple instances of that resource, each with a unique address. The address of each instance is determined by the keys of the <code><strong>for_each</strong></code> map, and it is used to identify and manage each instance of the resource.</p><p>For example, consider the following resource block in the question:</p><p><br></p><pre class=\"prettyprint linenums\">resource \"aws_instance\" \"bryan-demo\" {\n  # ...\n  for_each = {\n    \"terraform\": \"infrastructure\",\n    \"vault\":     \"security\",\n    \"consul\":    \"connectivity\",\n    \"nomad\":     \"scheduler\",\n  }\n}</pre><p><br></p><p>In this example, Terraform will create four instances of the <code><strong>aws_instance</strong></code> resource, one for each key in the <code><strong>for_each</strong></code> map. The addresses of these instances will be <code><strong>aws_instance.bryan-demo[\"terraform\"]</strong></code> , <code><strong>aws_instance.bryan-demo[\"vault\"]</strong></code>,<code><strong>aws_instance.bryan-demo[\"consul\"]</strong></code>, and <code><strong>aws_instance.bryan-demo[\"nomad\"]</strong></code>.</p><p>When you reference the properties of these instances in your Terraform code, you can use the address and property reference syntax to access the properties of each instance. For example, you can access the ID of the first instance using <code><strong>aws_instance.bryan-demo[\"vault\"].id</strong></code>.</p><p>Using the <code><strong>for_each</strong></code> argument in a resource block is a powerful way to manage multiple instances of a resource, and it provides a convenient way to reuse the same resource configuration for multiple instances with different properties.</p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/cli/v1.1.x/state/resource-addressing\">https://developer.hashicorp.com/terraform/cli/v1.1.x/state/resource-addressing</a></p>", "answers": ["<p><code>aws_instance.bryan-demo[\"vault\"]</code> </p>", "<p><code>aws_instance.bryan-demo[1]</code> </p>", "<p><code>aws_instance.bryan-demo.vault</code> </p>", "<p><code>aws_instance.bryan-demo[\"2\"]</code> </p>"]}, "correct_response": ["a"], "section": "Objective 8 - Read, Generate, and Modify Configuration", "question_plain": "You are developing a new Terraform module to demonstrate features of the most popular HashiCorp products. You need to spin up an AWS instance for each tool, so you create the resource block as shown below using the for_each meta-argument.resource \"aws_instance\" \"bryan-demo\" {\n  # ...\n  for_each = {\n    \"terraform\": \"infrastructure\",\n    \"vault\":     \"security\",\n    \"consul\":    \"connectivity\",\n    \"nomad\":     \"scheduler\",\n  }\n}After the deployment, you view the state using the terraform state list command. What resource address would be displayed for the instance related to vault?", "related_lectures": []}, {"_class": "assessment", "id": 69267336, "assessment_type": "multiple-choice", "prompt": {"question": "<p>After many years of using Terraform Open Source (OSS), you decide to migrate to Terraform Cloud. After the initial configuration, you create a workspace and migrate your existing state and configuration. What Terraform version would the new workspace be configured to use after the migration?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>When you create a new workspace, Terraform Cloud automatically selects the most recent version of Terraform available. <strong>If you migrate an existing project from the CLI to Terraform Cloud, Terraform Cloud configures the workspace to use the same version as the Terraform binary you used when migrating</strong>. Terraform Cloud lets you change the version a workspace uses on the workspace's settings page to control how and when your projects use newer versions of Terraform.</p><p>It's worth noting that Terraform Cloud also provides the ability to upgrade your Terraform version in a controlled manner. This allows you to upgrade your Terraform version in a safe and predictable way, without affecting your existing infrastructure or state.</p><p><a href=\"https://developer.hashicorp.com/terraform/tutorials/cloud/cloud-versions\">https://developer.hashicorp.com/terraform/tutorials/cloud/cloud-versions</a></p>", "answers": ["<p>the same Terraform version that was used to perform the migration</p>", "<p>the most recent version of Terraform available</p>", "<p>the latest major release of Terraform</p>", "<p>whatever version is defined in the <code>terraform</code> block</p>"]}, "correct_response": ["a"], "section": "Objective 9 - Understand Terraform Cloud Capabilities", "question_plain": "After many years of using Terraform Open Source (OSS), you decide to migrate to Terraform Cloud. After the initial configuration, you create a workspace and migrate your existing state and configuration. What Terraform version would the new workspace be configured to use after the migration?", "related_lectures": []}, {"_class": "assessment", "id": 69267328, "assessment_type": "multi-select", "prompt": {"question": "<p>Terraform Cloud is more powerful when you integrate it with your version control system (VCS) provider. Select all the supported VCS providers from the answers below. (select four)</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", "", ""], "explanation": "<p>Terraform Cloud supports the following VCS providers as of February 2023:</p><p>&nbsp; - <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/vcs/github\">GitHub</a></p><p>&nbsp; - <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/vcs/github\">GitHub.com (OAuth)</a></p><p>&nbsp; - <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/vcs/github-enterprise\">GitHub Enterprise</a></p><p>&nbsp; - <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/vcs/gitlab-com\">GitLab.com</a></p><p>&nbsp; - <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/vcs/gitlab-eece\">GitLab EE and CE</a></p><p>&nbsp; - <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/vcs/bitbucket-cloud\">Bitbucket Cloud</a></p><p>&nbsp; - <a href=\"https://www.terraform.io/docs/cloud/vcs/bitbucket-server.html\">Bitbucket Server</a></p><p>&nbsp; - <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/vcs/azure-devops-server\">Azure DevOps Server</a></p><p>&nbsp; - <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/vcs/azure-devops-services\">Azure DevOps Services</a></p><p><a href=\"https://developer.hashicorp.com/terraform/cloud-docs/vcs#supported-vcs-providers\">https://developer.hashicorp.com/terraform/cloud-docs/vcs#supported-vcs-providers</a></p>", "answers": ["<p>GitHub.com</p>", "<p>GitHub Enterprise</p>", "<p>Bitbucket Cloud</p>", "<p>Azure DevOps Server</p>", "<p>CVS Version Control</p>"]}, "correct_response": ["a", "b", "c", "d"], "section": "Objective 9 - Understand Terraform Cloud Capabilities", "question_plain": "Terraform Cloud is more powerful when you integrate it with your version control system (VCS) provider. Select all the supported VCS providers from the answers below. (select four)", "related_lectures": []}, {"_class": "assessment", "id": 69267314, "assessment_type": "multiple-choice", "prompt": {"question": "<p>What feature of Terraform Cloud allows you to publish and maintain a set of custom modules which can be used within your organization?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>You can use modules from a private registry, like the one provided by Terraform Cloud. Private registry modules have source strings of the form <code>&lt;HOSTNAME&gt;/&lt;NAMESPACE&gt;/&lt;NAME&gt;/&lt;PROVIDER&gt;</code>. This is the same format as the public registry, but with an added hostname prefix.</p><p><a href=\"https://www.datocms-assets.com/2885/1602500234-terraform-full-feature-pricing-tablev2-1.pdf\">https://www.datocms-assets.com/2885/1602500234-terraform-full-feature-pricing-tablev2-1.pdf</a></p>", "answers": ["<p>private module registry</p>", "<p>Terraform registry </p>", "<p>custom VCS integration</p>", "<p>remote runs</p>"]}, "correct_response": ["a"], "section": "Objective 9 - Understand Terraform Cloud Capabilities", "question_plain": "What feature of Terraform Cloud allows you to publish and maintain a set of custom modules which can be used within your organization?", "related_lectures": []}, {"_class": "assessment", "id": 69267420, "assessment_type": "multiple-choice", "prompt": {"question": "<p>You are using a Terraform Cloud workspace linked to a GitHub repo to manage production workloads in your environment. After approving a merge request, what <em>default</em> action can you expect to be triggered on the workspace? </p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>After approving a merge request that modifies Terraform configurations in a GitHub repository linked to a Terraform Cloud workspace, the default action that can be expected to run automatically is a <strong>\"speculative plan\" </strong>operation.</p><p>When you merge a pull request or push changes to the main branch (or any branch you have configured as the trigger for the workspace), Terraform Cloud typically triggers a plan operation. During this plan phase, Terraform examines the proposed changes to your infrastructure and displays a list of actions it would take if applied. It's a way to preview the changes before actually making them.</p><p>The plan output shows what resources Terraform would create, modify, or delete, which allows you to review and validate the expected changes. After reviewing the plan, you can then manually apply the changes to your infrastructure through the Terraform Cloud workspace.</p><p>Note:&nbsp;You can absolutely configure a Terraform workspace to automatically apply the changes to the code, although that is generally not recommended, <strong><em>nor is it the default action</em></strong>.</p><p>Wrong Answers:</p><p> - TFC does not automatically run a speculative plan and apply the changes unless you specifically configure the workspace to do so. This is not the default action that would be triggered when you commit new code to the repo</p><p> - TFC does not run external tests, such as <code>terratest</code> and <code>terraform validate</code> on your code when you commit it to a repo</p><p> - TFC, or Terraform in general, does not destroy managed infrastructure when executing a plan and apply. It will only modify the resources needed to ensure the managed restructure now matches the desired state.</p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/cloud-docs/run/remote-operations\">https://developer.hashicorp.com/terraform/cloud-docs/run/remote-operations</a></p>", "answers": ["<p>A speculative plan will be run to show the potential changes to the managed environment and validate the changes against any applicable Sentinel policies</p>", "<p>The workspace will run a speculative plan and automatically apply the changes without any required interaction from the user</p>", "<p>The workspace will trigger a set of tests, such as <code>terratest</code> and <code>terraform validate</code>, to ensure the code is valid and can be successfully executed by the specific version of Terraform configured for the workspace.</p>", "<p>Terraform Cloud will automatically execute a <code>terraform destroy</code> operation on your production workloads, and apply the new committed code stored in the GitHub repo</p>"]}, "correct_response": ["a"], "section": "Objective 9 - Understand Terraform Cloud Capabilities", "question_plain": "You are using a Terraform Cloud workspace linked to a GitHub repo to manage production workloads in your environment. After approving a merge request, what default action can you expect to be triggered on the workspace?", "related_lectures": []}, {"_class": "assessment", "id": 69267422, "assessment_type": "multi-select", "prompt": {"question": "<p>Why might users want to utilize Sentinel or OPA&nbsp;with Terraform Cloud in their infrastructure workflow? (select four)</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", "", ""], "explanation": "<p>Using Sentinel and OPA with Terraform Cloud provides several benefits that enhance the overall management and security of your infrastructure. Using Sentinel with Terraform Cloud provides a powerful mechanism to enforce policies, increase security, and maintain compliance in your infrastructure deployments. It gives you greater control and confidence in managing your cloud resources while promoting best practices and reducing the risk of misconfiguration. Here are some specific reasons and examples on why you would use Sentinel with Terraform Cloud:</p><p><br></p><ol><li><p><strong>Policy Enforcement:</strong> Sentinel and OPA enable you to define and enforce policies that govern the configurations and changes made to your infrastructure. You can create custom policies tailored to your organization's needs, ensuring compliance with regulatory requirements, security best practices, and internal standards.</p></li><li><p><strong>Automated Governance:</strong> With Sentinel and OPA, you can implement automated governance and compliance checks in your Terraform workflows. This means that every time changes are proposed or applied, Sentinel or OPA evaluates those changes against the defined policies, automatically preventing non-compliant configurations from being deployed.</p></li><li><p><strong>Enhanced Security: </strong>By incorporating Sentinel or OPA into your Terraform Cloud environment, you can bolster your infrastructure security. Sentinel can flag and block any potentially risky configurations, helping to minimize security vulnerabilities and ensuring that only approved, secure changes are allowed.</p></li><li><p><strong>Version-controlled Policies:</strong> Sentinel and OPA policies are defined as code, which means they can be stored in version control alongside your Terraform configurations. This allows your policies to be managed, reviewed, and updated through the same version control system, improving collaboration and maintaining a history of policy changes.</p></li><li><p><strong>Custom Approval Workflows:</strong> You can create customized approval workflows based on policy conditions using Sentinel or OPA. This means that changes to the infrastructure can be automatically approved or flagged for manual review, depending on the defined policies, ensuring tighter control over infrastructure modifications.</p></li><li><p><strong>Preventing Costly Mistakes: </strong>Sentinel and OPA policies can help catch potential mistakes or misconfigurations before they impact your infrastructure. By running policy checks in real-time, you can identify issues early on and avoid costly downtime or unexpected behavior caused by incorrect configurations.</p></li><li><p><strong>Consistency and Best Practices:</strong> Utilizing Sentinel/OPA allows you to enforce consistent naming conventions, tagging standards, and other best practices across your infrastructure. This consistency leads to improved manageability and makes it easier for teams to collaborate effectively.</p></li><li><p><strong>Auditing and Compliance Reporting:</strong> With Sentinel's logging and reporting capabilities, you can track policy decisions and changes made to your infrastructure over time. This audit trail is valuable for compliance purposes and can be used to demonstrate adherence to regulatory requirements.</p></li></ol><p><strong>Wrong Answer:</strong></p><p> - Using Sentinel or OPA would NOT allow you to bypass version control. In fact, with TFC, your workspace would likely be configured to ONLY&nbsp;manage changes to your environment using code that is committed to a linked code repository.</p><p><a href=\"https://developer.hashicorp.com/terraform/cloud-docs/policy-enforcement\">https://developer.hashicorp.com/terraform/cloud-docs/policy-enforcement</a></p>", "answers": ["<p>Sentinel and OPA can enhance security by preventing unauthorized changes to your managed infrastructure</p>", "<p>Sentinel and OPA enable automated policy checks to enforce compliance standards before applying changes to production environments</p>", "<p>Organizations can enforce resource naming conventions or approved machine images for improved consistency and clarity</p>", "<p>To provide real-time feedback on potential security risks in Terraform configurations during the development process</p>", "<p>To allow users to bypass version control and directly apply changes to production</p>"]}, "correct_response": ["a", "b", "c", "d"], "section": "Objective 9 - Understand Terraform Cloud Capabilities", "question_plain": "Why might users want to utilize Sentinel or OPA&nbsp;with Terraform Cloud in their infrastructure workflow? (select four)", "related_lectures": []}]}
4775582
~~~
{"count": 57, "next": null, "previous": null, "results": [{"_class": "assessment", "id": 68069282, "assessment_type": "multi-select", "prompt": {"question": "<p>What are the benefits of using Infrastructure as Code? (select five)</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", "", "", ""], "explanation": "<p>Infrastructure as Code (IaC) refers to the practice of managing and provisioning infrastructure resources through code, rather than manual processes or user interfaces. Some of the benefits of using IaC include:</p><p><br></p><ol><li><p>Consistency and repeatability: IaC allows for the creation of infrastructure in a consistent and repeatable way. This ensures that the same infrastructure can be deployed across multiple environments (e.g. development, testing, production) with minimal differences, reducing the risk of issues due to configuration drift or environment-specific issues.</p></li><li><p>Speed and agility: IaC allows for rapid provisioning and scaling of infrastructure resources, reducing the time it takes to set up and modify infrastructure. This enables teams to quickly respond to changing business needs or shifting workloads, without the delays associated with manual provisioning processes.</p></li><li><p>Version control: IaC code can be stored in version control systems, allowing teams to track changes over time and revert to previous versions if necessary. This provides a history of infrastructure changes and ensures that teams are always working with the most up-to-date version of the infrastructure code.</p></li><li><p>Collaboration and documentation: IaC code can be shared and collaborated on, allowing teams to work together to design and maintain infrastructure resources. It also provides a single source of truth for documentation, making it easier to understand how the infrastructure is configured and how it has changed over time.</p></li><li><p>Cost savings: IaC can help reduce infrastructure costs by allowing teams to more effectively manage resources, optimize usage, and avoid over-provisioning. It can also reduce the need for manual intervention, which can save time and reduce the risk of errors.</p></li></ol><p>Overall, using IaC can help organizations achieve greater consistency, speed, agility, collaboration, and cost savings in their infrastructure management practices.</p><p><a href=\"https://developer.hashicorp.com/terraform/intro#infrastructure-as-code\">https://developer.hashicorp.com/terraform/intro#infrastructure-as-code</a></p>", "answers": ["<p>Infrastructure as Code allows a user to turn a manual task into a simple, automated deployment</p>", "<p>Infrastructure as Code is easily repeatable, allowing the user to reuse code to deploy similar, yet different resources</p>", "<p>Infrastructure as Code is relatively simple to learn and write, regardless of a user's prior experience with developing code</p>", "<p>Infrastructure as Code provides configuration consistency and standardization among deployments</p>", "<p>Infrastructure as Code gives the user the ability to recreate an application's infrastructure for disaster recovery scenarios</p>", "<p>Infrastructure as Code easily replaces development languages such as Go and .Net for application development</p>"]}, "correct_response": ["a", "b", "c", "d", "e"], "section": "Objective 1 - Understand Infrastructure as Code concepts", "question_plain": "What are the benefits of using Infrastructure as Code? (select five)", "related_lectures": []}, {"_class": "assessment", "id": 68069284, "assessment_type": "multi-select", "prompt": {"question": "<p>What are some problems with how infrastructure was traditionally managed before Infrastructure as Code? (select three)</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Traditionally, infrastructure was managed using manual processes and user interfaces, which could lead to several problems, including:</p><p><br></p><ol><li><p><strong>Configuration drift</strong>: With manual configuration, it can be difficult to ensure that all infrastructure components are consistently configured. Over time, differences in configuration can accumulate, leading to configuration drift, where systems in the same environment are no longer identical.</p></li><li><p><strong>Lack of standardization</strong>: Manual configuration can also result in inconsistencies across environments, which can make it difficult to manage and troubleshoot infrastructure. For example, different environments may have different versions of software or different security settings, making it hard to replicate issues or ensure consistent behavior.</p></li><li><p><strong>Slow provisioning</strong>: Provisioning infrastructure manually can be time-consuming, especially for complex configurations or when setting up multiple resources. This can lead to delays in development and deployment, as teams may need to wait for infrastructure to be set up before they can begin work.</p></li><li><p><strong>Human error</strong>: Manual provisioning and configuration is prone to human error, which can lead to security vulnerabilities, performance issues, or downtime. For example, a misconfigured firewall rule could leave systems open to attack, or a typo in a configuration file could cause a system to crash.</p></li><li><p><strong>Difficulty in documentation</strong>: With manual configuration, it can be challenging to keep documentation up to date and accurate. This can make it hard for teams to understand how infrastructure is configured, what changes have been made, and how to troubleshoot issues.</p></li></ol><p>Overall, these problems can make it difficult to manage infrastructure at scale and can lead to increased costs, reduced agility, and increased risk of errors and downtime. Infrastructure as Code helps to address many of these issues by providing a standardized, repeatable, and automated way to manage infrastructure resources.</p><p><a href=\"https://developer.hashicorp.com/terraform/intro#infrastructure-as-code\">https://developer.hashicorp.com/terraform/intro#infrastructure-as-code</a></p>", "answers": ["<p>Requests for infrastructure or hardware often required a ticket, increasing the time required to deploy applications</p>", "<p>Pointing and clicking in a management console is a scalable approach and reduces human error as businesses are moving to a multi-cloud deployment model</p>", "<p>Traditional deployment methods are not able to meet the demands of the modern business where resources tend to live days to weeks, rather than months to years</p>", "<p>Traditionally managed infrastructure can't keep up with cyclic or elastic applications</p>"]}, "correct_response": ["a", "c", "d"], "section": "Objective 1 - Understand Infrastructure as Code concepts", "question_plain": "What are some problems with how infrastructure was traditionally managed before Infrastructure as Code? (select three)", "related_lectures": []}, {"_class": "assessment", "id": 68069334, "assessment_type": "multi-select", "prompt": {"question": "<p>From the answers below, select the advantages of using Infrastructure as Code. (select four)</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", "", ""], "explanation": "<p>Infrastructure as Code is <strong>not </strong>used to develop applications, but it can be used to help deploy or provision those applications to a public cloud provider or on-premises infrastructure.</p><p>All of the others are benefits to using Infrastructure as Code over the traditional way of managing infrastructure, regardless if it's public cloud or on-premises.</p><p><a href=\"https://developer.hashicorp.com/terraform/intro\">https://developer.hashicorp.com/terraform/intro</a></p>", "answers": ["<p>Provide a codified workflow to develop customer-facing applications</p>", "<p>Easily change and update existing infrastructure </p>", "<p>Safely test modifications using a \"dry run\" before applying any actual changes </p>", "<p>Easily integrate with application workflows (GitHub Actions, Azure DevOps, CI/CD tools)</p>", "<p>Provide reusable modules for easy sharing and collaboration</p>"]}, "correct_response": ["b", "c", "d", "e"], "section": "Objective 1 - Understand Infrastructure as Code concepts", "question_plain": "From the answers below, select the advantages of using Infrastructure as Code. (select four)", "related_lectures": []}, {"_class": "assessment", "id": 68069288, "assessment_type": "multiple-choice", "prompt": {"question": "<p>True or False? State is a requirement for Terraform to function.</p>", "relatedLectureIds": "", "feedbacks": ["", ""], "explanation": "<p><strong>True.</strong></p><p>State is a fundamental concept in Terraform that keeps track of the resources Terraform manages, their configuration, and their current state. Terraform uses this information to determine the differences between the desired state and the current state and to generate a plan for creating, updating, or deleting resources to match the desired state.</p><p>The state file is a critical component of Terraform and is required for its proper functioning. It is typically stored remotely in a shared location, such as a storage service or version control system, to allow multiple members of a team to collaborate on infrastructure changes.</p><p><a href=\"https://developer.hashicorp.com/terraform/language/state/purpose\">https://developer.hashicorp.com/terraform/language/state/purpose</a></p>", "answers": ["<p>True</p>", "<p>False</p>"]}, "correct_response": ["a"], "section": "Objective 2 - Understand Terraform's purpose (vs. other IaC)", "question_plain": "True or False? State is a requirement for Terraform to function.", "related_lectures": []}, {"_class": "assessment", "id": 68069336, "assessment_type": "multi-select", "prompt": {"question": "<p>Using multi-cloud and provider-agnostic tools provides which of the following benefits? (select two)</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Using a tool like Terraform can be advantageous for organizations deploying workloads across multiple public and private cloud environments. Operations teams only need to learn a single tool, a single language, and can use the same tooling to enable a DevOps-like experience and workflows.</p><p><a href=\"https://developer.hashicorp.com/terraform/intro/use-cases#multi-cloud-deployment\">https://developer.hashicorp.com/terraform/intro/use-cases#multi-cloud-deployment</a></p>", "answers": ["<p>can be used across major cloud providers and VM hypervisors</p>", "<p>operations teams only need to learn and manage a single tool to manage infrastructure, regardless of where the infrastructure is deployed</p>", "<p>slower provisioning speed allows the operations team to catch mistakes before they are applied</p>", "<p>increased risk due to all infrastructure relying on a single tool for management</p>"]}, "correct_response": ["a", "b"], "section": "Objective 2 - Understand Terraform's purpose (vs. other IaC)", "question_plain": "Using multi-cloud and provider-agnostic tools provides which of the following benefits? (select two)", "related_lectures": []}, {"_class": "assessment", "id": 68069286, "assessment_type": "multi-select", "prompt": {"question": "<p>What advantages does Terraform offer over using a provider's native tooling for deploying resources in multi-cloud environments? (select three)</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Terraform offers several advantages over using a provider's native tooling for deploying resources in multi-cloud environments, including:</p><p><br></p><ol><li><p><strong>Multi-cloud support:</strong> Terraform provides a consistent interface for managing infrastructure resources across multiple cloud providers, including AWS, Azure, Google Cloud, and more. This allows organizations to use a single tool for managing their entire multi-cloud environment rather than needing to learn and use multiple provider-specific tools.</p></li><li><p><strong>Standardized configuration:</strong> Terraform uses a declarative configuration language to define infrastructure resources, which can be used to define resources across multiple providers in a standardized way. This provides consistency and reduces the need for provider-specific knowledge.</p></li><li><p><strong>Idempotent execution:</strong> Terraform only makes changes to infrastructure resources if the desired state differs from the current state, which means that it can be safely run multiple times without causing unintended changes. This reduces the risk of configuration drift and ensures that infrastructure remains consistent over time.</p></li><li><p><strong>Plan preview:</strong> Terraform can generate a plan that shows the changes it will make to infrastructure resources before it applies them. This provides visibility into changes and helps to reduce the risk of unintended consequences.</p></li><li><p><strong>Collaboration and version control: </strong>Terraform configurations can be stored in version control systems, allowing multiple team members to collaborate on infrastructure changes. This provides a centralized location for documentation, change history, and issue tracking, making it easier to manage infrastructure changes over time.</p></li></ol><p>Overall, using Terraform for deploying resources in multi-cloud environments can provide a consistent, standardized, and efficient approach to managing infrastructure across multiple providers.</p><p><a href=\"https://developer.hashicorp.com/terraform/intro/use-cases#multi-cloud-deployment\">https://developer.hashicorp.com/terraform/intro/use-cases#multi-cloud-deployment</a></p>", "answers": ["<p>Terraform is not cloud-agnostic and can only be used to deploy resources across a single public cloud at a time</p>", "<p>Terraform can manage cross-cloud dependencies</p>", "<p>Terraform simplifies management and orchestration, helping operators build large-scale, multi-cloud infrastructure</p>", "<p>Terraform can help businesses deploy applications on multiple clouds and on-premises infrastructure</p>"]}, "correct_response": ["b", "c", "d"], "section": "Objective 2 - Understand Terraform's purpose (vs. other IaC)", "question_plain": "What advantages does Terraform offer over using a provider's native tooling for deploying resources in multi-cloud environments? (select three)", "related_lectures": []}, {"_class": "assessment", "id": 68069340, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Which of the following is considered a Terraform plugin?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>In Terraform, a plugin is a binary executable that implements a specific provider. <strong>A provider is a plugin that allows Terraform to manage a specific cloud provider or service.</strong></p><p>When Terraform runs, it loads the plugins required to manage the resources specified in the configuration files. Each provider has its own plugin, and Terraform loads the plugins for the providers specified in the configuration.</p><p>The plugin is responsible for interacting with the cloud provider's API, translating Terraform configurations into API calls, and managing the state of the resources that Terraform manages.</p><p>Plugins are stored in the Terraform plugin cache, a directory on the local machine that contains the binary executables for each plugin. When Terraform runs, it looks for plugins in the cache and automatically downloads any missing plugins from the Terraform Registry or a specified source.</p><p>Terraform plugins are written in Go and follow a specific plugin protocol, which defines the interactions between Terraform and the plugin. The plugin protocol allows Terraform to communicate with the plugin and provides a standard way for plugins to manage resources across different providers.</p><p><a href=\"https://developer.hashicorp.com/terraform/plugin\">https://developer.hashicorp.com/terraform/plugin</a></p>", "answers": ["<p>Terraform language</p>", "<p>Terraform logic</p>", "<p>Terraform tooling</p>", "<p>Terraform provider</p>"]}, "correct_response": ["d"], "section": "Objective 3 - Understand Terraform Basics", "question_plain": "Which of the following is considered a Terraform plugin?", "related_lectures": []}, {"_class": "assessment", "id": 68069302, "assessment_type": "multi-select", "prompt": {"question": "<p><em>Select two answers to complete the following sentence:</em></p><p>Before a new provider can be used, it must be ______ and _______. (select two)</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Each time a new provider is added to configuration -- either explicitly via a provider block or by adding a resource from that provider -- Terraform must initialize the provider before it can be used. Initialization downloads and installs the provider's plugin so that it can later be executed.</p><p><a href=\"https://developer.hashicorp.com/terraform/language/providers/requirements#provider-installation\">https://developer.hashicorp.com/terraform/language/providers/requirements#provider-installation</a></p>", "answers": ["<p>initialized</p>", "<p>declared or used in a configuration file</p>", "<p>uploaded to source control</p>", "<p>approved by HashiCorp</p>"]}, "correct_response": ["a", "b"], "section": "Objective 3 - Understand Terraform Basics", "question_plain": "Select two answers to complete the following sentence:Before a new provider can be used, it must be ______ and _______. (select two)", "related_lectures": []}, {"_class": "assessment", "id": 68069342, "assessment_type": "multi-select", "prompt": {"question": "<p>What is the purpose of using the <code>local-exec</code> provisioner? (select two)</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>In Terraform, the <code>local-exec</code> provisioner is used to execute a command on the machine running Terraform, rather than on a remote resource.</p><p>The <code>local-exec</code> provisioner is often used to perform actions that cannot be accomplished using Terraform's built-in resource types or to execute local scripts or commands to perform additional setup or configuration after creating infrastructure resources.</p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/language/resources/provisioners/syntax#how-to-use-provisioners\">https://developer.hashicorp.com/terraform/language/resources/provisioners/syntax#how-to-use-provisioners</a></p>", "answers": ["<p>to invoke a local executable </p>", "<p>to execute one or more commands on the machine running Terraform</p>", "<p>ensures that the resource is only executed in the local infrastructure where Terraform is deployed</p>", "<p>executes a command on the resource to invoke an update to the Terraform state</p>"]}, "correct_response": ["a", "b"], "section": "Objective 3 - Understand Terraform Basics", "question_plain": "What is the purpose of using the local-exec provisioner? (select two)", "related_lectures": []}, {"_class": "assessment", "id": 68069308, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Which configuration block type is used to declare settings and behaviors specific to Terraform?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>In Terraform, the <code><strong>terraform</strong></code> block is used to configure Terraform settings and to specify a required version constraint for the Terraform CLI.</p><p>The <code><strong>terraform</strong></code> block is optional and is typically placed at the top of a Terraform configuration file. Here is an example of a <code><strong>terraform</strong></code> block:</p><p><br></p><pre class=\"prettyprint linenums\">terraform {\n  required_version = \"&gt;= 0.12.0, &lt; 0.13.0\"\n  backend \"s3\" {\n    bucket = \"my-terraform-state\"\n    key    = \"terraform.tfstate\"\n    region = \"us-west-2\"\n  }\n}</pre><p><br></p><p>In this example, the <code><strong>terraform</strong></code> block specifies that the Terraform configuration requires a version of at least 0.12.0 but less than 0.13.0. The block also contains a <code><strong>backend</strong></code> block, which configures the backend where the Terraform state is stored. In this case, the backend is an S3 bucket in the <code><strong>us-west-2</strong></code> region.</p><p>The <code><strong>terraform</strong></code> block can also be used to configure other settings such as the maximum number of concurrent operations (<code><strong>max_parallelism</strong></code>), the number of retries for failed operations (<code><strong>retryable_errors</strong></code>), and the default input values for variables (<code><strong>default</strong></code>).</p><p>By including a <code><strong>terraform</strong></code> block in the Terraform configuration, you can ensure that the correct version of Terraform is used and that the configuration is validated against the correct syntax and semantics for that version. This helps to ensure that the configuration will run correctly and consistently across different environments.</p><p><a href=\"https://developer.hashicorp.com/terraform/language/settings\">https://developer.hashicorp.com/terraform/language/settings</a></p>", "answers": ["<p><code>terraform</code> block</p>", "<p><code>provider</code> block</p>", "<p><code>data</code> block</p>", "<p><code>resource</code> block</p>"]}, "correct_response": ["a"], "section": "Objective 3 - Understand Terraform Basics", "question_plain": "Which configuration block type is used to declare settings and behaviors specific to Terraform?", "related_lectures": []}, {"_class": "assessment", "id": 68069292, "assessment_type": "multi-select", "prompt": {"question": "<p>Which of the following Terraform files should be ignored by Git when committing code to a repo? (select two)</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>When using Terraform with Git, it is generally recommended to ignore certain files in order to avoid committing sensitive or unnecessary information to your repository. The specific files that should be ignored may vary depending on your project and configuration, but as a general rule, you should ignore the following files:</p><p><br></p><ol><li><p><code><strong>.terraform</strong></code> directory: This directory contains local Terraform state files, which should not be committed to the repository.</p></li><li><p><code><strong>terraform.tfstate</strong></code> and <code><strong>terraform.tfstate.backup</strong></code>: These files contain the current state of your infrastructure, and should not be committed to the repository.</p></li><li><p><code><strong>.tfvars</strong></code> files: These files may contain sensitive information, such as passwords or API keys, and should be kept out of version control. Instead, you can use environment variables or other secure methods to pass this information to Terraform.</p></li><li><p><code><strong>*.tfplan</strong></code> files: These files contain the plan generated by Terraform when applying changes to your infrastructure, and may include sensitive information such as resource IDs. They should not be committed to the repository.</p></li></ol><p>To ignore these files in Git, you can add them to your <code><strong>.gitignore</strong></code> file.</p><p><a href=\"https://github.com/github/gitignore/blob/main/Terraform.gitignore\">https://github.com/github/gitignore/blob/main/Terraform.gitignore</a></p><p><a href=\"https://www.hashicorp.com/resources/a-practitioner-s-guide-to-using-hashicorp-terraform-cloud-with-github#:~:text=Gitignore%20Considerations\">https://www.hashicorp.com/resources/a-practitioner-s-guide-to-using-hashicorp-terraform-cloud-with-github#:~:text=Gitignore%20Considerations</a></p>", "answers": ["<p><code>variables.tf</code> </p>", "<p><code>outputs.tf</code> </p>", "<p><code>terraform.tfstate</code> </p>", "<p><code>terraform.tfvars</code> </p>"]}, "correct_response": ["c", "d"], "section": "Objective 3 - Understand Terraform Basics", "question_plain": "Which of the following Terraform files should be ignored by Git when committing code to a repo? (select two)", "related_lectures": []}, {"_class": "assessment", "id": 68069290, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Which of the following best describes a Terraform provider?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>In Terraform, a <code><strong>provider</strong></code> is a plugin that enables Terraform to interact with a specific cloud or service provider, such as Amazon Web Services (AWS), Microsoft Azure, or Google Cloud Platform (GCP). Providers are responsible for understanding the APIs and resources the target infrastructure platform provides and for translating Terraform configuration code into API calls that can create, read, update, and delete resources.</p><p>Each provider typically consists of resource types, data sources, and other settings that define the provider's capabilities within Terraform. These resources and data sources correspond to the resources that can be managed within the target infrastructure, such as virtual machines, storage accounts, or network interfaces.</p><p>To use a provider in Terraform, you must first configure it in your Terraform code by specifying the provider's name and any required configuration settings, such as access keys, secret keys, or region. Once the provider is configured, you can then use its resources and data sources in your Terraform code to define the infrastructure you want to manage.</p><p>Terraform has a large and growing ecosystem of third-party providers that support a wide range of infrastructure platforms and services, as well as an official set of core providers maintained by HashiCorp, the company behind Terraform. The availability and quality of providers is a crucial factor in the usefulness of Terraform as a tool for managing infrastructure as code.</p><p><a href=\"https://developer.hashicorp.com/terraform/language/providers\">https://developer.hashicorp.com/terraform/language/providers</a></p>", "answers": ["<p>a plugin that Terraform uses to translate the API interactions with the service or provider</p>", "<p>describes an infrastructure object, such as a virtual network, compute instance, or other components</p>", "<p>serves as a parameter for a Terraform module that allows a module to be customized</p>", "<p>a container for multiple resources that are used together</p>"]}, "correct_response": ["a"], "section": "Objective 3 - Understand Terraform Basics", "question_plain": "Which of the following best describes a Terraform provider?", "related_lectures": []}, {"_class": "assessment", "id": 68069338, "assessment_type": "multiple-choice", "prompt": {"question": "<p>In the <code>terraform</code> block, which configuration would be used to identify the specific version of a provider required?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>To identify a specific version of a provider in Terraform, you can use the <code><strong>required_providers</strong></code> configuration block. This block allows you to specify the provider's name and the version range you want to use by using Terraform's version constraints syntax.</p><p>Here's an example of how to use the <code><strong>required_providers</strong></code> block to specify a specific version of the AWS provider:</p><p><br></p><pre class=\"prettyprint linenums\">terraform {\n  required_providers {\n    aws = {\n      source = \"hashicorp/aws\"\n      version = \"3.57.0\"\n    }\n  }\n}</pre><p><br></p><p>In this example, we're specifying that we require version 3.57.0 of the AWS provider, which is hosted at the <code><strong>hashicorp/aws</strong></code> source. Note that the version constraint syntax allows you to specify a range of versions using operators such as <code><strong>&gt;=</strong></code> and <code><strong>&lt;=</strong></code>.</p><p>When you run <code><strong>terraform init</strong></code> with this configuration, Terraform will download and install the specified version of the AWS provider, and will use it for all subsequent Terraform commands for that module. If the specified version is not available, Terraform will return an error and fail to initialize the configuration.</p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/language/providers/requirements#requiring-providers\">https://developer.hashicorp.com/terraform/language/providers/requirements#requiring-providers</a></p>", "answers": ["<p><code>required_providers</code> </p>", "<p><code>required-provider</code> </p>", "<p><code>required-version</code> </p>", "<p><code>required_versions</code> </p>"]}, "correct_response": ["a"], "section": "Objective 3 - Understand Terraform Basics", "question_plain": "In the terraform block, which configuration would be used to identify the specific version of a provider required?", "related_lectures": []}, {"_class": "assessment", "id": 68069306, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Why is it a good idea to declare the required version of a provider in a Terraform configuration file?</p><p><br></p><pre class=\"prettyprint linenums\">terraform {\n  required_providers {\n    aws = {\n      source = \"hashicorp/aws\"\n      version = \"3.57.0\"\n    }\n  }\n}</pre><p><br></p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Declaring the required version of a provider in a Terraform configuration file is a good idea for several reasons:</p><p><br></p><ol><li><p><strong>Reproducibility</strong>: By specifying the exact version of a provider, you can ensure that anyone who runs your Terraform configuration will use the same version of the provider as you. This makes your infrastructure configuration more reproducible and helps avoid issues that can arise when different versions of a provider are used.</p></li><li><p><strong>Predictability</strong>: When you specify a specific provider version, you can be confident that your infrastructure configuration will behave predictably, regardless of changes to the provider in future versions. <strong><em>This can help you avoid surprises and reduce the risk of unintended consequences.</em></strong></p></li><li><p><strong>Compatibility</strong>: Different versions of a provider may have different APIs, resources, or behaviors, which can cause issues if you switch to a new version without realizing the differences. By specifying the required version of a provider in your Terraform configuration, you can ensure that your configuration remains compatible with the specific version of the provider you have tested and validated.</p></li><li><p><strong>Version locking</strong>: When you specify the required version of a provider in your Terraform configuration, you effectively lock the version of the provider to that version unless you explicitly change it. This can help prevent issues that may arise when using a different, potentially incompatible version of the provider.</p></li></ol><p>In summary, specifying the required version of a provider in your Terraform configuration file helps ensure that your infrastructure configuration is more predictable, reproducible, compatible, and reduces the risk of unintended consequences or issues caused by version differences.</p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/language/providers/requirements#requiring-providers\">https://developer.hashicorp.com/terraform/language/providers/requirements#requiring-providers</a></p>", "answers": ["<p>providers are released on a separate schedule from Terraform itself; therefore, a newer version could introduce breaking changes</p>", "<p>to ensure that the provider version matches the version of Terraform you are using</p>", "<p>to remove older versions of the provider</p>", "<p>to match the version number of your application being deployed via Terraform</p>"]}, "correct_response": ["a"], "section": "Objective 3 - Understand Terraform Basics", "question_plain": "Why is it a good idea to declare the required version of a provider in a Terraform configuration file?terraform {\n  required_providers {\n    aws = {\n      source = \"hashicorp/aws\"\n      version = \"3.57.0\"\n    }\n  }\n}", "related_lectures": []}, {"_class": "assessment", "id": 68069312, "assessment_type": "multiple-choice", "prompt": {"question": "<p>True or False? Provisioners should only be used as a last resort.</p>", "relatedLectureIds": "", "feedbacks": ["", ""], "explanation": "<p>Provisioners in Terraform are used to execute scripts or commands on a resource after it has been created. While provisioners can be useful in certain situations, such as configuring a server or setting up a database, <strong><em>it is generally true that provisioners should only be used as a last resort.</em></strong></p><p>The reason for this is that using provisioners can make your Terraform code less predictable and harder to manage. When you use provisioners, you introduce external dependencies and additional complexity into your infrastructure configuration. This can make it harder to reproduce your infrastructure, as well as harder to troubleshoot issues that arise.</p><p>Instead of using provisioners, it is generally recommended to use native Terraform resources and data sources to manage your infrastructure. This approach makes your code more predictable, easier to manage, and less error-prone.</p><p>However, there may be situations where provisioners are necessary or unavoidable, such as when working with legacy systems or when a resource does not support the necessary configuration options. In these cases, provisioners can be a useful tool, but they should be used judiciously and with care, and you should be aware of the potential risks and downsides of using provisioners in your infrastructure configuration.</p><p><a href=\"https://developer.hashicorp.com/terraform/language/resources/provisioners/syntax#provisioners-are-a-last-resort\">https://developer.hashicorp.com/terraform/language/resources/provisioners/syntax#provisioners-are-a-last-resort</a></p>", "answers": ["<p>True</p>", "<p>False</p>"]}, "correct_response": ["a"], "section": "Objective 3 - Understand Terraform Basics", "question_plain": "True or False? Provisioners should only be used as a last resort.", "related_lectures": []}, {"_class": "assessment", "id": 68069344, "assessment_type": "multi-select", "prompt": {"question": "<p>Which of the following connection types are supported by the <code>remote-exec</code> provisioner? (select two)</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>The <code><strong>remote-exec</strong></code> provisioner in Terraform is used to execute commands on a resource after it has been created over an <strong>SSH</strong> or <strong>WinRM</strong> connection. The supported connection types for <code><strong>remote-exec</strong></code> depend on the type of resource being provisioned and the underlying operating system.</p><p>For Linux-based resources, the <code><strong>remote-exec</strong></code> provisioner supports the following connection types:</p><ul><li><p>SSH (Secure Shell) over TCP (Transmission Control Protocol)</p></li></ul><p>For Windows-based resources, the <code><strong>remote-exec</strong></code> provisioner supports the following connection types:</p><ul><li><p>WinRM (Windows Remote Management) over HTTP (Hypertext Transfer Protocol) or HTTPS (HTTP Secure)</p></li></ul><p>Note that both <strong>SSH</strong> and <strong>WinRM</strong> connections can be configured to use specific usernames and passwords or SSH keys, depending on the resource being provisioned and the security requirements of the environment.</p><p>It is worth noting that while <code><strong>remote-exec</strong></code> provisioner can be useful in certain situations, it should generally be used as a last resort due to the potential risks and complexities involved in executing remote commands on resources. Whenever possible, it is recommended to use Terraform's native resource types to manage your infrastructure, rather than relying on external scripts or tools.</p><p>More information on <code><strong>remote-exec</strong></code> can be <a href=\"https://developer.hashicorp.com/terraform/language/resources/provisioners/remote-exec\">found at this link</a>.</p>", "answers": ["<p>ssh</p>", "<p>winrm</p>", "<p>rdp</p>", "<p>smb</p>"]}, "correct_response": ["a", "b"], "section": "Objective 3 - Understand Terraform Basics", "question_plain": "Which of the following connection types are supported by the remote-exec provisioner? (select two)", "related_lectures": []}, {"_class": "assessment", "id": 68069310, "assessment_type": "multiple-choice", "prompt": {"question": "<p>True or False? Multiple providers can be declared within a single Terraform configuration file.</p>", "relatedLectureIds": "", "feedbacks": ["", ""], "explanation": "<p><strong>True. </strong>Multiple providers can be declared within a single Terraform configuration file. In fact, it is common to declare multiple providers within a single configuration file, particularly when managing resources across multiple cloud providers.</p><p>When declaring multiple providers within a single configuration file, each provider should have a unique configuration block that specifies its name, source, and any required settings or credentials. Here's an example of what a configuration block for two different providers might look like:</p><p><br></p><pre class=\"prettyprint linenums\">terraform {\n  required_providers {\n    aws = {\n      source = \"hashicorp/aws\"\n    }\n    google = {\n      source = \"hashicorp/google\"\n    }\n  }\n}\n\nprovider \"aws\" {\n  region = \"us-west-2\"\n  access_key = \"ACCESS_KEY\"\n  secret_key = \"SECRET_KEY\"\n}\n\nprovider \"google\" {\n  project = \"my-project\"\n  credentials = file(\"path/to/credentials.json\")\n}</pre><p><br></p><p>In this example, we have declared two providers (<code><strong>aws</strong></code> and <code><strong>google</strong></code>) within a single configuration file. The <code><strong>terraform</strong></code> block declares the required providers, while the <code><strong>provider</strong></code> blocks specify the provider-specific settings and credentials.</p><p>When executing Terraform commands, you can use the <code><strong>-target</strong></code> option to specify which provider you want to apply changes to. For example, you could apply changes to the AWS provider by running <code><strong>terraform apply -target=aws</strong></code>.</p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/language/providers/configuration\">https://developer.hashicorp.com/terraform/language/providers/configuration</a></p>", "answers": ["<p>True</p>", "<p>False</p>"]}, "correct_response": ["a"], "section": "Objective 3 - Understand Terraform Basics", "question_plain": "True or False? Multiple providers can be declared within a single Terraform configuration file.", "related_lectures": []}, {"_class": "assessment", "id": 68069316, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Which Terraform command will force a resource to be destroyed and recreated even if there are no configuration changes that would require it?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>The <code><strong>terraform apply -replace=&lt;address&gt;</strong></code> command manually marks a Terraform-managed resource to be replaced, forcing it to be destroyed and recreated during the <code><strong>apply</strong></code>. Even if there are no configuration changes that would require a change or deletion of this resource, this command will instruct Terraform to replace it. This can come in handy if a resource has become degraded or damaged outside of Terraform.</p><p><strong>IMPORTANT&nbsp;- PLEASE&nbsp;READ</strong></p><p>This command replaces <code><strong>terraform taint</strong></code>, and it's possible you may still see <code><strong>terraform taint</strong></code> on the exam. Be prepared to know both of these commands.</p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/taint\">https://developer.hashicorp.com/terraform/cli/commands/taint</a></p>", "answers": ["<p><code>terraform apply -replace=&lt;address&gt;</code> </p>", "<p><code>terraform fmt</code> </p>", "<p><code>terraform apply -refresh-only</code> </p>", "<p><code>terraform destroy</code> </p>"]}, "correct_response": ["a"], "section": "Objective 4 - Use Terraform Outside of Core Workflow", "question_plain": "Which Terraform command will force a resource to be destroyed and recreated even if there are no configuration changes that would require it?", "related_lectures": []}, {"_class": "assessment", "id": 68069350, "assessment_type": "multiple-choice", "prompt": {"question": "<p>After running into issues with Terraform, you need to enable verbose logging to assist with troubleshooting the error. Which of the following values provides the <strong>MOST</strong> verbose logging?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", "", ""], "explanation": "<p>In Terraform, you can enable verbose logging by using the <code><strong>-debug</strong></code> command line option or setting the <code><strong>TF_LOG</strong></code> environment variable to <code><strong>DEBUG</strong></code>. This will provide additional log messages to help with troubleshooting errors.</p><p>However, if you need even more detailed logging, you can set the <code><strong>TF_LOG</strong></code> environment variable to <code><strong>TRACE</strong></code>. This will provide the most verbose logging, including every step taken by Terraform during plan, apply, and destroy operations, as well as additional debugging information.</p><p>Here's an example of how to set the <code><strong>TF_LOG</strong></code> environment variable to <code><strong>TRACE</strong></code> on a Unix-based system:</p><p><code>$ export TF_LOG=TRACE</code></p><p><br></p><p>Note that enabling verbose logging can result in a large amount of output, so it should only be used when necessary for troubleshooting purposes. Once you have resolved the issue, you can turn off verbose logging by removing the <code><strong>TF_LOG</strong></code> environment variable or set it to a lower level, such as <code><strong>DEBUG</strong></code> or <code><strong>INFO</strong></code>.</p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/internals/debugging\">https://developer.hashicorp.com/terraform/internals/debugging</a></p>", "answers": ["<p><code>TRACE</code> </p>", "<p><code>DEBUG</code> </p>", "<p><code>INFO</code> </p>", "<p><code>WARN</code> </p>", "<p><code>ERROR</code> </p>"]}, "correct_response": ["a"], "section": "Objective 4 - Use Terraform Outside of Core Workflow", "question_plain": "After running into issues with Terraform, you need to enable verbose logging to assist with troubleshooting the error. Which of the following values provides the MOST verbose logging?", "related_lectures": []}, {"_class": "assessment", "id": 68069348, "assessment_type": "multiple-choice", "prompt": {"question": "<p>You want to start managing resources that were not originally provisioned through infrastructure as code. Before you can import the resource's current state, what must you do before running the <code>terraform import</code> command?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>The current implementation of Terraform import can only import resources into the <a href=\"https://www.terraform.io/docs/state\">state</a>. It does not generate a configuration. Because of this, and before running <code>terraform import</code>, it is necessary to manually write a <code>resource</code> configuration block for the resource to which the imported object will be mapped.</p><p>First, add the resources to the configuration file:</p><p><br></p><pre class=\"prettyprint linenums\">resource \"aws_instance\" \"example\" {\n  # ...instance configuration...\n}</pre><p><br></p><p>Then run the following command:</p><p><code>$ terraform import aws_instance.example i-abcd1234</code> </p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/import\">https://developer.hashicorp.com/terraform/cli/commands/import</a></p>", "answers": ["<p>update the Terraform configuration file to include the new resources that match the resources you want to import</p>", "<p>shut down or stop using the resources being imported so no changes are inadvertently missed</p>", "<p>modify the Terraform state file to add the new resources so Terraform will have a record of the resources to be managed</p>", "<p>run <code>terraform apply -refresh-only</code> to ensure that the state file has the latest information for existing resources.</p>"]}, "correct_response": ["a"], "section": "Objective 4 - Use Terraform Outside of Core Workflow", "question_plain": "You want to start managing resources that were not originally provisioned through infrastructure as code. Before you can import the resource's current state, what must you do before running the terraform import command?", "related_lectures": []}, {"_class": "assessment", "id": 68069314, "assessment_type": "multiple-choice", "prompt": {"question": "<p>What does the command <code>terraform fmt</code> do?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>The <code><strong>terraform fmt</strong></code> command is a formatting tool in Terraform that helps to automatically format Terraform configuration files to follow a consistent style and make them more readable.</p><p>Running <code><strong>terraform fmt</strong></code> will parse the configuration files in the current directory and recursively in subdirectories and rewrite them using a standard formatting style, including indentation, spacing, and line breaks. It will modify the original files in place, so it's vital to ensure that the files are backed up or committed to a version control system before running this command.</p><p>By running <code><strong>terraform fmt</strong></code>, it helps to ensure that the Terraform configuration files are consistent across the project and easy to read, especially when working with large and complex infrastructure codebases. Consistent code style makes it easier for multiple people to collaborate on a project and makes it easier to understand the configuration files when returning to the project after an extended period.</p><p>It's a best practice to run <code><strong>terraform fmt</strong></code> before committing any changes to the configuration files, to ensure that all changes have the same formatting style and are easy to read.</p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/fmt\">https://developer.hashicorp.com/terraform/cli/commands/fmt</a></p>", "answers": ["<p>rewrite Terraform configuration files to a canonical format and style</p>", "<p>deletes the existing configuration file</p>", "<p>formats the state file in order to ensure the latest state of resources can be obtained</p>", "<p>updates the font of the configuration file to the official font supported by HashiCorp</p>"]}, "correct_response": ["a"], "section": "Objective 4 - Use Terraform Outside of Core Workflow", "question_plain": "What does the command terraform fmt do?", "related_lectures": []}, {"_class": "assessment", "id": 68069346, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Your organization has moved to AWS and has manually deployed infrastructure using the console. Recently, a decision has been made to standardize on Terraform for all deployments moving forward.</p><p>What can you do to ensure that the existing resources are managed by Terraform moving forward without causing interruption to existing resources?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>To ensure that existing resources in AWS are managed by Terraform moving forward without causing interruption to existing resources, there are a few steps that you can follow:</p><p><br></p><ol><li><p><strong>Create a new Terraform configuration that represents the existing resources in AWS</strong>. This can be done manually by examining the resources in the AWS console and recreating them in Terraform code, or automatically by using a tool like Terraforming or CloudMapper.</p></li><li><p>Import the existing resources into Terraform using the <code><strong>terraform import</strong></code> command. This command allows you to associate the existing resources in AWS with the new Terraform configuration. You will need to specify the resource type, name, and ID for each resource you want to import.</p></li><li><p>Use Terraform to manage all future changes to the infrastructure. With the existing resources now managed by Terraform, you can make changes to them through Terraform code and use the normal Terraform workflow of plan, apply, and destroy to manage the infrastructure going forward.</p></li></ol><p>It's important to note that importing existing resources into Terraform can be a complex and error-prone process, especially for large and complex infrastructures. It's recommended to test the import process thoroughly in a development or staging environment before attempting to import production resources. Additionally, be sure to carefully review the Terraform code before running <code><strong>terraform apply</strong></code> to avoid accidentally modifying or deleting existing resources.</p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/import\">https://developer.hashicorp.com/terraform/cli/commands/import</a></p>", "answers": ["<p>using <code>terraform import</code>, import the existing infrastructure to bring the resources under Terraform management</p>", "<p>delete the existing resources and recreate them using new a Terraform configuration so Terraform can manage them moving forward</p>", "<p>submit a ticket to AWS and ask them to export the state of all existing resources and use <code>terraform import</code> to import them into the state file</p>", "<p>resources that are manually deployed in the AWS console cannot be imported by Terraform</p>"]}, "correct_response": ["a"], "section": "Objective 4 - Use Terraform Outside of Core Workflow", "question_plain": "Your organization has moved to AWS and has manually deployed infrastructure using the console. Recently, a decision has been made to standardize on Terraform for all deployments moving forward.What can you do to ensure that the existing resources are managed by Terraform moving forward without causing interruption to existing resources?", "related_lectures": []}, {"_class": "assessment", "id": 68069382, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Terry is using a module to deploy some EC2 instances on AWS for a new project. He is viewing the code that is calling the module for deployment, which is shown below. <em>Where is the value of the security group originating?</em></p><p><br></p><pre class=\"prettyprint linenums\">module \"ec2_instances\" {\n  source  = \"terraform-aws-modules/ec2-instance/aws\"\n  version = \"4.3.0\"\n\n  name           = \"my-ec2-cluster\"\n  instance_count = 2\n\n  ami                    = \"ami-0c5204531f799e0c6\"\n  instance_type          = \"t2.micro\"\n  vpc_security_group_ids = [module.vpc.default_security_group_id]\n  subnet_id              = module.vpc.public_subnets[0]\n\n  tags = {\n    Terraform   = \"true\"\n    Environment = \"dev\"\n  }</pre>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<ul><li><p>The required <code>vpc_security_group_ids</code> and <code>subnet_id</code> arguments reference resources created by the <code>vpc</code> module. The <a href=\"https://registry.terraform.io/modules/terraform-aws-modules/ec2-instance/aws/3.5.0?tab=inputs\">Terraform Registry module page</a> contains the full list of arguments for the <code>ec2-instance</code> module.</p><p><br></p></li><li><p> A great tutorial to look at this workflow can be found on the HashiCorp Learn site -<a href=\"https://learn.hashicorp.com/tutorials/terraform/module-use\"> https://learn.hashicorp.com/tutorials/terraform/module-use</a></p></li></ul>", "answers": ["<p>the output of another module</p>", "<p>from a variable likely declared in a .tfvars file being passed to another module</p>", "<p>an environment variable being using during a <code>terraform apply</code> </p>", "<p>the Terraform public module registry</p>"]}, "correct_response": ["a"], "section": "Objective 5 - Interact with Terraform Modules", "question_plain": "Terry is using a module to deploy some EC2 instances on AWS for a new project. He is viewing the code that is calling the module for deployment, which is shown below. Where is the value of the security group originating?module \"ec2_instances\" {\n  source  = \"terraform-aws-modules/ec2-instance/aws\"\n  version = \"4.3.0\"\n\n  name           = \"my-ec2-cluster\"\n  instance_count = 2\n\n  ami                    = \"ami-0c5204531f799e0c6\"\n  instance_type          = \"t2.micro\"\n  vpc_security_group_ids = [module.vpc.default_security_group_id]\n  subnet_id              = module.vpc.public_subnets[0]\n\n  tags = {\n    Terraform   = \"true\"\n    Environment = \"dev\"\n  }", "related_lectures": []}, {"_class": "assessment", "id": 68069390, "assessment_type": "multi-select", "prompt": {"question": "<p>Kristen is using modules to provision an Azure environment for a new application. She is using the following code to specify the version of her virtual machine module. Which of the following Terraform features supports the versioning of a module? (select two)</p><p><br></p><pre class=\"prettyprint linenums\">module \"compute\" {\n  source  = \"azure/compute/azurerm\"\n  version = \"5.1.0\"\n\n  resource_group_name = \"production_web\"\n  vnet_subnet_id      = azurerm_subnet.aks-default.id \n}</pre>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Version constraints are supported only for modules installed from a module registry, such as the public <a href=\"https://registry.terraform.io/\">Terraform Registry</a> or <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/registry\">Terraform Cloud's private module registry</a>. Other module sources can provide their own versioning mechanisms within the source string itself, or might not support versions at all. In particular, modules sourced from local file paths do not support <code>version</code>; since they're loaded from the same source repository, they always share the same version as their caller.</p><p><a href=\"https://developer.hashicorp.com/terraform/language/modules/syntax#version\">https://developer.hashicorp.com/terraform/language/modules/syntax#version</a></p>", "answers": ["<p>public module registry</p>", "<p>private module registry</p>", "<p>local file paths</p>", "<p>modules stored in GitLab</p>"]}, "correct_response": ["a", "b"], "section": "Objective 5 - Interact with Terraform Modules", "question_plain": "Kristen is using modules to provision an Azure environment for a new application. She is using the following code to specify the version of her virtual machine module. Which of the following Terraform features supports the versioning of a module? (select two)module \"compute\" {\n  source  = \"azure/compute/azurerm\"\n  version = \"5.1.0\"\n\n  resource_group_name = \"production_web\"\n  vnet_subnet_id      = azurerm_subnet.aks-default.id \n}", "related_lectures": []}, {"_class": "assessment", "id": 68069386, "assessment_type": "multi-select", "prompt": {"question": "<p>Frank has a file named <code>main.tf</code> which is shown below. Which of the following statements are true about this code? (select two)</p><p><br></p><pre class=\"prettyprint linenums\">module \"servers\" {\n  source = \"./app-cluster\"\n\n  servers = 5\n}</pre>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>To <em>call</em> a module means to include the contents of that module into the configuration with specific values for its <a href=\"https://developer.hashicorp.com/terraform/language/values/variables\">input variables</a>. Modules are called from within other modules using <code>module</code> blocks. A module that includes a <code>module</code> block like this is the <em>calling module</em> of the child module.</p><p>The label immediately after the <code>module</code> keyword is a local name, which the calling module can use to refer to this instance of the module.</p><p><a href=\"https://developer.hashicorp.com/terraform/language/modules#calling-a-child-module\">https://developer.hashicorp.com/terraform/language/modules#calling-a-child-module</a></p>", "answers": ["<p><code>main.tf</code> is the calling module</p>", "<p><code>app-cluster</code> is the child module</p>", "<p><code>main.tf</code> is the child module</p>", "<p><code>app-cluster</code> is the calling module</p>"]}, "correct_response": ["a", "b"], "section": "Objective 5 - Interact with Terraform Modules", "question_plain": "Frank has a file named main.tf which is shown below. Which of the following statements are true about this code? (select two)module \"servers\" {\n  source = \"./app-cluster\"\n\n  servers = 5\n}", "related_lectures": []}, {"_class": "assessment", "id": 68069384, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Rick is writing a new Terraform configuration file and wishes to use modules in order to easily consume Terraform code that has already been written. Which of the modules shown below will be created first?</p><pre class=\"prettyprint linenums\">terraform {\n  required_providers {\n    aws = {\n      source = \"hashicorp/aws\"\n    }\n  }\n}\n\nprovider \"aws\" {\n  region = \"us-west-2\"\n}\n\nmodule \"vpc\" {\n  source  = \"terraform-aws-modules/vpc/aws\"\n  version = \"2.21.0\"\n\n  name = var.vpc_name\n  cidr = var.vpc_cidr\n\n  azs             = var.vpc_azs\n  private_subnets = var.vpc_private_subnets\n  public_subnets  = var.vpc_public_subnets\n\n  enable_nat_gateway = var.vpc_enable_nat_gateway\n\n  tags = var.vpc_tags\n}\n\nmodule \"ec2_instances\" {\n  source  = \"terraform-aws-modules/ec2-instance/aws\"\n  version = \"2.12.0\"\n\n  name           = \"my-ec2-cluster\"\n  instance_count = 2\n\n  ami                    = \"ami-0c5204531f799e0c6\"\n  instance_type          = \"t2.micro\"\n  vpc_security_group_ids = [module.vpc.default_security_group_id]\n  subnet_id              = module.vpc.public_subnets[0]\n\n  tags = {\n    Terraform   = \"true\"\n    Environment = \"dev\"\n  }\n}</pre><p><br></p>", "relatedLectureIds": "", "feedbacks": ["", ""], "explanation": "<p>The <code>VPC</code> module will be executed first since the <code>ec2_instances</code> module has dependencies on the VPC module. Both <code>vpc_security_group_ids</code> and <code>subnet_id</code> require outputs from the VPC module.</p><p><a href=\"https://learn.hashicorp.com/tutorials/terraform/module-use\">https://learn.hashicorp.com/tutorials/terraform/module-use</a></p>", "answers": ["<pre class=\"prettyprint linenums\">module \"ec2_instances\"</pre>", "<pre class=\"prettyprint linenums\">module \"vpc\"</pre>"]}, "correct_response": ["b"], "section": "Objective 5 - Interact with Terraform Modules", "question_plain": "Rick is writing a new Terraform configuration file and wishes to use modules in order to easily consume Terraform code that has already been written. Which of the modules shown below will be created first?terraform {\n  required_providers {\n    aws = {\n      source = \"hashicorp/aws\"\n    }\n  }\n}\n\nprovider \"aws\" {\n  region = \"us-west-2\"\n}\n\nmodule \"vpc\" {\n  source  = \"terraform-aws-modules/vpc/aws\"\n  version = \"2.21.0\"\n\n  name = var.vpc_name\n  cidr = var.vpc_cidr\n\n  azs             = var.vpc_azs\n  private_subnets = var.vpc_private_subnets\n  public_subnets  = var.vpc_public_subnets\n\n  enable_nat_gateway = var.vpc_enable_nat_gateway\n\n  tags = var.vpc_tags\n}\n\nmodule \"ec2_instances\" {\n  source  = \"terraform-aws-modules/ec2-instance/aws\"\n  version = \"2.12.0\"\n\n  name           = \"my-ec2-cluster\"\n  instance_count = 2\n\n  ami                    = \"ami-0c5204531f799e0c6\"\n  instance_type          = \"t2.micro\"\n  vpc_security_group_ids = [module.vpc.default_security_group_id]\n  subnet_id              = module.vpc.public_subnets[0]\n\n  tags = {\n    Terraform   = \"true\"\n    Environment = \"dev\"\n  }\n}", "related_lectures": []}, {"_class": "assessment", "id": 68069380, "assessment_type": "multi-select", "prompt": {"question": "<p><em>Published modules</em> via the Terraform Registry provide which of the following benefits? (select four)</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", "", ""], "explanation": "<p>Public modules are managed via <strong><em>Git and GitHub</em></strong>. Publishing a module takes only a few minutes. Once a module is published, you can release a new version of a module by simply pushing a properly formed Git tag. The module must be on GitHub and must be a public repo. This is only a requirement for the <a href=\"https://registry.terraform.io/\">public registry</a>. If you're using a private registry, you may ignore this requirement.</p><p>The key here is that HashiCorp uses <strong>GitHub</strong> for published modules.</p>", "answers": ["<p>support versioning</p>", "<p>automatically generated documentation</p>", "<p>allow browsing version histories</p>", "<p>show examples and READMEs</p>", "<p>support from any code repo</p>"]}, "correct_response": ["a", "b", "c", "d"], "section": "Objective 5 - Interact with Terraform Modules", "question_plain": "Published modules via the Terraform Registry provide which of the following benefits? (select four)", "related_lectures": []}, {"_class": "assessment", "id": 68069388, "assessment_type": "multiple-choice", "prompt": {"question": "<p>What are the core Terraform workflow steps to use infrastructure as code?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>The core Terraform workflow has three steps:</p><p><strong>&nbsp; - Write</strong> - Author infrastructure as code.</p><p><strong>&nbsp; - Plan</strong> - Preview changes before applying.</p><p><strong>&nbsp; - Apply</strong> - Provision reproducible infrastructure.</p><p>This guide walks through how each of these three steps plays out in the context of working as an individual practitioner, how they evolve when a team is collaborating on infrastructure, and how Terraform Cloud enables this workflow to run smoothly for entire organizations.</p><p><a href=\"https://developer.hashicorp.com/terraform/intro/core-workflow\">https://developer.hashicorp.com/terraform/intro/core-workflow</a></p>", "answers": ["<pre class=\"prettyprint linenums\">1) Write\n2) Plan\n3) Apply</pre>", "<pre class=\"prettyprint linenums\">1) Plan\n2) Apply\n3) Destroy</pre>", "<pre class=\"prettyprint linenums\">1) Plan\n2) Apply\n3) Pray</pre>", "<pre class=\"prettyprint linenums\">1) Code\n2) Validate\n3) Apply</pre>"]}, "correct_response": ["a"], "section": "Objective 6 - Use the Core Terraform Workflow", "question_plain": "What are the core Terraform workflow steps to use infrastructure as code?", "related_lectures": []}, {"_class": "assessment", "id": 68069304, "assessment_type": "multi-select", "prompt": {"question": "<p>Which of the following actions are performed during a <code>terraform init</code>? (select three)</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>The <code>terraform init</code> command is used to initialize a working directory containing Terraform configuration files. This is the first command that should be run after writing a new Terraform configuration or cloning an existing one from version control. It is safe to run this command multiple times.</p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/init\">https://developer.hashicorp.com/terraform/cli/commands/init</a></p><p><a href=\"https://learn.hashicorp.com/tutorials/terraform/aws-build#create-infrastructure\">https://learn.hashicorp.com/tutorials/terraform/aws-build#create-infrastructure</a></p>", "answers": ["<p>downloads the required modules referenced in the configuration</p>", "<p> downloads the providers/plugins required to execute the configuration</p>", "<p>initializes the backend configuration</p>", "<p>provisions the declared resources in your configuration</p>"]}, "correct_response": ["a", "b", "c"], "section": "Objective 6 - Use the Core Terraform Workflow", "question_plain": "Which of the following actions are performed during a terraform init? (select three)", "related_lectures": []}, {"_class": "assessment", "id": 68069392, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Stephen is writing brand new code and needs to ensure it is syntactically valid and internally consistent. Stephen doesn't want to wait for Terraform to access any remote services while making sure his code is valid. <em>What command can he use to accomplish this?</em></p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>The <code>terraform validate</code> command validates the configuration files in a directory, referring only to the configuration and not accessing any remote services such as remote state, provider APIs, etc.</p><p>Validate runs checks that verify whether a configuration is syntactically valid and internally consistent, regardless of any provided variables or existing state. It is thus primarily useful for general verification of reusable modules, including correctness of attribute names and value types.</p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/validate\">https://developer.hashicorp.com/terraform/cli/commands/validate</a></p>", "answers": ["<p><code>terraform validate</code> </p>", "<p><code>terraform fmt</code> </p>", "<p><code>terraform apply -refresh-only</code> </p>", "<p><code>terraform show</code> </p>"]}, "correct_response": ["a"], "section": "Objective 6 - Use the Core Terraform Workflow", "question_plain": "Stephen is writing brand new code and needs to ensure it is syntactically valid and internally consistent. Stephen doesn't want to wait for Terraform to access any remote services while making sure his code is valid. What command can he use to accomplish this?", "related_lectures": []}, {"_class": "assessment", "id": 68069294, "assessment_type": "multiple-choice", "prompt": {"question": "<p>What happens when a <code>terraform apply</code> command is executed?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>The <code>terraform apply</code> command is used to apply the changes required to reach the desired state of the configuration, or the pre-determined set of actions generated by a terraform plan execution plan. </p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/apply\">https://developer.hashicorp.com/terraform/cli/commands/apply</a></p>", "answers": ["<p>the backend is initialized and the working directory is prepped</p>", "<p>creates the execution plan for the deployment of resources</p>", "<p>applies the changes required in the target infrastructure in order to reach the desired configuration</p>", "<p>reconciles the state Terraform knows about with the real-world infrastructure</p>"]}, "correct_response": ["c"], "section": "Objective 6 - Use the Core Terraform Workflow", "question_plain": "What happens when a terraform apply command is executed?", "related_lectures": []}, {"_class": "assessment", "id": 68069328, "assessment_type": "multiple-choice", "prompt": {"question": "<p>After executing a <code>terraform plan</code>, you notice that a resource has a tilde (~) next to it. What does this mean?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>The prefix <code>-/+</code> means that Terraform will destroy and recreate the resource, rather than updating it in-place. Some attributes&nbsp;and resources can be updated in-place and are shown with the <code>~</code> prefix.</p><p><img src=\"https://img-b.udemycdn.com/redactor/raw/2020-01-05_03-52-34-98900474f68ad83c27ea6c1c55158921.PNG\"></p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/plan\">https://developer.hashicorp.com/terraform/cli/commands/plan</a></p><p><a href=\"https://learn.hashicorp.com/tutorials/terraform/infrastructure-as-code\">https://learn.hashicorp.com/tutorials/terraform/infrastructure-as-code</a></p>", "answers": ["<p>the resource will be destroyed and recreated</p>", "<p>the resource will be updated in place</p>", "<p>the resource will be created</p>", "<p>Terraform can't determine how to proceed due to a problem with the state file</p>"]}, "correct_response": ["b"], "section": "Objective 6 - Use the Core Terraform Workflow", "question_plain": "After executing a terraform plan, you notice that a resource has a tilde (~) next to it. What does this mean?", "related_lectures": []}, {"_class": "assessment", "id": 68069296, "assessment_type": "multiple-choice", "prompt": {"question": "<p>What happens when a <code>terraform plan</code> is executed?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>The <code>terraform plan</code> command is used to create an execution plan. Terraform performs a refresh, unless explicitly disabled, and then determines what actions are necessary to achieve the desired state specified in the configuration files.</p><p>After a plan has been run, it can be executed by running a <code>terraform apply</code> </p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/plan\">https://developer.hashicorp.com/terraform/cli/commands/plan</a></p>", "answers": ["<p>creates an execution plan and determines what changes are required to achieve the desired state in the configuration files.</p>", "<p>applies the changes required in the target infrastructure in order to reach the desired configuration</p>", "<p>the backend is initialized and the working directory is prepped</p>", "<p>reconciles the state Terraform knows about with the real-world infrastructure</p>"]}, "correct_response": ["a"], "section": "Objective 6 - Use the Core Terraform Workflow", "question_plain": "What happens when a terraform plan is executed?", "related_lectures": []}, {"_class": "assessment", "id": 68069320, "assessment_type": "multi-select", "prompt": {"question": "<p>In regards to Terraform state file, select all the statements below which are correct: (select four)</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", "", "", ""], "explanation": "<p>Terraform state can contain sensitive data, depending on the resources in use and your definition of \"sensitive.\" The state contains resource IDs and all resource attributes. For resources such as databases, this may contain initial passwords.</p><p>When using local state, state is stored in plain-text JSON files.</p><p>If you manage any sensitive data with Terraform (like database passwords, user passwords, or private keys), treat the state itself as sensitive data.</p><p>Storing Terraform state remotely can provide better security. As of Terraform 0.9, Terraform does not persist state to the local disk when remote state is in use, and some backends can be configured to encrypt the state data at rest.</p><p><a href=\"https://developer.hashicorp.com/terraform/language/state/sensitive-data\">https://developer.hashicorp.com/terraform/language/state/sensitive-data</a></p>", "answers": ["<p>the Terraform state can contain sensitive data, therefore the state file should be protected from unauthorized access</p>", "<p>when using local state, the state file is stored in plain-text</p>", "<p>the state file is always encrypted at rest</p>", "<p>storing state remotely can provide better security</p>", "<p>Terraform Cloud always encrypts state at rest</p>", "<p>using the <code>mask</code> feature, you can instruct Terraform to mask sensitive data in the state file</p>"]}, "correct_response": ["a", "b", "d", "e"], "section": "Objective 7 - Implement and Maintain State", "question_plain": "In regards to Terraform state file, select all the statements below which are correct: (select four)", "related_lectures": []}, {"_class": "assessment", "id": 68069352, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Which of the following best describes the default local backend?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Information on the default local backend can be <a href=\"https://developer.hashicorp.com/terraform/language/settings/backends/local\">found at this link</a>.</p><p>Example:</p><pre class=\"prettyprint linenums\">terraform {\n  backend \"local\" {\n    path = \"relative/path/to/terraform.tfstate\"\n  }\n}</pre>", "answers": ["<p>The local backend stores state on the local filesystem, locks the state using system APIs, and performs operations locally</p>", "<p>The local backend is the directory where resources deployed by Terraform have direct access to in order to update their current state</p>", "<p>The local backend is where Terraform stores logs to be processed by a log collector</p>", "<p>The local backend is how Terraform connects to public cloud services, such as AWS, Azure, or GCP</p>"]}, "correct_response": ["a"], "section": "Objective 7 - Implement and Maintain State", "question_plain": "Which of the following best describes the default local backend?", "related_lectures": []}, {"_class": "assessment", "id": 68069300, "assessment_type": "multi-select", "prompt": {"question": "<p>What are some of the features of Terraform state? (select three)</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>See<a href=\"https://developer.hashicorp.com/terraform/language/state/purpose\"> this page</a> on the purpose of Terraform state and the benefits it provides.</p>", "answers": ["<p>increased performance</p>", "<p>determining the correct order to destroy resources</p>", "<p>mapping configuration to real-world resources</p>", "<p>inspection of cloud resources</p>"]}, "correct_response": ["a", "b", "c"], "section": "Objective 7 - Implement and Maintain State", "question_plain": "What are some of the features of Terraform state? (select three)", "related_lectures": []}, {"_class": "assessment", "id": 68069354, "assessment_type": "multiple-choice", "prompt": {"question": "<p>When multiple engineers start deploying infrastructure using the same state file, what is a feature of remote state storage that is critical to ensure the state does not become corrupt?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>If supported by your <a href=\"https://developer.hashicorp.com/terraform/language/settings/backends/configuration\">backend</a>, Terraform will lock your state for all operations that could write state. This prevents others from acquiring the lock and potentially corrupting your state.</p><p>State locking happens automatically on all operations that could write state. You won't see any message that it is happening. If state locking fails, Terraform will not continue. You can disable state locking for most commands with the <code>-lock</code> flag but it is not recommended.</p><p><a href=\"https://developer.hashicorp.com/terraform/language/state/locking\">https://developer.hashicorp.com/terraform/language/state/locking</a></p>", "answers": ["<p>state locking</p>", "<p>object storage</p>", "<p>encryption</p>", "<p>workspaces</p>"]}, "correct_response": ["a"], "section": "Objective 7 - Implement and Maintain State", "question_plain": "When multiple engineers start deploying infrastructure using the same state file, what is a feature of remote state storage that is critical to ensure the state does not become corrupt?", "related_lectures": []}, {"_class": "assessment", "id": 68069332, "assessment_type": "multiple-choice", "prompt": {"question": "<p>True or False? You can migrate the Terraform backend but only if there are no resources currently being managed.</p>", "relatedLectureIds": "", "feedbacks": ["", ""], "explanation": "<p>If you are already using Terraform to manage infrastructure, you probably want to transfer to another backend, such as Terraform Cloud, so you can continue managing it. By migrating your Terraform <a href=\"https://developer.hashicorp.com/terraform/language/state\">state</a>, you can hand off infrastructure without de-provisioning anything.</p><p><a href=\"https://learn.hashicorp.com/tutorials/terraform/cloud-migrate\">https://learn.hashicorp.com/tutorials/terraform/cloud-migrate</a></p>", "answers": ["<p>True</p>", "<p>False</p>"]}, "correct_response": ["b"], "section": "Objective 7 - Implement and Maintain State", "question_plain": "True or False? You can migrate the Terraform backend but only if there are no resources currently being managed.", "related_lectures": []}, {"_class": "assessment", "id": 68069330, "assessment_type": "multiple-choice", "prompt": {"question": "<p>What Terraform command can be used to inspect the current state file?</p><p><em>Example:</em></p><img src=\"https://img-b.udemycdn.com/redactor/raw/2020-01-05_04-01-31-d8d4503db1164a33eca36ad537b8aa48.PNG\">", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>The <code>terraform show</code> command is used to provide human-readable output from a state or plan file. This can be used to inspect a plan to ensure that the planned operations are expected, or to inspect the current state as Terraform sees it.</p><p>Machine-readable output can be generated by adding the <code>-json</code> command-line flag.</p><p><strong>Note:</strong> When using the <code>-json</code> command-line flag, any sensitive values in Terraform state will be displayed in plain text.</p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/show\">https://developer.hashicorp.com/terraform/cli/commands/show</a></p>", "answers": ["<p><code>terraform show</code> </p>", "<p><code>terraform state</code> </p>", "<p><code>terraform read</code> </p>", "<p><code>terraform inspect</code> </p>"]}, "correct_response": ["a"], "section": "Objective 7 - Implement and Maintain State", "question_plain": "What Terraform command can be used to inspect the current state file?Example:", "related_lectures": []}, {"_class": "assessment", "id": 68069298, "assessment_type": "multiple-choice", "prompt": {"question": "<p>By default, where does Terraform OSS/CLI store its state file?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>By default, the state file is stored in a local file named \"terraform.tfstate\", but it can also be stored remotely, which works better in a team environment.</p><p><a href=\"https://developer.hashicorp.com/terraform/language/settings/backends/configuration\">https://developer.hashicorp.com/terraform/language/settings/backends/configuration</a></p>", "answers": ["<p>Amazon S3 bucket</p>", "<p>current working directory</p>", "<p>shared directory</p>", "<p>remotely using Terraform Cloud</p>"]}, "correct_response": ["b"], "section": "Objective 7 - Implement and Maintain State", "question_plain": "By default, where does Terraform OSS/CLI store its state file?", "related_lectures": []}, {"_class": "assessment", "id": 68069322, "assessment_type": "multiple-choice", "prompt": {"question": "<p>In order to make a Terraform configuration file dynamic and/or reusable, static values should be converted to use what?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Input variables serve as parameters for a Terraform module, allowing aspects of the module to be customized without altering the module's own source code, and allowing modules to be shared between different configurations.</p><p><a href=\"https://learn.hashicorp.com/tutorials/terraform/aws-variables\">https://learn.hashicorp.com/tutorials/terraform/aws-variables</a></p>", "answers": ["<p>input variables</p>", "<p>regular expressions</p>", "<p>output value</p>", "<p>module</p>"]}, "correct_response": ["a"], "section": "Objective 8 - Read, Generate, and Modify Configuration", "question_plain": "In order to make a Terraform configuration file dynamic and/or reusable, static values should be converted to use what?", "related_lectures": []}, {"_class": "assessment", "id": 68069356, "assessment_type": "multi-select", "prompt": {"question": "<p>When configuring a remote backend in Terraform, it might be a good idea to purposely omit some of the required arguments to ensure secrets and other relevant data are not inadvertently shared with others. What alternatives are available to provide the remaining values to Terraform to initialize and communicate with the remote backend? (select three)</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>You do not need to specify every required argument in the backend configuration. Omitting certain arguments may be desirable to avoid storing secrets, such as access keys, within the main configuration. When some or all of the arguments are omitted, we call this a <em>partial configuration</em>.</p><p>With a partial configuration, the remaining configuration arguments must be provided as part of <a href=\"https://developer.hashicorp.com/terraform/language/settings/backends/configuration#backend-initialization\">the initialization process</a>. There are several ways to supply the remaining arguments:</p><p><strong>Interactively</strong>: Terraform will interactively ask you for the required values unless interactive input is disabled. Terraform will not prompt for optional values.</p><p><strong>File</strong>: A configuration file may be specified via the <code>init</code> command line. To specify a file, use the <code>-backend-config=PATH</code> option when running <code>terraform init</code>. If the file contains secrets it may be kept in a secure data store, such as <a href=\"https://www.vaultproject.io/\">Vault</a>, in which case it must be downloaded to the local disk before running Terraform.</p><p><strong>Command-line key/value pairs</strong>: Key/value pairs can be specified via the <code>init</code> command line. Note that many shells retain command-line flags in a history file, so this isn't recommended for secrets. To specify a single key/value pair, use the <code>-backend-config=\"KEY=VALUE\"</code> option when running <code>terraform init</code>.</p>", "answers": ["<p>interactively on the command line</p>", "<p>use the <code>-backend-config=PATH</code> flag to specify a separate config file</p>", "<p>command-line key/value pairs</p>", "<p>directly querying HashiCorp Vault for the secrets</p>"]}, "correct_response": ["a", "b", "c"], "section": "Objective 8 - Read, Generate, and Modify Configuration", "question_plain": "When configuring a remote backend in Terraform, it might be a good idea to purposely omit some of the required arguments to ensure secrets and other relevant data are not inadvertently shared with others. What alternatives are available to provide the remaining values to Terraform to initialize and communicate with the remote backend? (select three)", "related_lectures": []}, {"_class": "assessment", "id": 68069362, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Given the Terraform configuration below, which order will the resources be created?</p><p><br></p><pre class=\"prettyprint linenums\">resource \"aws_instance\" \"web_server\" {\n    ami = \"i-abdce12345\"\n    instance_type = \"t2.micro\"\n}\n\nresource \"aws_eip\" \"web_server_ip\" { \n    vpc = true \n    instance = aws_instance.web_server.id \n}</pre>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>The <code>aws_instance</code> will be created first, and then <code>aws_eip</code> will be created second due to the <code>aws_eip</code>'s resource dependency of the aws_instance id</p><p>More information on resource dependencies can be <a href=\"https://learn.hashicorp.com/tutorials/terraform/dependencies\">found at this link</a>.</p>", "answers": ["<p><code>aws_instance</code> will be created first</p><p><code>aws_eip</code> will be created second</p>", "<p><code>aws_eip</code> will be created first</p><p><code>aws_instance</code> will be created second</p>", "<p>resources will be created in parallel</p>", "<p>no resources will be created</p>"]}, "correct_response": ["a"], "section": "Objective 8 - Read, Generate, and Modify Configuration", "question_plain": "Given the Terraform configuration below, which order will the resources be created?resource \"aws_instance\" \"web_server\" {\n    ami = \"i-abdce12345\"\n    instance_type = \"t2.micro\"\n}\n\nresource \"aws_eip\" \"web_server_ip\" { \n    vpc = true \n    instance = aws_instance.web_server.id \n}", "related_lectures": []}, {"_class": "assessment", "id": 68069360, "assessment_type": "multiple-choice", "prompt": {"question": "<p>What Terraform feature is shown in the example below?</p><pre class=\"prettyprint linenums\"> resource \"aws_security_group\" \"example\" {\n  name = \"sg-app-web-01\"\n\n  dynamic \"ingress\" {\n    for_each = var.service_ports\n    content {\n      from_port = ingress.value\n      to_port   = ingress.value\n      protocol  = \"tcp\"\n    }\n  }\n}</pre>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>You can dynamically construct repeatable nested blocks like <code>ingress</code> using a special <code>dynamic</code> block type, which is supported inside <code>resource</code>, <code>data</code>, <code>provider</code>, and <code>provisioner</code> blocks.</p><p><a href=\"https://developer.hashicorp.com/terraform/language/expressions#dynamic-blocks\">https://developer.hashicorp.com/terraform/language/expressions#dynamic-blocks</a></p>", "answers": ["<p>dynamic block</p>", "<p>conditional expression</p>", "<p>local values</p>", "<p>data source</p>"]}, "correct_response": ["a"], "section": "Objective 8 - Read, Generate, and Modify Configuration", "question_plain": "What Terraform feature is shown in the example below? resource \"aws_security_group\" \"example\" {\n  name = \"sg-app-web-01\"\n\n  dynamic \"ingress\" {\n    for_each = var.service_ports\n    content {\n      from_port = ingress.value\n      to_port   = ingress.value\n      protocol  = \"tcp\"\n    }\n  }\n}", "related_lectures": []}, {"_class": "assessment", "id": 68069326, "assessment_type": "multiple-choice", "prompt": {"question": "<p>In the example below, where is the value of the DNS record's IP&nbsp;address originating from?</p><pre class=\"prettyprint linenums\">resource \"aws_route53_record\" \"www\" {\n  zone_id = aws_route53_zone.primary.zone_id\n  name    = \"www.helloworld.com\"\n  type    = \"A\"\n  ttl     = \"300\"\n  records = [module.web_server.instance_ip_addr]\n}</pre><p><br></p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>In a parent module, outputs of child modules are available in expressions as <code>module.&lt;MODULE NAME&gt;.&lt;OUTPUT NAME&gt;</code>. For example, if a child module named <code>web_server</code> declared an output named <code>instance_ip_addr</code>, you could access that value as <code>module.web_server.instance_ip_addr</code>.</p><p><a href=\"https://developer.hashicorp.com/terraform/language/expressions#references-to-named-values\">https://developer.hashicorp.com/terraform/language/expressions#references-to-named-values</a></p>", "answers": ["<p>value of the web_server parameter from the variables.tf file</p>", "<p>the output of a module named web_server</p>", "<p>the regular expression named module.web_server</p>", "<p>by querying the AWS&nbsp;EC2 API to retrieve the IP&nbsp;address</p>"]}, "correct_response": ["b"], "section": "Objective 8 - Read, Generate, and Modify Configuration", "question_plain": "In the example below, where is the value of the DNS record's IP&nbsp;address originating from?resource \"aws_route53_record\" \"www\" {\n  zone_id = aws_route53_zone.primary.zone_id\n  name    = \"www.helloworld.com\"\n  type    = \"A\"\n  ttl     = \"300\"\n  records = [module.web_server.instance_ip_addr]\n}", "related_lectures": []}, {"_class": "assessment", "id": 68069372, "assessment_type": "multiple-choice", "prompt": {"question": "<p><em>Select the feature below that best completes the sentence:</em></p><p>The following list represents the different types of __________ available in Terraform.</p><p><br></p><pre class=\"prettyprint linenums\">max\nmin\njoin\nreplace\nlength\nrange</pre>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>The Terraform language includes a number of built-in functions that you can call from within expressions to transform and combine values. The Terraform language does not support user-defined functions, and only the functions built into the language are available for use.</p><p><a href=\"https://developer.hashicorp.com/terraform/language/functions\">https://developer.hashicorp.com/terraform/language/functions</a></p>", "answers": ["<p>functions</p>", "<p>backends</p>", "<p>named values</p>", "<p>data sources</p>"]}, "correct_response": ["a"], "section": "Objective 8 - Read, Generate, and Modify Configuration", "question_plain": "Select the feature below that best completes the sentence:The following list represents the different types of __________ available in Terraform.max\nmin\njoin\nreplace\nlength\nrange", "related_lectures": []}, {"_class": "assessment", "id": 68069374, "assessment_type": "multiple-choice", "prompt": {"question": "<p>What is the best and easiest way for Terraform to read and write secrets from HashiCorp Vault?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>The Vault provider allows Terraform to read from, write to, and configure <a href=\"https://vaultproject.io/\">Hashicorp Vault</a>.</p><p><a href=\"https://registry.terraform.io/providers/hashicorp/vault/latest/docs\">https://registry.terraform.io/providers/hashicorp/vault/latest/docs</a></p>", "answers": ["<p>Vault provider</p>", "<p>API&nbsp;access using the AppRole auth method</p>", "<p>CLI access from the same machine running Terraform</p>", "<p>integration with a tool like Jenkins</p>"]}, "correct_response": ["a"], "section": "Objective 8 - Read, Generate, and Modify Configuration", "question_plain": "What is the best and easiest way for Terraform to read and write secrets from HashiCorp Vault?", "related_lectures": []}, {"_class": "assessment", "id": 68069358, "assessment_type": "multiple-choice", "prompt": {"question": "<p>You have been given requirements to create a security group for a new application. Since your organization standardizes on Terraform, you want to add this new security group with the fewest number of lines of code. What feature could you use to iterate over a list of required tcp ports to add to the new security group?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>A <code>dynamic</code> block acts much like a <code>for</code> expression, but produces nested blocks instead of a complex typed value. It iterates over a given complex value and generates a nested block for each element of that complex value.</p><p>You can find more information on dynamic blocks <a href=\"https://developer.hashicorp.com/terraform/language/expressions#dynamic-blocks\">using this link</a>.</p>", "answers": ["<p>dynamic block</p>", "<p>terraform import</p>", "<p>dynamic backend</p>", "<p>splat expression</p>"]}, "correct_response": ["a"], "section": "Objective 8 - Read, Generate, and Modify Configuration", "question_plain": "You have been given requirements to create a security group for a new application. Since your organization standardizes on Terraform, you want to add this new security group with the fewest number of lines of code. What feature could you use to iterate over a list of required tcp ports to add to the new security group?", "related_lectures": []}, {"_class": "assessment", "id": 68069376, "assessment_type": "multiple-choice", "prompt": {"question": "<p>What is the downside to using Terraform to interact with sensitive data, such as reading secrets from Vault?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Interacting with Vault from Terraform causes any secrets that you read and write to be persisted in both Terraform's state file <em>and</em> in any generated plan files. For any Terraform module that reads or writes Vault secrets, these files should be treated as sensitive and protected accordingly.</p><p><a href=\"https://registry.terraform.io/providers/hashicorp/vault/latest/docs\">https://registry.terraform.io/providers/hashicorp/vault/latest/docs</a></p>", "answers": ["<p>secrets are persisted to the state file</p>", "<p>Terraform and Vault must be running on the same version</p>", "<p>Terraform requires a unique auth method to work with Vault</p>", "<p>Terraform and Vault must be running on the same physical host</p>"]}, "correct_response": ["a"], "section": "Objective 8 - Read, Generate, and Modify Configuration", "question_plain": "What is the downside to using Terraform to interact with sensitive data, such as reading secrets from Vault?", "related_lectures": []}, {"_class": "assessment", "id": 68069324, "assessment_type": "multiple-choice", "prompt": {"question": "<p>When using modules to deploy infrastructure, how would you export a value from one module to import into another module?</p><p><em>For example, a module dynamically deploys an application instance or virtual machine, and you need the IP&nbsp;address in another module to configure a related DNS record in order to reach the newly deployed application.</em></p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Output values are like the return values of a Terraform module and have several uses such as a child module using those outputs to expose a subset of its resource attributes to a parent module.</p><p><a href=\"https://developer.hashicorp.com/terraform/language/expressions#references-to-named-values\">https://developer.hashicorp.com/terraform/language/expressions#references-to-named-values</a></p>", "answers": ["<p>export the value using <code>terraform export</code> and input the value using <code>terraform input</code> </p>", "<p>configure an output value in the application module in order to use that value for the DNS&nbsp;module</p>", "<p>preconfigure the IP address as a parameter in the DNS module</p>", "<p>configure the pertinent provider's configuration with a list of possible IP&nbsp;addresses to use</p>"]}, "correct_response": ["b"], "section": "Objective 8 - Read, Generate, and Modify Configuration", "question_plain": "When using modules to deploy infrastructure, how would you export a value from one module to import into another module?For example, a module dynamically deploys an application instance or virtual machine, and you need the IP&nbsp;address in another module to configure a related DNS record in order to reach the newly deployed application.", "related_lectures": []}, {"_class": "assessment", "id": 68069318, "assessment_type": "multiple-choice", "prompt": {"question": "<p>In Terraform Cloud, a workspace can be mapped to how many VCS repos?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>A workspace can only be configured to a single VCS&nbsp;repo, however, multiple workspaces can use the same repo, if needed. A good explanation of how to configure your code repositories <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/workspaces/configurations\">can be found here</a>.</p><p><a href=\"https://developer.hashicorp.com/terraform/cloud-docs/workspaces/creating\">https://developer.hashicorp.com/terraform/cloud-docs/workspaces/creating</a></p>", "answers": ["<p>1</p>", "<p>2</p>", "<p>3</p>", "<p>5</p>"]}, "correct_response": ["a"], "section": "Objective 9 - Understand Terraform Cloud Capabilities", "question_plain": "In Terraform Cloud, a workspace can be mapped to how many VCS repos?", "related_lectures": []}, {"_class": "assessment", "id": 68069368, "assessment_type": "multiple-choice", "prompt": {"question": "<p>True or False?&nbsp;Similar to Terraform OSS, you must use the CLI to switch between workspaces when using Terraform Cloud workspaces.</p>", "relatedLectureIds": "", "feedbacks": ["", ""], "explanation": "<p><strong>False.</strong></p><p>When using Terraform Cloud workspaces, you do not need to use the Terraform CLI to switch between workspaces. Terraform Cloud provides a web-based interface where you can manage your workspaces and their associated infrastructure.</p><p>In Terraform Cloud, each workspace represents a separate environment (e.g., development, staging, production), and you can view and manage them individually through the Terraform Cloud web UI. You can select a workspace from the workspace switcher in the web interface to make changes to the infrastructure associated with that workspace directly.</p><p>The Terraform CLI is primarily used for running Terraform commands locally on your development machine. When working with Terraform Cloud, you typically interact with your workspaces through the web UI or by using Terraform Cloud's API.</p><p>The Terraform CLI does have a command (`terraform workspace`) to manage workspaces when using the local backend, but it's not necessary when using Terraform Cloud as your backend, as the web interface handles workspace management for you.</p><p><a href=\"https://developer.hashicorp.com/terraform/cloud-docs/workspaces\">https://developer.hashicorp.com/terraform/cloud-docs/workspaces</a></p>", "answers": ["<p>True</p>", "<p>False</p>"]}, "correct_response": ["b"], "section": "Objective 9 - Understand Terraform Cloud Capabilities", "question_plain": "True or False?&nbsp;Similar to Terraform OSS, you must use the CLI to switch between workspaces when using Terraform Cloud workspaces.", "related_lectures": []}, {"_class": "assessment", "id": 68069370, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Which of the following allows Terraform users to apply policy as code to enforce standardized configurations for resources being deployed via infrastructure as code?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p><a href=\"https://www.hashicorp.com/sentinel\">Sentinel</a> is an embedded policy-as-code framework integrated with the HashiCorp Enterprise products. It enables fine-grained, logic-based policy decisions, and can be extended to use information from external sources.</p><p><a href=\"https://www.hashicorp.com/sentinel\">https://www.hashicorp.com/sentinel</a></p>", "answers": ["<p>sentinel</p>", "<p>workspaces</p>", "<p>module registry</p>", "<p>functions</p>"]}, "correct_response": ["a"], "section": "Objective 9 - Understand Terraform Cloud Capabilities", "question_plain": "Which of the following allows Terraform users to apply policy as code to enforce standardized configurations for resources being deployed via infrastructure as code?", "related_lectures": []}, {"_class": "assessment", "id": 68069366, "assessment_type": "multiple-choice", "prompt": {"question": "<p><em>Select the answer below that completes the following statement:</em></p><p>Terraform Cloud can be managed from the CLI&nbsp;but requires __________? </p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>API and CLI access are managed with API tokens, which can be generated in the Terraform Cloud UI. Each user can generate any number of personal API tokens, which allow access with their own identity and permissions. Organizations and teams can also generate tokens for automating tasks that aren't tied to an individual user.</p><p><a href=\"https://developer.hashicorp.com/terraform/cloud-docs/users-teams-organizations/api-tokens\">https://developer.hashicorp.com/terraform/cloud-docs/users-teams-organizations/api-tokens</a></p>", "answers": ["<p>an API&nbsp;token</p>", "<p>authentication using MFA</p>", "<p>a TOTP token</p>", "<p>a username and password</p>"]}, "correct_response": ["a"], "section": "Objective 9 - Understand Terraform Cloud Capabilities", "question_plain": "Select the answer below that completes the following statement:Terraform Cloud can be managed from the CLI&nbsp;but requires __________?", "related_lectures": []}, {"_class": "assessment", "id": 68069378, "assessment_type": "multi-select", "prompt": {"question": "<p>When using variables in Terraform Cloud, what level of scope can the variable be applied to? (select three)</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Terraform Cloud allows you to store important values in one place, which you can use across multiple projects. You can easily update the values, and the changes will apply to all projects that use them. Additionally, you can modify the values for specific projects without affecting others that use the same values. TFC&nbsp;allows you to use variables within a workspace, or use variable sets that can be used across multiple (or all)&nbsp;TFC&nbsp;workspaces.</p><p><strong>Run-specific variables</strong> can be used by setting Terraform variable values using the <code>-var</code> and <code>-var-file</code> arguments in a single workspace</p><p>You can create a variable set by adding variables to the variable set and then applying a variable set scope so it can be used by <strong><em>multiple TFC workspaces</em></strong></p><p>You can also apply the variable set globally which will <strong><em>apply the variable set to all existing and future workspaces</em></strong></p><p><br></p><p><strong>Wrong Answer:</strong></p><p>Variable sets are constrained to a single organization. You can't create variable sets that can be used across multiple TFC organizations.</p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/cloud-docs/workspaces/variables\">https://developer.hashicorp.com/terraform/cloud-docs/workspaces/variables</a></p>", "answers": ["<p>A specific Terraform run in a single workspace</p>", "<p>Multiple workspaces using a variable set</p>", "<p>All current and future workspaces in a project using a variable set</p>", "<p>All workspaces across multiple Terraform Cloud organizations</p>"]}, "correct_response": ["a", "b", "c"], "section": "Objective 9 - Understand Terraform Cloud Capabilities", "question_plain": "When using variables in Terraform Cloud, what level of scope can the variable be applied to? (select three)", "related_lectures": []}, {"_class": "assessment", "id": 68069394, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Terraform language has built-in syntax for creating lists. Which of the following is the correct syntax to create a list in Terraform?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Terraform language has built-in syntax for creating lists using the [ and ] delimiters.</p><p><a href=\"https://developer.hashicorp.com/terraform/language/expressions/types#list\">https://developer.hashicorp.com/terraform/language/expressions/types#list</a></p>", "answers": ["<p><code>(\"string1\", \"string2\", \"string3\")</code> </p>", "<p><code>[\"string1\", \"string2\", \"string3\"]</code> </p>", "<p><code>{\"string1\", \"string2\", \"string3\"}</code> </p>", "<p><code>&lt;\"string1\", \"string2\", \"string3\"&gt;</code> </p>"]}, "correct_response": ["b"], "section": "Objective 8 - Read, Generate, and Modify Configuration", "question_plain": "Terraform language has built-in syntax for creating lists. Which of the following is the correct syntax to create a list in Terraform?", "related_lectures": []}, {"_class": "assessment", "id": 68069364, "assessment_type": "multiple-choice", "prompt": {"question": "<p>True or False?&nbsp;Workspaces provide similar functionality in the open-source and Terraform Cloud versions of Terraform.</p>", "relatedLectureIds": "", "feedbacks": ["", ""], "explanation": "<p>Workspaces, managed with the <code>terraform workspace</code> command, isn't the same thing as <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/workspaces\">Terraform Cloud's workspaces</a>. Terraform Cloud workspaces act more like completely separate working directories.</p><p><a href=\"https://developer.hashicorp.com/terraform/language/state/workspaces\">CLI workspaces</a> (OSS) are just alternate state files.</p>", "answers": ["<p>True</p>", "<p>False</p>"]}, "correct_response": ["b"], "section": "", "question_plain": "True or False?&nbsp;Workspaces provide similar functionality in the open-source and Terraform Cloud versions of Terraform.", "related_lectures": []}]}
5022888
~~~
{"count": 57, "next": null, "previous": null, "results": [{"_class": "assessment", "id": 70826530, "assessment_type": "multi-select", "prompt": {"question": "<p><em>Fill in the correct answers below:</em></p><p>Infrastructure as Code (IaC) makes infrastructure changes _______, ________, ________, and __________. (select four)</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", "", ""], "explanation": "<p>IaC makes changes idempotent, consistent, repeatable, and predictable. Without IaC, scaling up infrastructure to meet increased demand may require an operator to remotely connect to each machine and then manually provision and configure many servers by executing a series of commands/scripts. They might open multiple sessions and move between screens, which often results in skipped steps or slight variations between how work is completed, necessitating rollbacks. Perhaps a command was run incorrectly on one instance and reverted before being re-run correctly.</p><p><a href=\"https://www.hashicorp.com/blog/infrastructure-as-code-in-a-private-or-public-cloud\">https://www.hashicorp.com/blog/infrastructure-as-code-in-a-private-or-public-cloud</a></p>", "answers": ["<p>idempotent</p>", "<p>consistent</p>", "<p>repeatable</p>", "<p>predictable</p>", "<p>highly-available</p>"]}, "correct_response": ["a", "b", "c", "d"], "section": "Objective 1 - Understand Infrastructure as Code concepts", "question_plain": "Fill in the correct answers below:Infrastructure as Code (IaC) makes infrastructure changes _______, ________, ________, and __________. (select four)", "related_lectures": []}, {"_class": "assessment", "id": 70826528, "assessment_type": "multi-select", "prompt": {"question": "<p>Infrastructure as Code (IaC) provides many benefits to help organizations deploy application infrastructure much faster than clicking around in the console. What are the additional benefits of IaC? (select three)</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", "", ""], "explanation": "<p>Infrastructure is described using a high-level configuration syntax. This allows a blueprint of your datacenter to be versioned and treated as you would any other code. Additionally, infrastructure can be shared and re-used.</p><p>Infrastructure as Code almost always uses parallelism to deploy resources faster. And depending on the solution being used, it doesn't always have access to the latest features and services available on cloud platforms or other solutions.</p><p><a href=\"https://developer.hashicorp.com/terraform/intro#infrastructure-as-code\">https://developer.hashicorp.com/terraform/intro#infrastructure-as-code</a></p>", "answers": ["<p>eliminates parallelism </p>", "<p>creates a blueprint of your data center</p>", "<p>allows infrastructure to be versioned</p>", "<p>code can easily be shared and reused</p>", "<p>can always be used to deploy the latest features and services</p>"]}, "correct_response": ["b", "c", "d"], "section": "Objective 1 - Understand Infrastructure as Code concepts", "question_plain": "Infrastructure as Code (IaC) provides many benefits to help organizations deploy application infrastructure much faster than clicking around in the console. What are the additional benefits of IaC? (select three)", "related_lectures": []}, {"_class": "assessment", "id": 70826466, "assessment_type": "multiple-choice", "prompt": {"question": "<p>True or False?&nbsp;Terraform is designed to work only with public cloud platforms, and organizations that wish to use it for on-premises infrastructure (private cloud) should look for an alternative solution.</p>", "relatedLectureIds": "", "feedbacks": ["", ""], "explanation": "<p>Terraform is designed to work with almost any infrastructure that provides an API. Terraform is very frequently used to provision infrastructure atop VMware infrastructure, along with traditional, physical security or infrastructure service solutions. </p><p>Additional information can be found in this article - <a href=\"https://www.hashicorp.com/blog/infrastructure-as-code-in-a-private-or-public-cloud\">https://www.hashicorp.com/blog/infrastructure-as-code-in-a-private-or-public-cloud</a></p>", "answers": ["<p>True</p>", "<p>False</p>"]}, "correct_response": ["b"], "section": "Objective 1 - Understand Infrastructure as Code concepts", "question_plain": "True or False?&nbsp;Terraform is designed to work only with public cloud platforms, and organizations that wish to use it for on-premises infrastructure (private cloud) should look for an alternative solution.", "related_lectures": []}, {"_class": "assessment", "id": 70826526, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Which of the following is not a benefit of Terraform state?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Terraform state is required and there are many benefits that are outlined in this documentation: </p><p><a href=\"https://developer.hashicorp.com/terraform/language/state/purpose\">https://developer.hashicorp.com/terraform/language/state/purpose</a></p>", "answers": ["<p>increases performance by reducing the requirement to query multiple resources at once</p>", "<p>determines the dependency order for deployed resources</p>", "<p>provides a one-to-one mapping of the configuration to real-world resources</p>", "<p>reduces the amount of outbound traffic by requiring that state is stored locally</p>"]}, "correct_response": ["d"], "section": "Objective 2 - Understand Terraform's Purpose (vs other IAC)", "question_plain": "Which of the following is not a benefit of Terraform state?", "related_lectures": []}, {"_class": "assessment", "id": 70826468, "assessment_type": "multi-select", "prompt": {"question": "<p>Aaron is new to Terraform and has a single configuration file that is ready to be deployed. Which of the following can be true about this configuration file? (select three)</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>There are a ton of benefits of deploying with Terraform and the solution is very capable of managing deployments across multiple clouds. However, state is still required and cannot be disabled.</p><p><a href=\"https://developer.hashicorp.com/terraform/intro/use-cases#multi-cloud-deployment\">https://developer.hashicorp.com/terraform/intro/use-cases#multi-cloud-deployment</a></p>", "answers": ["<p>Aaron's configuration file can deploy applications in both AWS and GCP</p>", "<p>the state file can be stored in Azure but provision applications in AWS</p>", "<p>the configuration file can deploy both QA and Staging infrastructure for applications</p>", "<p>the state can be disabled when deploying to multiple clouds to prevent sensitive data from being shared across cloud platforms</p>"]}, "correct_response": ["a", "b", "c"], "section": "Objective 2 - Understand Terraform's Purpose (vs other IAC)", "question_plain": "Aaron is new to Terraform and has a single configuration file that is ready to be deployed. Which of the following can be true about this configuration file? (select three)", "related_lectures": []}, {"_class": "assessment", "id": 70826524, "assessment_type": "multi-select", "prompt": {"question": "<p>There are an endless number of benefits to using Terraform within your organization. Which of the following are true statements regarding Terraform? (select three)</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>All of the answers are benefits to using Terraform, except <code>Terraform can manage dependencies within a single cloud, but not cross-cloud</code>. Terraform isn't limited to <strong><em>only </em></strong>managing dependencies for a single cloud, it can manage dependencies across multiple cloud providers as well.</p><p><a href=\"https://developer.hashicorp.com/terraform/intro/use-cases#multi-cloud-deployment\">https://developer.hashicorp.com/terraform/intro/use-cases#multi-cloud-deployment</a></p>", "answers": ["<p>Terraform is cloud-agnostic but requires a specific provider for the cloud platform</p>", "<p>Terraform can manage dependencies within a single cloud, but not cross-cloud</p>", "<p>A single Terraform configuration file can be used to manage multiple providers</p>", "<p>Terraform can simplify both management and orchestration of deploying large-scale, multi-cloud infrastructure</p>"]}, "correct_response": ["a", "c", "d"], "section": "Objective 2 - Understand Terraform's Purpose (vs other IAC)", "question_plain": "There are an endless number of benefits to using Terraform within your organization. Which of the following are true statements regarding Terraform? (select three)", "related_lectures": []}, {"_class": "assessment", "id": 70826426, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Using the Terraform code below, where will the resource be provisioned?</p><p><br></p><pre class=\"prettyprint linenums\">provider \"aws\" {\n  region = \"us-east-1\"\n}\n\nprovider \"aws\" {\n  alias  = \"west\"\n  region = \"us-west-2\"\n}\n\nprovider \"aws\" {\n  alias  = \"eu\"\n  region = \"eu-west-2\"\n}\n\nresource \"aws_instance\" \"vault\" {\n  ami                         = data.aws_ami.amzlinux2.id\n  instance_type               = \"t3.micro\"\n  key_name                    = \"krausen_key\"\n  vpc_security_group_ids      = var.vault_sg\n  subnet_id                   = var.vault_subnet\n  user_data                   = file(\"vault.sh\")\n\n  tags = {\n    Name = \"vault\"\n  }\n}</pre><p><br></p>", "relatedLectureIds": "", "feedbacks": ["", "", ""], "explanation": "<p>The resource above will be created in the default region of us-east-1, since the resource does signify an alternative provider configuration. If the resource needs to be created in one of the other declared regions, it should have looked like this, where \"aws\" signifies the provider name and \"west\" signifies the alias name as such &lt;PROVIDER NAME&gt;.&lt;ALIAS&gt;:</p><p><br></p><pre class=\"prettyprint linenums\">resource \"aws_instance\" \"vault\" {\n  provider                    = aws.west\n  ami                         = data.aws_ami.amzlinux2.id\n  instance_type               = \"t3.micro\"\n  key_name                    = \"krausen_key\"\n  vpc_security_group_ids      = var.vault_sg\n  subnet_id                   = var.vault_subnet\n  user_data                   = file(\"vault.sh\")\n\n  tags = {\n    Name = \"vault\"\n  }\n}</pre><p><a href=\"https://developer.hashicorp.com/terraform/language/providers/configuration#selecting-alternate-provider-configurations\">https://developer.hashicorp.com/terraform/language/providers/configuration#selecting-alternate-provider-configurations</a></p>", "answers": ["<p>us-east-1</p>", "<p>us-west-2</p>", "<p>us-west-1</p>"]}, "correct_response": ["a"], "section": "Objective 3 - Understand Terraform Basics", "question_plain": "Using the Terraform code below, where will the resource be provisioned?provider \"aws\" {\n  region = \"us-east-1\"\n}\n\nprovider \"aws\" {\n  alias  = \"west\"\n  region = \"us-west-2\"\n}\n\nprovider \"aws\" {\n  alias  = \"eu\"\n  region = \"eu-west-2\"\n}\n\nresource \"aws_instance\" \"vault\" {\n  ami                         = data.aws_ami.amzlinux2.id\n  instance_type               = \"t3.micro\"\n  key_name                    = \"krausen_key\"\n  vpc_security_group_ids      = var.vault_sg\n  subnet_id                   = var.vault_subnet\n  user_data                   = file(\"vault.sh\")\n\n  tags = {\n    Name = \"vault\"\n  }\n}", "related_lectures": []}, {"_class": "assessment", "id": 70826522, "assessment_type": "multiple-choice", "prompt": {"question": "<p>A provider alias is used for what purpose in a Terraform configuration file?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>To create multiple configurations for a given provider, include multiple <code>provider</code> blocks with the same provider name. For each additional non-default configuration, use the <code>alias</code> meta-argument to provide an extra name segment.</p><p><a href=\"https://developer.hashicorp.com/terraform/language/providers/configuration\">https://developer.hashicorp.com/terraform/language/providers/configuration</a></p>", "answers": ["<p>using the same provider with different configurations for different resources</p>", "<p>to use as shorthand for resources to be deployed with the referenced provider</p>", "<p>to signify what resources should be deployed to a certain cloud provider</p>", "<p>alias isn't used with providers, they are used with provisioners</p>"]}, "correct_response": ["a"], "section": "Objective 3 - Understand Terraform Basics", "question_plain": "A provider alias is used for what purpose in a Terraform configuration file?", "related_lectures": []}, {"_class": "assessment", "id": 70826520, "assessment_type": "multiple-choice", "prompt": {"question": "<p>What feature of Terraform provides an abstraction above the upstream API and is responsible for understanding API interactions and exposing resources?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Terraform relies on plugins called \"providers\" to interact with remote systems.</p><p>Terraform configurations must declare which providers they require so that Terraform can install and use them. Additionally, some providers require configuration (like endpoint URLs or cloud regions) before they can be used.</p><p><a href=\"https://developer.hashicorp.com/terraform/language/providers\">https://developer.hashicorp.com/terraform/language/providers</a></p>", "answers": ["<p>Terraform provider</p>", "<p>Terraform provisioner</p>", "<p>Terraform backend</p>", "<p>Terraform configuration file</p>"]}, "correct_response": ["a"], "section": "Objective 3 - Understand Terraform Basics", "question_plain": "What feature of Terraform provides an abstraction above the upstream API and is responsible for understanding API interactions and exposing resources?", "related_lectures": []}, {"_class": "assessment", "id": 70826458, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Based on the Terraform code below, what block type is used to define the VPC?</p><p><br></p><pre class=\"prettyprint linenums\">vpc_id = aws_vpc.main.id\n...</pre>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Based on the Terraform code provided in the question, the VPC is defined in a resource block, meaning that there is a VPC resource being defined, such as:</p><p><br></p><pre class=\"prettyprint linenums\">resource \"aws_vpc\" \"main\" {\n  cidr_block = var.base_cidr_block\n}</pre><p>If it were locals, the resource would be referred to as <code>local.aws_vpc</code></p><p>If it were in a data block, it would be referred to as <code>data.aws_vpc.i.main.id</code> </p><p><a href=\"https://developer.hashicorp.com/terraform/language/resources\">https://developer.hashicorp.com/terraform/language/resources</a></p>", "answers": ["<p><code>resource</code> block</p>", "<p><code>locals</code> block</p>", "<p><code>data</code> block</p>", "<p><code>provider</code> block</p>"]}, "correct_response": ["a"], "section": "Objective 3 - Understand Terraform Basics", "question_plain": "Based on the Terraform code below, what block type is used to define the VPC?vpc_id = aws_vpc.main.id\n...", "related_lectures": []}, {"_class": "assessment", "id": 70826460, "assessment_type": "multiple-choice", "prompt": {"question": "<p><em>Scenario</em>:&nbsp;You are deploying a new application and want to deploy it to multiple AWS regions within the same configuration file. Which of the following features will allow you to configure this?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>You can optionally define multiple configurations for the same provider, and select which one to use on a per-resource or per-module basis. The primary reason for this is to support multiple regions for a cloud platform; other examples include targeting multiple Docker hosts, multiple Consul hosts, etc.</p><p><a href=\"https://developer.hashicorp.com/terraform/language/providers/configuration#alias-multiple-provider-configurations\">https://developer.hashicorp.com/terraform/language/providers/configuration#alias-multiple-provider-configurations</a></p>", "answers": ["<p>multiple provider blocks using an alias</p>", "<p>one provider block that defines multiple regions</p>", "<p>a provider with multiple versions defined</p>", "<p>using the default provider along with a single defined provider</p>"]}, "correct_response": ["a"], "section": "Objective 3 - Understand Terraform Basics", "question_plain": "Scenario:&nbsp;You are deploying a new application and want to deploy it to multiple AWS regions within the same configuration file. Which of the following features will allow you to configure this?", "related_lectures": []}, {"_class": "assessment", "id": 70826436, "assessment_type": "multi-select", "prompt": {"question": "<p>When using a Terraform provider, it's common that Terraform needs credentials to access the API for the underlying platform, such as VMware, AWS, or Google Cloud. While there are many ways to accomplish this, what are three options that you can provide these credentials? (select three)</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>You can use methods such as static credentials, environment variables, share credentials/configuration file, or other methods. For example, the AWS provider can use many different options as seen here: </p><p><a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs#authentication\">https://registry.terraform.io/providers/hashicorp/aws/latest/docs#authentication</a></p><p>Each provider is different, and you should check the documentation to see what is supported for each one you want to use.</p>", "answers": ["<p>directly in the provider block by hardcoding or using a variable</p>", "<p>use environment variables</p>", "<p>integrated services, such as AWS IAM or Azure Managed Service Identity</p>", "<p>using a remote backend</p>"]}, "correct_response": ["a", "b", "c"], "section": "Objective 3 - Understand Terraform Basics", "question_plain": "When using a Terraform provider, it's common that Terraform needs credentials to access the API for the underlying platform, such as VMware, AWS, or Google Cloud. While there are many ways to accomplish this, what are three options that you can provide these credentials? (select three)", "related_lectures": []}, {"_class": "assessment", "id": 70826456, "assessment_type": "multiple-choice", "prompt": {"question": "<p>True or False?&nbsp;A <code>main.tf</code> file is always required when using Terraform?</p>", "relatedLectureIds": "", "feedbacks": ["", ""], "explanation": "<p>Although main.tf is the standard name, it's not necessarily required. Terraform will look for any file with a <code>.tf</code> or <code>.tf.json</code> extension when running terraform commands.</p><p><a href=\"https://developer.hashicorp.com/terraform/language#code-organization\">https://developer.hashicorp.com/terraform/language#code-organization</a></p>", "answers": ["<p>True</p>", "<p>False</p>"]}, "correct_response": ["b"], "section": "Objective 3 - Understand Terraform Basics", "question_plain": "True or False?&nbsp;A main.tf file is always required when using Terraform?", "related_lectures": []}, {"_class": "assessment", "id": 70826472, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Michael has deployed many resources in AWS using Terraform and can easily update or destroy resources when required by the application team. A new employee, Dwight, is working with the application team and deployed a new EC2 instance through the AWS console. When Michael finds out, he decided he wants to manage the new EC2 instance using Terraform moving forward. He opens his terminal and types:</p><p><code>$ terraform import aws_instance.web_app_42 i-b54a26b28b8acv7233</code></p><p>However, Terraform returns the following error: <code>Error: resource address \"aws_instance.web_app_42\" does not exist in the configuration.</code> </p><p><strong><em>What does Michael need to do first in order to manage the new Amazon&nbsp;EC2 instance with Terraform?</em></strong></p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>The <code>terraform import</code> command is used to <a href=\"https://developer.hashicorp.com/terraform/cli/import\">import existing resources</a> into Terraform. However, Terraform will not create a configuration for the imported resource. The Terraform operator must create/add a configuration for the resource that will be imported first. Once the configuration is added to the configuration file, the <code>terraform import</code> command can be executed to manage the resource using Terraform.</p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/import\">https://developer.hashicorp.com/terraform/cli/commands/import</a></p>", "answers": ["<p>create a configuration for the new resource in the Terraform configuration file, such as:</p><pre class=\"prettyprint linenums\">resource \"aws_instance\" \"web_app_42\" {\n  # (resource arguments)\n}</pre>", "<p>import the configuration of the EC2 instance called <code>web_app_42</code> from AWS first</p>", "<p>Terraform cannot manage resources that were provisioned manually </p>", "<p>configure the appropriate tags on the Amazon EC2 resource so Terraform knows that it should manage the resource moving forward</p>"]}, "correct_response": ["a"], "section": "Objective 4 - Use Terraform Outside of Core Workflow", "question_plain": "Michael has deployed many resources in AWS using Terraform and can easily update or destroy resources when required by the application team. A new employee, Dwight, is working with the application team and deployed a new EC2 instance through the AWS console. When Michael finds out, he decided he wants to manage the new EC2 instance using Terraform moving forward. He opens his terminal and types:$ terraform import aws_instance.web_app_42 i-b54a26b28b8acv7233However, Terraform returns the following error: Error: resource address \"aws_instance.web_app_42\" does not exist in the configuration. What does Michael need to do first in order to manage the new Amazon&nbsp;EC2 instance with Terraform?", "related_lectures": []}, {"_class": "assessment", "id": 70826482, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Larissa is an experienced IT professional and is working to learn Terraform to manage the F5 load balancers that front-end customer-facing applications. Larissa writes great code, but her formatting seldom meets the Terraform canonical formatting and style recommended by HashiCorp. What built-in tool or command can Larissa use to easily format her code to meet the recommendations for formatting Terraform code?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>The <code>terraform fmt</code> command is used to rewrite Terraform configuration files to a canonical format and style. This command applies a subset of the <a href=\"https://developer.hashicorp.com/terraform/language/syntax/style\">Terraform language style conventions</a>, along with other minor adjustments for readability.</p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/fmt\">https://developer.hashicorp.com/terraform/cli/commands/fmt</a></p>", "answers": ["<p><code>terraform fmt</code> </p>", "<p><code>terraform plan</code> </p>", "<p><code>terraform env</code> </p>", "<p><code>terraform validate</code> </p>"]}, "correct_response": ["a"], "section": "Objective 4 - Use Terraform Outside of Core Workflow", "question_plain": "Larissa is an experienced IT professional and is working to learn Terraform to manage the F5 load balancers that front-end customer-facing applications. Larissa writes great code, but her formatting seldom meets the Terraform canonical formatting and style recommended by HashiCorp. What built-in tool or command can Larissa use to easily format her code to meet the recommendations for formatting Terraform code?", "related_lectures": []}, {"_class": "assessment", "id": 70826478, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Terraform has detailed logs that can be enabled using the <code>TF_LOG</code> environment variable. Which of the following log levels is the most verbose, meaning it will log the most specific logs?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>You can set <code>TF_LOG</code> to one of the log levels <code>TRACE</code>, <code>DEBUG</code>, <code>INFO</code>, <code>WARN</code> or <code>ERROR</code> to change the verbosity of the logs. <code>TRACE</code> is the most verbose and it is the default if <code>TF_LOG</code> is set to something other than a log level name.</p><p><a href=\"https://developer.hashicorp.com/terraform/internals/debugging\">https://developer.hashicorp.com/terraform/internals/debugging</a></p>", "answers": ["<p><code>TRACE</code> </p>", "<p><code>DEBUG</code> </p>", "<p><code>ERROR</code> </p>", "<p><code>INFO</code> </p>"]}, "correct_response": ["a"], "section": "Objective 4 - Use Terraform Outside of Core Workflow", "question_plain": "Terraform has detailed logs that can be enabled using the TF_LOG environment variable. Which of the following log levels is the most verbose, meaning it will log the most specific logs?", "related_lectures": []}, {"_class": "assessment", "id": 70826480, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Jeff is a DevOps Engineer for a large company and is currently managing the infrastructure for many different applications using Terraform. Recently, Jeff received a request to remove a specific VMware virtual machine from Terraform as the application team no longer needs it. Jeff opens his terminal and issues the command:</p><p><br></p><pre class=\"prettyprint linenums\">$&nbsp;terraform state rm vsphere_virtual_machine.app1\n\nRemoved vsphere_virtual_machine.app1\nSuccessfully removed 1 resource instance(s).</pre><p><br></p><p>The next time that Jeff runs a <code>terraform apply</code>, the resource is not marked to be deleted. In fact, Terraform is stating that it is creating another identical resource.</p><p><br></p><pre class=\"prettyprint linenums\">.....\nAn execution plan has been generated and is shown below.  \nResource actions are indicated with the following symbols:\n  + create\n\nTerraform will perform the following actions:\n\n  # vsphere_virtual_machine.app1 will be created</pre><p><br></p><p>What would explain this behavior? </p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Because Jeff manually deleted the resource from the state file, Terraform was no longer aware of the virtual machine. When Jeff ran a <code>terraform apply</code>, it refreshed the state file and discovered that the configuration file declared a virtual machine but it was not in state, therefore Terraform needed to create a virtual machine so the provisioned infrastructure matched the desired configuration, which is the Terraform configuration file.</p><p>Hopefully, this isn't a tricky one but I thought it was good to test on, especially since <code>terraform state</code> commands are listed in Objective 4 of the exam. In this case, Jeff should NOT have removed the resource from the state file, but rather remove it from the configuration file and run a <code>terraform plan/apply</code>. In this scenario, Terraform would recognize that the virtual machine was no longer needed and would have destroyed it.</p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/state/list\">https://developer.hashicorp.com/terraform/cli/commands/state/list</a></p>", "answers": ["<p>Jeff removed the resource from the <em>state file</em>, and not the <em>configuration file</em>. Therefore, Terraform is no longer aware of the virtual machine and assumes Jeff wants to create a new one since the virtual machine is still in the Terraform configuration file</p>", "<p>after running the terraform rm command, Jeff needs to run a Terraform plan first to tell Terraform of the updated configuration. A plan will instruct Terraform that the resource should be deleted upon the next <code>terraform apply</code></p>", "<p>the resource was manually deleted within the VMware infrastructure and needs to be recreated </p>", "<p>the state file was not saved before the <code>terraform apply</code> was executed, therefore Terraform sees that the resource is still in the state file</p>"]}, "correct_response": ["a"], "section": "Objective 4 - Use Terraform Outside of Core Workflow", "question_plain": "Jeff is a DevOps Engineer for a large company and is currently managing the infrastructure for many different applications using Terraform. Recently, Jeff received a request to remove a specific VMware virtual machine from Terraform as the application team no longer needs it. Jeff opens his terminal and issues the command:$&nbsp;terraform state rm vsphere_virtual_machine.app1\n\nRemoved vsphere_virtual_machine.app1\nSuccessfully removed 1 resource instance(s).The next time that Jeff runs a terraform apply, the resource is not marked to be deleted. In fact, Terraform is stating that it is creating another identical resource......\nAn execution plan has been generated and is shown below.  \nResource actions are indicated with the following symbols:\n  + create\n\nTerraform will perform the following actions:\n\n  # vsphere_virtual_machine.app1 will be createdWhat would explain this behavior?", "related_lectures": []}, {"_class": "assessment", "id": 70826476, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Pam just finished up a new Terraform configuration file and has successfully deployed the configuration on Azure using Terraform open-source. After confirming the configuration on Azure, Pam changes to a new workspace and then heads to lunch. When she arrives back at her desk, Pam decides to destroy the resources to save on cost. When Pam executes a <code>terraform destroy</code>, the output indicates there are no resources to delete.</p><p><em>Why can't Pam delete the newly created resources in Azure?</em></p><p><br></p><pre class=\"prettyprint linenums\">$&nbsp;terraform destroy\n\nAn execution plan has been generated and is shown below.  \nResource actions are indicated with the following symbols:\n\nTerraform will perform the following actions:\n\nPlan: 0 to add, 0 to change, 0 to destroy.\n</pre>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Workspaces isolate their state, so if Pam runs a <code>terraform destroy</code>, Terraform will not see any existing state for this configuration. Pam may use the command <code>terraform workspace select &lt;name&gt;</code> to choose the original workspace where the Azure resources were provisioned in order to properly destroy them in Azure.</p><p><a href=\"https://developer.hashicorp.com/terraform/cli/workspaces\">https://developer.hashicorp.com/terraform/cli/workspaces</a></p>", "answers": ["<p>there is no Terraform state in the current workspace she is working in</p>", "<p>Terraform reached the maximum timeout while Pam was away from lunch, therefore the resources were automatically destroyed</p>", "<p>an Azure administrator manually deleted the resources</p>", "<p>the Terraform state was deleted when she created the new workspace</p>"]}, "correct_response": ["a"], "section": "Objective 4 - Use Terraform Outside of Core Workflow", "question_plain": "Pam just finished up a new Terraform configuration file and has successfully deployed the configuration on Azure using Terraform open-source. After confirming the configuration on Azure, Pam changes to a new workspace and then heads to lunch. When she arrives back at her desk, Pam decides to destroy the resources to save on cost. When Pam executes a terraform destroy, the output indicates there are no resources to delete.Why can't Pam delete the newly created resources in Azure?$&nbsp;terraform destroy\n\nAn execution plan has been generated and is shown below.  \nResource actions are indicated with the following symbols:\n\nTerraform will perform the following actions:\n\nPlan: 0 to add, 0 to change, 0 to destroy.", "related_lectures": []}, {"_class": "assessment", "id": 70826474, "assessment_type": "multi-select", "prompt": {"question": "<p>Which of the following Terraform CLI&nbsp;commands are valid? (select five)</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", "", "", "", ""], "explanation": "<p><code>terraform delete</code> and <code>terraform initialize</code> are not valid Terraform CLI commands.</p><p><strong><em>Correct Answers:</em></strong></p><p>The <code>terraform apply -refresh-only</code> command creates a plan whose goal is only to update the Terraform state and any root module output values to match changes made to remote objects outside of Terraform.</p><p>he <code>terraform fmt</code> command is used to rewrite Terraform configuration files to a canonical format and style.</p><p>The <code>terraform workspace select</code> command is used to choose a different workspace to use for further operations.</p><p>The <code>terraform show</code> command is used to provide human-readable output from a state or plan file. This can be used to inspect a plan to ensure that the planned operations are expected, or to inspect the current state as Terraform sees it.</p><p>The <code>terraform login</code> command can be used to automatically obtain and save an API token for Terraform Cloud, Terraform Enterprise, or any other host that offers Terraform services.</p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/fmt\">https://developer.hashicorp.com/terraform/cli/commands/fmt</a></p>", "answers": ["<p><code>terraform apply -refresh-only</code> </p>", "<p><code>$&nbsp;terraform fmt</code> </p>", "<p><code>$ terraform workspace select</code> </p>", "<p><code>$&nbsp;terraform delete</code> </p>", "<p><code>$&nbsp;terraform show</code> </p>", "<p><code>$&nbsp;terraform login</code> </p>", "<p><code>$&nbsp;terraform initialize</code> </p>"]}, "correct_response": ["a", "b", "c", "e", "f"], "section": "Objective 4 - Use Terraform Outside of Core Workflow", "question_plain": "Which of the following Terraform CLI&nbsp;commands are valid? (select five)", "related_lectures": []}, {"_class": "assessment", "id": 70826510, "assessment_type": "multi-select", "prompt": {"question": "<p>Which of the following are the benefits of using <em>modules</em> in Terraform? (select three)</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>All of these are examples of the benefits of using Terraform modules except where they can be stored. Modules can only be supported in certain sources found at the following link:</p><p><a href=\"https://developer.hashicorp.com/terraform/language/modules/sources\">https://developer.hashicorp.com/terraform/language/modules/sources</a></p>", "answers": ["<p>enables code reuse</p>", "<p>supports versioning to maintain compatibility</p>", "<p>supports modules stored locally or remotely</p>", "<p>allows modules to be stored anywhere accessible by Terraform</p>"]}, "correct_response": ["a", "b", "c"], "section": "Objective 5 - Interact with Terraform Modules", "question_plain": "Which of the following are the benefits of using modules in Terraform? (select three)", "related_lectures": []}, {"_class": "assessment", "id": 70826518, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Margaret is calling a child module to deploy infrastructure for her organization. Just as a good architect does (and suggested by HashiCorp), she specifies the module version she wants to use even though there are newer versions available. During a <code>terrafom init</code>, Terraform downloads v0.0.5 just as expected. </p><p>What would happen if Margaret removed the version parameter in the module block and ran a <code>terraform init</code> again?</p><p><br></p><pre class=\"prettyprint linenums\">module \"consul\" {\n  source  = \"hashicorp/consul/aws\"\n  version = \"0.0.5\"\n\n  servers = 3\n}</pre>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>When using modules installed from a module registry, HashiCorp recommends explicitly constraining the acceptable version numbers to avoid unexpected or unwanted changes. The <code>version</code> argument accepts a <a href=\"https://developer.hashicorp.com/terraform/language/expressions/version-constraints\">version constraint string</a>. Terraform will use the newest installed version of the module that meets the constraint; if no acceptable versions are installed, it will download the newest version that meets the constraint.</p><p>A version number that meets every applicable constraint is considered acceptable.</p><p>Terraform consults version constraints to determine whether it has acceptable versions of itself, any required provider plugins, and any required modules. For plugins and modules, it will use the newest installed version that meets the applicable constraints.</p><p><strong>To test this, I ran a </strong><code><strong>terraform init</strong></code><strong> with the code as shown in the file:</strong></p><pre class=\"prettyprint linenums\">$ terraform init\nInitializing modules...\nDownloading hashicorp/consul/aws 0.0.5 for consul...\n- consul in .terraform\\modules\\consul\n- consul.consul_clients in .terraform\\modules\\consul\\modules\\consul-cluster\n- consul.consul_clients.iam_policies in .terraform\\modules\\consul\\modules\\consul-iam-policies\n- consul.consul_clients.security_group_rules in .terraform\\modules\\consul\\modules\\consul-security-group-rules\n- consul.consul_servers in .terraform\\modules\\consul\\modules\\consul-cluster\n- consul.consul_servers.iam_policies in .terraform\\modules\\consul\\modules\\consul-iam-policies\n- consul.consul_servers.security_group_rules in .terraform\\modules\\consul\\modules\\consul-security-group-rules</pre><p><strong>Then I removed the constraint from the configuration file and ran a terraform init again:</strong></p><pre class=\"prettyprint linenums\">$ terraform init\nInitializing modules...\n\nInitializing the backend...\n\nInitializing provider plugins...\n- Reusing previous version of hashicorp/aws from the dependency lock file\n- Reusing previous version of hashicorp/template from the dependency lock file</pre><p><strong><em>Terraform did not download a newer version of the module. It reused the existing one.</em></strong></p><p><a href=\"https://developer.hashicorp.com/terraform/language/modules/syntax#version\">https://developer.hashicorp.com/terraform/language/modules/syntax#version</a></p><p><a href=\"https://developer.hashicorp.com/terraform/language/expressions/version-constraints\">https://developer.hashicorp.com/terraform/language/expressions/version-constraints</a></p>", "answers": ["<p>Terraform would use the existing module already downloaded</p>", "<p>Terraform would download the latest version of the module</p>", "<p>Terraform would return an error, as the <code>version</code> parameter is required</p>", "<p>Terraform would skip the module</p>"]}, "correct_response": ["a"], "section": "Objective 5 - Interact with Terraform Modules", "question_plain": "Margaret is calling a child module to deploy infrastructure for her organization. Just as a good architect does (and suggested by HashiCorp), she specifies the module version she wants to use even though there are newer versions available. During a terrafom init, Terraform downloads v0.0.5 just as expected. What would happen if Margaret removed the version parameter in the module block and ran a terraform init again?module \"consul\" {\n  source  = \"hashicorp/consul/aws\"\n  version = \"0.0.5\"\n\n  servers = 3\n}", "related_lectures": []}, {"_class": "assessment", "id": 70826516, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Rigby is implementing Terraform and was given a configuration that includes the snippet below. Where is this particular module stored?</p><p><br></p><pre class=\"prettyprint linenums\">module \"consul\" {\n  source = \"hashicorp/consul/aws\"\n  version = \"0.1.0\"\n}</pre>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Modules on the public Terraform Registry can be referenced using a registry source address of the form <code>&lt;NAMESPACE&gt;/&lt;NAME&gt;/&lt;PROVIDER&gt;</code>, with each module's information page on the registry site including the exact address to use.</p><p><a href=\"https://developer.hashicorp.com/terraform/language/modules/sources#terraform-registry\">https://developer.hashicorp.com/terraform/language/modules/sources#terraform-registry</a></p>", "answers": ["<p>public Terraform registry</p>", "<p>locally in the <code>hashicorp/consul/aws directory</code> </p>", "<p>a private module registry supported by your organization</p>", "<p>locally but a directory back from the current directory</p>"]}, "correct_response": ["a"], "section": "Objective 5 - Interact with Terraform Modules", "question_plain": "Rigby is implementing Terraform and was given a configuration that includes the snippet below. Where is this particular module stored?module \"consul\" {\n  source = \"hashicorp/consul/aws\"\n  version = \"0.1.0\"\n}", "related_lectures": []}, {"_class": "assessment", "id": 70826512, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Given the following snippet of code, what does <code>servers = 4</code> reference?</p><pre class=\"prettyprint linenums\">module \"servers\" {\n  source = \"./modules/aws-servers\"\n\n  servers = 4\n}</pre>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>When calling a child module, values can be passed to the module to be used within the module itself.</p><p><a href=\"https://developer.hashicorp.com/terraform/language/modules/develop/composition\">https://developer.hashicorp.com/terraform/language/modules/develop/composition</a></p>", "answers": ["<p>the value of an input variable</p>", "<p>the number of times the module will be executed</p>", "<p>the output variable of the module</p>", "<p><code>servers</code> is not a valid configuration for a module</p>"]}, "correct_response": ["a"], "section": "Objective 5 - Interact with Terraform Modules", "question_plain": "Given the following snippet of code, what does servers = 4 reference?module \"servers\" {\n  source = \"./modules/aws-servers\"\n\n  servers = 4\n}", "related_lectures": []}, {"_class": "assessment", "id": 70826514, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Teddy is using Terraform to deploy infrastructure using modules. Where is the module below stored?</p><p><br></p><pre class=\"prettyprint linenums\">module \"monitoring_tools\" {\n  source = \"./modules/monitoring_tools\"\n\n  cluster_hostname = module.k8s_cluster.hostname\n}</pre>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>A local path must begin with either <code>./</code> or <code>../</code> to indicate that a local path is intended, to distinguish from <a href=\"https://developer.hashicorp.com/terraform/language/modules/sources#terraform-registry\">a module registry address</a>.</p><p><a href=\"https://developer.hashicorp.com/terraform/language/modules/sources#terraform-registry\">https://developer.hashicorp.com/terraform/language/modules/sources#terraform-registry</a></p>", "answers": ["<p>locally on the instance running Terraform</p>", "<p>on the Terraform public module registry</p>", "<p>a private module registry in Terraform Cloud (free)</p>", "<p>in a public GitLab repository</p>"]}, "correct_response": ["a"], "section": "Objective 5 - Interact with Terraform Modules", "question_plain": "Teddy is using Terraform to deploy infrastructure using modules. Where is the module below stored?module \"monitoring_tools\" {\n  source = \"./modules/monitoring_tools\"\n\n  cluster_hostname = module.k8s_cluster.hostname\n}", "related_lectures": []}, {"_class": "assessment", "id": 70826500, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Philip works at a payment processing company and manages the organization's VMware environment. He recently provisioned a new cluster for a production environment. To ensure everything is working as expected, Philip has been using Terraform and the VMware vSphere client to create and destroy new virtual machines. Currently, there are three virtual machines running on the new cluster, so Philip runs <code>terraform destroy</code> to remove the remaining virtual machines from the cluster. However, Terraform only removes two of the virtual machines, leaving one virtual machine still running. </p><p>Why would Terraform only remove two of the three virtual machines?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>The <code>terraform destroy</code> command terminates resources defined in your Terraform configuration. This command is the reverse of <code>terraform apply</code> in that it terminates all the resources specified by the configuration. It does <em>not</em> destroy resources running elsewhere that are not described in the current configuration.</p><p><a href=\"https://learn.hashicorp.com/tutorials/terraform/aws-destroy\">https://learn.hashicorp.com/tutorials/terraform/aws-destroy</a></p>", "answers": ["<p>the remaining virtual machine was not created by Terraform, therefore Terraform is not aware of the virtual machine and cannot destroy it</p>", "<p>the virtual machine was marked with vSphere tags to prevent it from being destroyed</p>", "<p>Terraform can only destroy a maximum of 2 resources per <code>terraform destroy</code> execution</p>", "<p>the vSphere provider credentials are invalid, and therefore Terraform cannot reach the third virtual machine</p>"]}, "correct_response": ["a"], "section": "Objective 6 - Use the Core Terraform Workflow", "question_plain": "Philip works at a payment processing company and manages the organization's VMware environment. He recently provisioned a new cluster for a production environment. To ensure everything is working as expected, Philip has been using Terraform and the VMware vSphere client to create and destroy new virtual machines. Currently, there are three virtual machines running on the new cluster, so Philip runs terraform destroy to remove the remaining virtual machines from the cluster. However, Terraform only removes two of the virtual machines, leaving one virtual machine still running. Why would Terraform only remove two of the three virtual machines?", "related_lectures": []}, {"_class": "assessment", "id": 70826430, "assessment_type": "multi-select", "prompt": {"question": "<p>What happens when you apply a Terraform configuration using <code>terraform apply</code>? (select two)</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", "", ""], "explanation": "<p>The <code>terraform apply</code> command is used to apply the changes required to reach the desired state of the configuration, or the pre-determined set of actions generated by a <code>terraform plan</code> execution plan.</p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/apply\">https://developer.hashicorp.com/terraform/cli/commands/apply</a></p>", "answers": ["<p>Terraform makes infrastructure changes defined in your configuration.</p>", "<p>Terraform downloads any required plugins</p>", "<p>Terraform updates the state file with configuration changes made during the execution</p>", "<p>Terraform formats your configuration to the standard canonical format and style</p>", "<p>Terraform recreates all the infrastructure defined in the configuration file</p>"]}, "correct_response": ["a", "c"], "section": "Objective 6 - Use the Core Terraform Workflow", "question_plain": "What happens when you apply a Terraform configuration using terraform apply? (select two)", "related_lectures": []}, {"_class": "assessment", "id": 70826508, "assessment_type": "multiple-choice", "prompt": {"question": "<p>What function does the <code>terraform init -upgrade</code> command perform?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>The <a href=\"https://www.terraform.io/docs/commands/init.html#upgrade-1\"><code>-upgrade</code></a> will upgrade all previously-selected plugins an modules to the newest version that complies with the configuration's version constraints. This will cause Terraform to ignore any selections recorded in the dependency lock file, and to take the newest available version matching the configured version constraints.</p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/init#upgrade-1\">https://developer.hashicorp.com/terraform/cli/commands/init#upgrade-1</a></p>", "answers": ["<p>update all previously installed plugins and modules to the newest version that complies with the configuration\u2019s version constraints</p>", "<p>upgrades all of the referenced modules and providers to the latest version of Terraform</p>", "<p>upgrades the backend to the latest supported version</p>", "<p>upgrades the Terraform configuration file(s) to use the referenced Terraform version</p>"]}, "correct_response": ["a"], "section": "Objective 6 - Use the Core Terraform Workflow", "question_plain": "What function does the terraform init -upgrade command perform?", "related_lectures": []}, {"_class": "assessment", "id": 70826504, "assessment_type": "multiple-choice", "prompt": {"question": "<p>True or False?&nbsp;A <code>terraform plan</code> is a required step before running a <code>terraform apply</code>?</p>", "relatedLectureIds": "", "feedbacks": ["", ""], "explanation": "<p>If no explicit plan file is given on the command line, <code>terraform apply</code> will create a new plan automatically and prompt for approval to apply it</p><p><a href=\"https://developer.hashicorp.com/terraform/intro/core-workflow\">https://developer.hashicorp.com/terraform/intro/core-workflow</a></p>", "answers": ["<p>True</p>", "<p>False</p>"]}, "correct_response": ["b"], "section": "Objective 6 - Use the Core Terraform Workflow", "question_plain": "True or False?&nbsp;A terraform plan is a required step before running a terraform apply?", "related_lectures": []}, {"_class": "assessment", "id": 70826502, "assessment_type": "multiple-choice", "prompt": {"question": "<p>You have created a new workspace for a project and added all of your Terraform configuration files in the new directory. Before you execute a <code>terraform plan</code>, you want to validate the configuration using the <code>terraform validate</code> command. However, Terraform returns the error:</p><p><br></p><pre class=\"prettyprint linenums\">$ terraform validate\nError: Could not load plugin</pre><p><br></p><p><em>What would cause this error when trying to validate the configuration?</em></p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p><code>terraform validate</code> requires an initialized working directory with any referenced plugins and modules installed. If you don't initiate the directory, you will get an error stating you need to run a <code>terraform init</code> </p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/validate\">https://developer.hashicorp.com/terraform/cli/commands/validate</a></p>", "answers": ["<p>the directory was not initialized </p>", "<p>the credentials for the provider are invalid</p>", "<p>the configuration is invalid</p>", "<p>the directory does not contain valid Terraform configuration files</p>"]}, "correct_response": ["a"], "section": "Objective 6 - Use the Core Terraform Workflow", "question_plain": "You have created a new workspace for a project and added all of your Terraform configuration files in the new directory. Before you execute a terraform plan, you want to validate the configuration using the terraform validate command. However, Terraform returns the error:$ terraform validate\nError: Could not load pluginWhat would cause this error when trying to validate the configuration?", "related_lectures": []}, {"_class": "assessment", "id": 70826506, "assessment_type": "multiple-choice", "prompt": {"question": "<p>When running a <code>terraform plan</code>, how can you save the plan so it can be applied at a later time?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>The optional <code>-out</code> flag can be used to save the generated plan to a file for later execution with <code>terraform apply</code>, which can be useful when <a href=\"https://learn.hashicorp.com/tutorials/terraform/automate-terraform?in=terraform/automation&amp;utm_source=WEBSITE&amp;utm_medium=WEB_IO&amp;utm_offer=ARTICLE_PAGE&amp;utm_content=DOCS\">running Terraform in automation</a>.</p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/plan\">https://developer.hashicorp.com/terraform/cli/commands/plan</a></p>", "answers": ["<p>use the <code>-save</code> flag</p>", "<p>use the <code>-out</code> flag</p>", "<p>you cannot save a plan</p>", "<p>use the <code>-file</code> flag</p>"]}, "correct_response": ["b"], "section": "Objective 6 - Use the Core Terraform Workflow", "question_plain": "When running a terraform plan, how can you save the plan so it can be applied at a later time?", "related_lectures": []}, {"_class": "assessment", "id": 70826464, "assessment_type": "multiple-choice", "prompt": {"question": "<p>You have deployed your production environment with Terraform, and a developer has requested that you update a load balancer configuration to improve its compatibility with their application. Once you have modified your Terraform configuration, how can you conduct a dry run to verify that no unexpected changes will be made?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>The ultimate goal of a <code>terraform plan</code> is to compare the configuration file against the current state and propose any changes needed to apply the desired configuration. </p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/plan\">https://developer.hashicorp.com/terraform/cli/commands/plan</a></p>", "answers": ["<p>run&nbsp; <code>terraform plan</code> and inspect the proposed changes </p>", "<p>run&nbsp; <code>terraform state list</code> to view the existing resources and ensure they won't conflict with the new changes</p>", "<p>run <code>terraform plan -auto-approve</code> to push the changes</p>", "<p>run <code>terraform console</code> and validate the result of any expressions </p>"]}, "correct_response": ["a"], "section": "Objective 6 - Use the Core Terraform Workflow", "question_plain": "You have deployed your production environment with Terraform, and a developer has requested that you update a load balancer configuration to improve its compatibility with their application. Once you have modified your Terraform configuration, how can you conduct a dry run to verify that no unexpected changes will be made?", "related_lectures": []}, {"_class": "assessment", "id": 70826452, "assessment_type": "multiple-choice", "prompt": {"question": "<p>When running the <code>terraform validate</code> command, which issue will be brought to your attention?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>The <code>terraform validate</code> command validates the configuration files in a directory, referring only to the configuration and not accessing any remote services such as remote state, provider APIs, etc.</p><p>Validate runs checks that verify whether a configuration is syntactically valid and internally consistent, regardless of any provided variables or existing state. It is thus primarily useful for general verification of reusable modules, including correctness of attribute names and value types.</p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/validate\">https://developer.hashicorp.com/terraform/cli/commands/validate</a></p>", "answers": ["<p>a variable is being used in a resource block but has not been declared</p>", "<p>parameters inside of a resource block are not lined up with spaces</p>", "<p>there is configuration drift within the managed infrastructure</p>", "<p>there is no existing state file for the configuration</p>"]}, "correct_response": ["a"], "section": "Objective 6 - Use the Core Terraform Workflow", "question_plain": "When running the terraform validate command, which issue will be brought to your attention?", "related_lectures": []}, {"_class": "assessment", "id": 70826428, "assessment_type": "multiple-choice", "prompt": {"question": "<p>True or False? Any sensitive values referenced in the Terraform code, even as variables, will end up in plain text in the state file.</p>", "relatedLectureIds": "", "feedbacks": ["", ""], "explanation": "<p>Any values that are retrieved in a data block or referenced as variables will show up in the state file.</p><p><a href=\"https://developer.hashicorp.com/terraform/language/state/sensitive-data\">https://developer.hashicorp.com/terraform/language/state/sensitive-data</a></p>", "answers": ["<p>True</p>", "<p>False</p>"]}, "correct_response": ["a"], "section": "Objective 7 - Implement and Maintain State", "question_plain": "True or False? Any sensitive values referenced in the Terraform code, even as variables, will end up in plain text in the state file.", "related_lectures": []}, {"_class": "assessment", "id": 70826454, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Which of the following commands can be used to detect configuration drift?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>If the state has drifted from the last time Terraform ran,<code>terraform plan -refresh-only</code> or <code>terraform apply -refresh-only</code> allows drift to be detected.</p><p><a href=\"https://www.hashicorp.com/blog/detecting-and-managing-drift-with-terraform\">https://www.hashicorp.com/blog/detecting-and-managing-drift-with-terraform</a></p>", "answers": ["<p><code>terraform apply -refresh-only</code></p>", "<p><code>terraform fmt</code> </p>", "<p><code>terraform get</code></p>", "<p><code>terraform init</code> </p>"]}, "correct_response": ["a"], "section": "Objective 7 - Implement and Maintain State", "question_plain": "Which of the following commands can be used to detect configuration drift?", "related_lectures": []}, {"_class": "assessment", "id": 70826438, "assessment_type": "multiple-choice", "prompt": {"question": "<p>There are multiple ways to provide sensitive values when using Terraform. However, sensitive information provided in your configuration can be written to the state file, which is not desirable. Which method below will not result in sensitive information being written to the state file?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p><strong><em>When using sensitive values in your Terraform configuration, all of the configurations mentioned above will result in the sensitive value being written to the state file.</em></strong> Terraform stores the state as plain text, including variable values, even if you have flagged them as <code>sensitive</code>. Terraform needs to store these values in your state so that it can tell if you have changed them since the last time you applied your configuration.</p><p>Terraform runs will receive the full text of sensitive variables and might print the value in logs and state files if the configuration pipes the value through to an output or a resource parameter. Additionally, Sentinel mocks downloaded from runs will contain the sensitive values of Terraform (but not environment) variables. Take care when writing your configurations to avoid unnecessary credential disclosure. (Environment variables can end up in log files if TF_LOG is set to TRACE.)</p><p><a href=\"https://developer.hashicorp.com/terraform/cloud-docs/workspaces/variables#sensitive-values\">https://developer.hashicorp.com/terraform/cloud-docs/workspaces/variables#sensitive-values</a></p><p><a href=\"https://developer.hashicorp.com/terraform/tutorials/configuration-language/sensitive-variables\">https://developer.hashicorp.com/terraform/tutorials/configuration-language/sensitive-variables</a></p>", "answers": ["<p>using a tfvars file</p>", "<p>using a declared variable </p>", "<p>retrieving the credentials from a data source, such as HashiCorp Vault</p>", "<p>none of the above</p>"]}, "correct_response": ["d"], "section": "Objective 7 - Implement and Maintain State", "question_plain": "There are multiple ways to provide sensitive values when using Terraform. However, sensitive information provided in your configuration can be written to the state file, which is not desirable. Which method below will not result in sensitive information being written to the state file?", "related_lectures": []}, {"_class": "assessment", "id": 70826446, "assessment_type": "multiple-choice", "prompt": {"question": "<p>You have a Terraform configuration file with no defined resources. However, there is a related state file for resources that were created on AWS. What happens when you run a <code><em>terraform apply</em></code>?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>In this case, since there is a state file with resources, Terraform will match the desired state of no resources since the configuration file doesn't include any resources. Therefore, all resources defined in the state file will be destroyed.</p><p><a href=\"https://developer.hashicorp.com/terraform/language/state/purpose\">https://developer.hashicorp.com/terraform/language/state/purpose</a></p>", "answers": ["<p>Terraform will destroy all of the resources</p>", "<p>Terraform will scan the AWS infrastructure and create a new configuration file based on the state file.</p>", "<p>Terraform will not perform any operations.</p>", "<p>Terraform will produce an error since there are no resources defined</p>"]}, "correct_response": ["a"], "section": "Objective 7 - Implement and Maintain State", "question_plain": "You have a Terraform configuration file with no defined resources. However, there is a related state file for resources that were created on AWS. What happens when you run a terraform apply?", "related_lectures": []}, {"_class": "assessment", "id": 70826448, "assessment_type": "multi-select", "prompt": {"question": "<p>What happens if multiple users attempt to run a <code>terraform apply</code> simultaneously when using a remote backend? (select two)</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>If the state is configured for remote state, the backend selected will determine what happens. If the backend supports locking, the file will be locked for the first user, and that user's configuration will be applied. The second user's <code>terraform apply</code> will return an error that the state is locked.</p><p>If the remote backend does not support locking, the state file could become corrupted, since multiple users are trying to make changes at the same time.</p><p><a href=\"https://developer.hashicorp.com/terraform/language/state/locking\">https://developer.hashicorp.com/terraform/language/state/locking</a></p>", "answers": ["<p>if the backend supports locking, the first <em>terraform apply</em> will lock the file for changes, preventing the second user from running the <em>apply</em></p>", "<p>if the backend does not support locking, the state file could become corrupted</p>", "<p>both users will get an error</p>", "<p>the Terraform apply will work for both users</p>"]}, "correct_response": ["a", "b"], "section": "Objective 7 - Implement and Maintain State", "question_plain": "What happens if multiple users attempt to run a terraform apply simultaneously when using a remote backend? (select two)", "related_lectures": []}, {"_class": "assessment", "id": 70826450, "assessment_type": "multiple-choice", "prompt": {"question": "<p>True or False?&nbsp;A remote backend configuration is required for using Terraform.</p>", "relatedLectureIds": "", "feedbacks": ["", ""], "explanation": "<p>This is false. If you don't provide a backend configuration, Terraform will use the local default backend. <strong>Remote</strong> <strong>Backends are completely optional</strong>. You can successfully use Terraform without ever having to learn or use a remote backend. However, they do solve pain points that afflict teams at a certain scale. If you're an individual, you can likely get away with never using backends.</p><p><a href=\"https://developer.hashicorp.com/terraform/language/settings/backends/configuration\">https://developer.hashicorp.com/terraform/language/settings/backends/configuration</a></p>", "answers": ["<p>True</p>", "<p>False</p>"]}, "correct_response": ["b"], "section": "Objective 7 - Implement and Maintain State", "question_plain": "True or False?&nbsp;A remote backend configuration is required for using Terraform.", "related_lectures": []}, {"_class": "assessment", "id": 70826484, "assessment_type": "multiple-choice", "prompt": {"question": "<p>You are an Infrastructure Engineer at Strategies, Inc, which is a new organization that provides marketing services to startups. All of your infrastructure is provisioned and managed by Terraform. Despite your pleas to not make changes outside of Terraform, sometimes the other engineers log into the cloud platform and make minor changes to resolve problems. </p><p>What Terraform command can you use to reconcile the state with the real-world infrastructure in order to detect any drift from the last-known state?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>The <code>terraform apply -refresh-only</code> command is used to reconcile the state Terraform knows about (via its state file) with the real-world infrastructure. This can be used to detect any drift from the last-known state, and to update the state file.</p><p><a href=\"https://learn.hashicorp.com/tutorials/terraform/refresh\">https://learn.hashicorp.com/tutorials/terraform/refresh</a></p>", "answers": ["<p><code>terraform apply -refresh-only</code> </p>", "<p><code>terraform state show</code> </p>", "<p><code>terraform validate</code> </p>", "<p><code>terraform graph</code> </p>"]}, "correct_response": ["a"], "section": "Objective 7 - Implement and Maintain State", "question_plain": "You are an Infrastructure Engineer at Strategies, Inc, which is a new organization that provides marketing services to startups. All of your infrastructure is provisioned and managed by Terraform. Despite your pleas to not make changes outside of Terraform, sometimes the other engineers log into the cloud platform and make minor changes to resolve problems. What Terraform command can you use to reconcile the state with the real-world infrastructure in order to detect any drift from the last-known state?", "related_lectures": []}, {"_class": "assessment", "id": 70826470, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Ralphie has executed a <code>terraform apply</code> using a complex Terraform configuration file. However, a few resources failed to deploy due to incorrect variables. After the error is discovered, what happens to the resources that were successfully provisioned?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>During a <code>terraform apply,</code> any resources that are successfully provisioned are maintained as deployed. </p><p>On the other hand, resources that failed during the provisioning process, such as a provisioned, will be tainted to be recreated during the next run. <a href=\"https://developer.hashicorp.com/terraform/language/resources/provisioners/syntax#creation-time-provisioners\">https://developer.hashicorp.com/terraform/language/resources/provisioners/syntax#creation-time-provisioners</a></p>", "answers": ["<p>Terraform rolls back the configuration due to the error, therefore the resources are automatically destroyed</p>", "<p>the resources that were successfully provisioned will remain as deployed</p>", "<p>resources successfully deployed are marked for replacement</p>", "<p>Terraform deletes the resources on the next run</p>"]}, "correct_response": ["b"], "section": "Objective 7 - Implement and Maintain State", "question_plain": "Ralphie has executed a terraform apply using a complex Terraform configuration file. However, a few resources failed to deploy due to incorrect variables. After the error is discovered, what happens to the resources that were successfully provisioned?", "related_lectures": []}, {"_class": "assessment", "id": 70826444, "assessment_type": "multiple-choice", "prompt": {"question": "<p>You have a Terraform configuration file defining resources to deploy on VMware, yet there is no related state file. You have successfully run <code>terraform init</code> already. What happens when you run a <code><em>terraform apply</em></code>?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>If there is no state file associated with a Terraform configuration file, a terraform apply will create the resources defined in the configuration file. This is a normal workflow during the first <code>terraform apply</code> that is executed against a configuration file. This, of course, assumes that the directory has been initialized using a <code>terraform init</code> </p><p><a href=\"https://developer.hashicorp.com/terraform/language/state/purpose\">https://developer.hashicorp.com/terraform/language/state/purpose</a></p>", "answers": ["<p>Since there is no state file associated with this configuration file, the defined resources will be not created on the VMware infrastructure.</p>", "<p>Terraform will scan the VMware infrastructure, create a new state file, and deploy the new resources as defined in the configuration file. </p>", "<p>Terraform will produce an error since there is no state file</p>", "<p>All existing infrastructure on VMware will be deleted, and the resources defined in the configuration file will be created.</p>"]}, "correct_response": ["b"], "section": "Objective 7 - Implement and Maintain State", "question_plain": "You have a Terraform configuration file defining resources to deploy on VMware, yet there is no related state file. You have successfully run terraform init already. What happens when you run a terraform apply?", "related_lectures": []}, {"_class": "assessment", "id": 70826434, "assessment_type": "multiple-choice", "prompt": {"question": "<p>You are working with a cloud provider to deploy resources using Terraform. You've added the following <code>data</code> block to your configuration. When the <code>data</code> block is used, what data will be returned?</p><p><br></p><pre class=\"prettyprint linenums\">data&nbsp;\"aws_ami\"&nbsp;\"amzlinux2\"&nbsp;{\n&nbsp;&nbsp;most_recent&nbsp;=&nbsp;true\n&nbsp;&nbsp;owners&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;[\"amazon\"]\n\n&nbsp;&nbsp;filter&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;name&nbsp;&nbsp;&nbsp;=&nbsp;\"name\"\n&nbsp;&nbsp;&nbsp;&nbsp;values&nbsp;=&nbsp;[\"amzn2-ami-hvm-*-x86_64-ebs\"]\n&nbsp;&nbsp;}\n}</pre><p><br></p><pre class=\"prettyprint linenums\">resource&nbsp;\"aws_instance\"&nbsp;\"vault\"&nbsp;{\n&nbsp;&nbsp;ami&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;data.aws_ami.amzlinux2.id\n&nbsp;&nbsp;instance_type&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;\"t3.micro\"\n&nbsp;&nbsp;key_name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;\"vault-key\"\n&nbsp;&nbsp;vpc_security_group_ids&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;var.sg\n&nbsp;&nbsp;subnet_id&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;var.subnet\n&nbsp;&nbsp;associate_public_ip_address&nbsp;=&nbsp;\"true\"\n&nbsp;&nbsp;user_data&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;file(\"vault.sh\")\n\n&nbsp;&nbsp;tags&nbsp;=&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;Name&nbsp;=&nbsp;\"vault\"\n&nbsp;&nbsp;}\n}</pre>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>When you add a data block to your configuration, Terraform will retrieve all of the available data for that particular resource. It is then up to you to reference a specific attribute that can be exported from that data source. For example, if you include a data block for the <code>aws_ami</code> resource, Terraform will get a ton of attributes about that AMI that you can use elsewhere in your code - check out this link to see the list of attributes specific to the <code>aws_ami</code>, for example. <a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs/data-sources/ami#attributes-reference\">https://registry.terraform.io/providers/hashicorp/aws/latest/docs/data-sources/ami#attributes-reference</a></p><p><br></p><p>Within the block body (between <code>{</code> and <code>}</code>) are query constraints defined by the data source. Most arguments in this section depend on the data source, and indeed in this example <code>most_recent</code>, <code>owners</code> and <code>tags</code> are all arguments defined specifically for <a href=\"https://www.terraform.io/docs/providers/aws/d/ami.html\">the <code>aws_ami</code> data source</a>.</p><p><a href=\"https://developer.hashicorp.com/terraform/language/data-sources#using-data-sources\">https://developer.hashicorp.com/terraform/language/data-sources#using-data-sources</a></p>", "answers": ["<p>all possible data of a specific Amazon Machine Image(AMI) from AWS</p>", "<p>the latest AMI you have previously used for an Amazon Linux 2 image</p>", "<p>a custom AMI for Amazon Linux 2</p>", "<p>the IP&nbsp;address of an EC2 instance running in AWS</p>"]}, "correct_response": ["a"], "section": "Objective 8 - Read, Generate, and Modify Configuration", "question_plain": "You are working with a cloud provider to deploy resources using Terraform. You've added the following data block to your configuration. When the data block is used, what data will be returned?data&nbsp;\"aws_ami\"&nbsp;\"amzlinux2\"&nbsp;{\n&nbsp;&nbsp;most_recent&nbsp;=&nbsp;true\n&nbsp;&nbsp;owners&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;[\"amazon\"]\n\n&nbsp;&nbsp;filter&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;name&nbsp;&nbsp;&nbsp;=&nbsp;\"name\"\n&nbsp;&nbsp;&nbsp;&nbsp;values&nbsp;=&nbsp;[\"amzn2-ami-hvm-*-x86_64-ebs\"]\n&nbsp;&nbsp;}\n}resource&nbsp;\"aws_instance\"&nbsp;\"vault\"&nbsp;{\n&nbsp;&nbsp;ami&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;data.aws_ami.amzlinux2.id\n&nbsp;&nbsp;instance_type&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;\"t3.micro\"\n&nbsp;&nbsp;key_name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;\"vault-key\"\n&nbsp;&nbsp;vpc_security_group_ids&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;var.sg\n&nbsp;&nbsp;subnet_id&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;var.subnet\n&nbsp;&nbsp;associate_public_ip_address&nbsp;=&nbsp;\"true\"\n&nbsp;&nbsp;user_data&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;file(\"vault.sh\")\n\n&nbsp;&nbsp;tags&nbsp;=&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;Name&nbsp;=&nbsp;\"vault\"\n&nbsp;&nbsp;}\n}", "related_lectures": []}, {"_class": "assessment", "id": 70826432, "assessment_type": "multiple-choice", "prompt": {"question": "<p>When a <code>terraform apply</code> is executed, where is the AWS provider retrieving credentials to create cloud resources in the code snippet below?</p><p><br></p><pre class=\"prettyprint linenums\">provider \"aws\" {\n   region     = us-east-1\n   access_key = data.vault_aws_access_credentials.creds.access_key\n   secret_key = data.vault_aws_access_credentials.creds.secret_key\n}</pre>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>In this case, Terraform is using a data source to gather credentials from Vault. The data block would look something like this:</p><pre class=\"prettyprint linenums\">data \"vault_aws_access_credentials\" \"creds\" {\n   backend = vault_aws_secret_backend.aws.path\n   role    = vault_aws_secret_backend_role.role.name\n}</pre><p><a href=\"https://developer.hashicorp.com/terraform/language/data-sources\">https://developer.hashicorp.com/terraform/language/data-sources</a></p>", "answers": ["<p>from a <code>data source</code> that is retrieving credentials from HashiCorp Vault. Vault is dynamically generating the credentials on Terraform's behalf.</p>", "<p>from a variable called <code>vault_aws_access_credentials</code> </p>", "<p>from a script that is executing commands against Vault</p>", "<p>from the <code>.tfvars</code> file called <code>vault</code> </p>"]}, "correct_response": ["a"], "section": "Objective 8 - Read, Generate, and Modify Configuration", "question_plain": "When a terraform apply is executed, where is the AWS provider retrieving credentials to create cloud resources in the code snippet below?provider \"aws\" {\n   region     = us-east-1\n   access_key = data.vault_aws_access_credentials.creds.access_key\n   secret_key = data.vault_aws_access_credentials.creds.secret_key\n}", "related_lectures": []}, {"_class": "assessment", "id": 70826498, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Given a Terraform config that includes the following code,&nbsp;how would you reference the last instance that will be created?</p><p><br></p><pre class=\"prettyprint linenums\">resource \"aws_instance\" \"database\" {\n  # ...\n  for_each = {\n    \"vault\": \"secrets\",\n    \"terraform\": \"infrastructure\",\n    \"consul\": \"networking\",\n    \"nomad\": \"scheduler\"\n  }\n}</pre>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>The following specifications apply to index values on modules and resources with multiple instances:</p><p><a href=\"https://www.terraform.io/docs/internals/resource-addressing.html#n-\"><code>[N]</code></a> where <code>N</code> is a <code>0</code>-based numerical index into a resource with multiple instances specified by the <code>count</code> meta-argument. Omitting an index when addressing a resource where <code>count &gt; 1</code> means that the address references all instances.</p><p><a href=\"https://www.terraform.io/docs/internals/resource-addressing.html#quot-index-quot-\"><code>[\"INDEX\"]</code></a> where <code>INDEX</code> is an alphanumerical key index into a resource with multiple instances specified by the <code>for_each</code> meta-argument.</p><p><a href=\"https://developer.hashicorp.com/terraform/language/meta-arguments/for_each#referring-to-instances\">https://developer.hashicorp.com/terraform/language/meta-arguments/for_each#referring-to-instances</a></p>", "answers": ["<p>aws_instance.database[\"nomad\"]</p>", "<p>aws_instance.database[2]</p>", "<p>aws_instance.database[4]</p>", "<p>aws_instance.nomad</p>"]}, "correct_response": ["a"], "section": "Objective 8 - Read, Generate, and Modify Configuration", "question_plain": "Given a Terraform config that includes the following code,&nbsp;how would you reference the last instance that will be created?resource \"aws_instance\" \"database\" {\n  # ...\n  for_each = {\n    \"vault\": \"secrets\",\n    \"terraform\": \"infrastructure\",\n    \"consul\": \"networking\",\n    \"nomad\": \"scheduler\"\n  }\n}", "related_lectures": []}, {"_class": "assessment", "id": 70826440, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Which of the following best describes a \"data source\"?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p><em>Data sources</em> allow data to be fetched or computed for use elsewhere in Terraform configuration. Use of data sources allows a Terraform configuration to make use of information defined outside of Terraform, or defined by another separate Terraform configuration.</p><p><a href=\"https://developer.hashicorp.com/terraform/language/data-sources\">https://developer.hashicorp.com/terraform/language/data-sources</a></p>", "answers": ["<p>enables Terraform to fetch data for use elsewhere in the Terraform configuration</p>", "<p>provides required data for declared variables used within the Terraform configuration</p>", "<p>maintains a list of strings to store the values of declared outputs in Terraform</p>", "<p>a file that contains the current working version of Terraform </p>"]}, "correct_response": ["a"], "section": "Objective 8 - Read, Generate, and Modify Configuration", "question_plain": "Which of the following best describes a \"data source\"?", "related_lectures": []}, {"_class": "assessment", "id": 70826422, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Based on the code provided, how many subnets will be created in the AWS account?</p><p><em>variables.tf</em></p><pre class=\"prettyprint linenums\">variable&nbsp;\"private_subnet_names\"&nbsp;{\n&nbsp;&nbsp;type&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;list(string)\n&nbsp;&nbsp;default&nbsp;=&nbsp;[\"private_subnet_a\",&nbsp;\"private_subnet_b\",&nbsp;\"private_subnet_c\"]\n}\nvariable \"vpc_cidr\" {\n  type    = string\n  default = \"10.0.0.0/16\"\n}\nvariable \"public_subnet_names\" {\n  type    = list(string)\n  default = [\"public_subnet_1\", \"public_subnet_2\"]\n}</pre><p><em>main.tf</em></p><pre class=\"prettyprint linenums\">resource&nbsp;\"aws_subnet\"&nbsp;\"private_subnet\"&nbsp;{\n&nbsp;&nbsp;count&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;length(var.private_subnet_names)\n&nbsp;&nbsp;vpc_id&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;aws_vpc.vpc.id\n&nbsp;&nbsp;cidr_block&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;cidrsubnet(var.vpc_cidr,&nbsp;8,&nbsp;count.index)\n&nbsp;&nbsp;availability_zone&nbsp;=&nbsp;data.aws_availability_zones.available.names[count.index]\n\n&nbsp;&nbsp;tags&nbsp;=&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;Name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;var.private_subnet_names[count.index]\n&nbsp;&nbsp;&nbsp;&nbsp;Terraform&nbsp;=&nbsp;\"true\"\n&nbsp;&nbsp;}\n}</pre>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>The code above will create <strong>three </strong>subnets. The value of <code>count</code> is determined by the number of strings included in the <code>private_subnet_names</code> variable.</p><p><a href=\"https://developer.hashicorp.com/terraform/language/functions/length\">https://developer.hashicorp.com/terraform/language/functions/length</a></p>", "answers": ["<p>3</p>", "<p>2</p>", "<p>1</p>", "<p>0</p>"]}, "correct_response": ["a"], "section": "Objective 8 - Read, Generate, and Modify Configuration", "question_plain": "Based on the code provided, how many subnets will be created in the AWS account?variables.tfvariable&nbsp;\"private_subnet_names\"&nbsp;{\n&nbsp;&nbsp;type&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;list(string)\n&nbsp;&nbsp;default&nbsp;=&nbsp;[\"private_subnet_a\",&nbsp;\"private_subnet_b\",&nbsp;\"private_subnet_c\"]\n}\nvariable \"vpc_cidr\" {\n  type    = string\n  default = \"10.0.0.0/16\"\n}\nvariable \"public_subnet_names\" {\n  type    = list(string)\n  default = [\"public_subnet_1\", \"public_subnet_2\"]\n}main.tfresource&nbsp;\"aws_subnet\"&nbsp;\"private_subnet\"&nbsp;{\n&nbsp;&nbsp;count&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;length(var.private_subnet_names)\n&nbsp;&nbsp;vpc_id&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;aws_vpc.vpc.id\n&nbsp;&nbsp;cidr_block&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;cidrsubnet(var.vpc_cidr,&nbsp;8,&nbsp;count.index)\n&nbsp;&nbsp;availability_zone&nbsp;=&nbsp;data.aws_availability_zones.available.names[count.index]\n\n&nbsp;&nbsp;tags&nbsp;=&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;Name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;var.private_subnet_names[count.index]\n&nbsp;&nbsp;&nbsp;&nbsp;Terraform&nbsp;=&nbsp;\"true\"\n&nbsp;&nbsp;}\n}", "related_lectures": []}, {"_class": "assessment", "id": 70826442, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Which block type is used to assign a name to an expression that can be used multiple times within a module without having to repeat it?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>A local value assigns a name to an <a href=\"https://developer.hashicorp.com/terraform/language/expressions\">expression</a>, so you can use it multiple times within a module without repeating it. These local values are declared within a <code>locals</code> block</p><p><a href=\"https://developer.hashicorp.com/terraform/language/values/locals\">https://developer.hashicorp.com/terraform/language/values/locals</a></p>", "answers": ["<p><code>locals {}</code> </p>", "<p><code>resource {}</code> </p>", "<p><code>provider {}</code> </p>", "<p><code>terraform {}</code></p>"]}, "correct_response": ["a"], "section": "Objective 8 - Read, Generate, and Modify Configuration", "question_plain": "Which block type is used to assign a name to an expression that can be used multiple times within a module without having to repeat it?", "related_lectures": []}, {"_class": "assessment", "id": 70826494, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Based on the following code, which code block will create a resource first?</p><p><br></p><pre class=\"prettyprint linenums\">resource \"aws_instance\" \"data_processing\" {\n  ami           = data.aws_ami.amazon_linux.id\n  instance_type = \"t2.micro\"\n\n  depends_on = [aws_s3_bucket.customer_data]\n}\n\nmodule \"example_sqs_queue\" {\n  source  = \"terraform-aws-modules/sqs/aws\"\n  version = \"2.1.0\"\n\n  depends_on = [aws_s3_bucket.customer_data, aws_instance.data_processing]\n}\n\nresource \"aws_s3_bucket\" \"customer_data\" {\n  acl = \"private\"\n}\n\nresource \"aws_eip\" \"ip\" {\n  vpc      = true\n  instance = aws_instance.data_processing.id\n}</pre>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>In this example, the only resource that does not have an implicit or an explicit dependency is the <code>aws_s3_bucket.customer_data</code>. Every other resource defined in this configuration has a dependency on another resource.</p><p><a href=\"https://learn.hashicorp.com/tutorials/terraform/dependencies\">https://learn.hashicorp.com/tutorials/terraform/dependencies</a></p>", "answers": ["<p><code>aws_s3_bucket.customer_data</code> </p>", "<p><code>aws_instance.data_processing</code> </p>", "<p><code>example_sqs_queue</code> </p>", "<p><code>aws_eip.ip</code> </p>"]}, "correct_response": ["a"], "section": "Objective 8 - Read, Generate, and Modify Configuration", "question_plain": "Based on the following code, which code block will create a resource first?resource \"aws_instance\" \"data_processing\" {\n  ami           = data.aws_ami.amazon_linux.id\n  instance_type = \"t2.micro\"\n\n  depends_on = [aws_s3_bucket.customer_data]\n}\n\nmodule \"example_sqs_queue\" {\n  source  = \"terraform-aws-modules/sqs/aws\"\n  version = \"2.1.0\"\n\n  depends_on = [aws_s3_bucket.customer_data, aws_instance.data_processing]\n}\n\nresource \"aws_s3_bucket\" \"customer_data\" {\n  acl = \"private\"\n}\n\nresource \"aws_eip\" \"ip\" {\n  vpc      = true\n  instance = aws_instance.data_processing.id\n}", "related_lectures": []}, {"_class": "assessment", "id": 70826496, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Given the following snippet of code, what will the value of the \"Name\" tag equal after a <code>terraform apply</code>?</p><p><br></p><pre class=\"prettyprint linenums\">variable \"name\" {\n  description = \"The username assigned to the infrastructure\"\n  default = \"data_processing\"\n}\n\nvariable \"team\" {\n  description = \"The team responsible for the infrastructure\"\n  default = \"IS&nbsp;Team\"\n}\n\nlocals {\n  name  = (var.name != \"\" ? var.name : random_id.id.hex)\n  owner = var.team\n  common_tags = {\n    Owner = local.owner\n    Name  = local.name\n  }\n}</pre>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>The syntax of a conditional expression first names the condition. In this example, if <code>var.name</code> is not (<code>!=</code>) empty, assign the <code>var.name</code> value; else, assign the new <code>random_id</code> resource as the name value. Since <code>var.name</code> equals <strong>data_processing</strong>, then the value of <code>Name</code> will equal <code>data_processing</code>. </p><p><a href=\"https://developer.hashicorp.com/terraform/language/expressions/conditionals\">https://developer.hashicorp.com/terraform/language/expressions/conditionals</a></p>", "answers": ["<p>an empty string</p>", "<p>a random hex value</p>", "<p>IS&nbsp;Team</p>", "<p>data_processing</p>"]}, "correct_response": ["d"], "section": "Objective 8 - Read, Generate, and Modify Configuration", "question_plain": "Given the following snippet of code, what will the value of the \"Name\" tag equal after a terraform apply?variable \"name\" {\n  description = \"The username assigned to the infrastructure\"\n  default = \"data_processing\"\n}\n\nvariable \"team\" {\n  description = \"The team responsible for the infrastructure\"\n  default = \"IS&nbsp;Team\"\n}\n\nlocals {\n  name  = (var.name != \"\" ? var.name : random_id.id.hex)\n  owner = var.team\n  common_tags = {\n    Owner = local.owner\n    Name  = local.name\n  }\n}", "related_lectures": []}, {"_class": "assessment", "id": 70826424, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Variables and their default values are typically declared in a <code>main.tf</code> or <code>variables.tf</code> file. What type of file can be used to set explicit values for the current working directory that will override the default variable values?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>To set lots of variables, it is more convenient to specify their values in a <em>variable definitions file</em> (with a filename ending in either <code>.tfvars</code> or <code>.tfvars.json</code>)</p><p><a href=\"https://developer.hashicorp.com/terraform/language/values/variables\">https://developer.hashicorp.com/terraform/language/values/variables</a></p>", "answers": ["<p>.tfvars file</p>", "<p>.tfstate file</p>", "<p>.sh file</p>", "<p>.txt file</p>"]}, "correct_response": ["a"], "section": "Objective 8 - Read, Generate, and Modify Configuration", "question_plain": "Variables and their default values are typically declared in a main.tf or variables.tf file. What type of file can be used to set explicit values for the current working directory that will override the default variable values?", "related_lectures": []}, {"_class": "assessment", "id": 70826486, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Which feature of Terraform Cloud can be used to enforce fine-grained policies to enforce standardization and cost controls before resources are provisioned with Terraform?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p><a href=\"https://www.hashicorp.com/sentinel\">Sentinel</a> is an embedded policy-as-code framework integrated with the HashiCorp Enterprise products. It enables fine-grained, logic-based policy decisions and can be extended to use information from external sources.</p><p><strong>Please Note:&nbsp;</strong>HashiCorp announced at HashiConf Global '22 that Open Policy Agent (OPA) is now supported in Terraform Cloud. However, this new feature will likely take a while to appear in the actual Terraform exam. I'm already working with HashiCorp to address any conflicts that might appear on the real exam.</p><p><a href=\"https://developer.hashicorp.com/terraform/cloud-docs/policy-enforcement\">https://developer.hashicorp.com/terraform/cloud-docs/policy-enforcement</a></p>", "answers": ["<p>sentinel</p>", "<p>module registry</p>", "<p>workspaces</p>", "<p>remote runs</p>"]}, "correct_response": ["a"], "section": "Objective 9 - Understand Terraform Cloud Capabilities", "question_plain": "Which feature of Terraform Cloud can be used to enforce fine-grained policies to enforce standardization and cost controls before resources are provisioned with Terraform?", "related_lectures": []}, {"_class": "assessment", "id": 70826462, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Terraform Cloud Agents are a feature that allows Terraform Cloud to communicate with private infrastructure, such as VMware hosts running on-premises. Which version of Terraform Cloud supports this feature?</p>", "relatedLectureIds": "", "feedbacks": ["", "", ""], "explanation": "<p>This newer feature is only available on Terraform Cloud for Business </p><p><a href=\"https://www.hashicorp.com/products/terraform/pricing\">https://www.hashicorp.com/products/terraform/pricing</a></p>", "answers": ["<p>Terraform Cloud Free </p>", "<p>Terraform Team and Governance</p>", "<p>Terraform Cloud for Business</p>"]}, "correct_response": ["c"], "section": "Objective 9 - Understand Terraform Cloud Capabilities", "question_plain": "Terraform Cloud Agents are a feature that allows Terraform Cloud to communicate with private infrastructure, such as VMware hosts running on-premises. Which version of Terraform Cloud supports this feature?", "related_lectures": []}, {"_class": "assessment", "id": 70826488, "assessment_type": "multi-select", "prompt": {"question": "<p>Both Terraform CLI and Terraform Cloud offer a feature called \"workspaces\". Which of the following statements are true regarding workspaces? (select three)</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", "", ""], "explanation": "<p>Workspaces are similar concepts in all versions of Terraform, although they behave differently depending on the platform they are being used on.</p><p><a href=\"https://developer.hashicorp.com/terraform/cloud-docs/workspaces\">https://developer.hashicorp.com/terraform/cloud-docs/workspaces</a></p><p><a href=\"https://developer.hashicorp.com/terraform/language/state/workspaces\">https://developer.hashicorp.com/terraform/language/state/workspaces</a></p>", "answers": ["<p>CLI&nbsp;workspaces are alternative state files in the same working directory</p>", "<p>Terraform Cloud manages infrastructure collections with a workspace whereas CLI manages collections of infrastructure resources with a persistent working directory</p>", "<p>Each CLI workspace coincides with a different VCS repo</p>", "<p>Terraform Cloud maintains the state version and run history for each workspace</p>", "<p>Run history is logged in a file underneath the working directory of a CLI workspace</p>"]}, "correct_response": ["a", "b", "d"], "section": "Objective 9 - Understand Terraform Cloud Capabilities", "question_plain": "Both Terraform CLI and Terraform Cloud offer a feature called \"workspaces\". Which of the following statements are true regarding workspaces? (select three)", "related_lectures": []}, {"_class": "assessment", "id": 70826490, "assessment_type": "multiple-choice", "prompt": {"question": "<p>AutoPlants,&nbsp;Inc is a new startup that uses AI and robotics to grow sustainable and organic vegetables for California farmer's markets. The organization can quickly burst into the public cloud during the busy season using Terraform to provision additional resources to process AI computations and images. Since its compute stack is proprietary and critical to the organization, it needs a solution to create and publish Terraform modules that only its engineers and architects can use. </p><p>Which feature can provide this functionality?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>One feature that can provide this functionality is Terraform's <strong>Private Module Registry</strong>. This feature allows organizations to create and manage private modules that authorized users within the organization can only access. With Private Module Registry, AutoPlants, Inc can create and publish Terraform modules that are only available to its engineers and architects. This ensures that their proprietary compute stack remains secure while also streamlining the process of provisioning additional resources during the busy season.</p><p><a href=\"https://developer.hashicorp.com/terraform/cloud-docs/registry\">https://developer.hashicorp.com/terraform/cloud-docs/registry</a></p>", "answers": ["<p>Private Module Registry</p>", "<p>Public Module Registry</p>", "<p>Terraform Cloud Workspaces</p>", "<p>HashiCorp Sentinel</p>"]}, "correct_response": ["a"], "section": "Objective 9 - Understand Terraform Cloud Capabilities", "question_plain": "AutoPlants,&nbsp;Inc is a new startup that uses AI and robotics to grow sustainable and organic vegetables for California farmer's markets. The organization can quickly burst into the public cloud during the busy season using Terraform to provision additional resources to process AI computations and images. Since its compute stack is proprietary and critical to the organization, it needs a solution to create and publish Terraform modules that only its engineers and architects can use. Which feature can provide this functionality?", "related_lectures": []}, {"_class": "assessment", "id": 70826492, "assessment_type": "multi-select", "prompt": {"question": "<p>Terraform Cloud provides organizations with many features not available to those running Terraform open-source to deploy infrastructure. Select the ADDITIONAL&nbsp;features that organizations can take advantage of by moving to Terraform Cloud. (select three)</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", "", ""], "explanation": "<p>Terraform Cloud offers many features, even in the free version, that organizations can quickly take advantage of. This is the best table that compares the features available in Terraform OSS vs. Terraform Cloud and Terraform Enterprise.</p><p><a href=\"https://www.datocms-assets.com/2885/1602500234-terraform-full-feature-pricing-tablev2-1.pdf\">https://www.datocms-assets.com/2885/1602500234-terraform-full-feature-pricing-tablev2-1.pdf</a></p>", "answers": ["<p>private module registry</p>", "<p>VCS&nbsp;connection</p>", "<p>public module registry</p>", "<p>providers</p>", "<p>remote runs</p>"]}, "correct_response": ["a", "b", "e"], "section": "Objective 9 - Understand Terraform Cloud Capabilities", "question_plain": "Terraform Cloud provides organizations with many features not available to those running Terraform open-source to deploy infrastructure. Select the ADDITIONAL&nbsp;features that organizations can take advantage of by moving to Terraform Cloud. (select three)", "related_lectures": []}, {"_class": "assessment", "id": 70826532, "assessment_type": "multiple-choice", "prompt": {"question": "<p>When using Terraform Cloud, what is the easiest way to ensure the security and integrity of modules when used by multiple teams across different projects?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>To simplify the management of approved modules, you can host all the approved Terraform modules in your organization's Private Module Registry (PMR)&nbsp;on Terraform Cloud. The private registry allows you to control access to the modules and ensures they are not publicly available. By implementing PMR, your organization can effectively control and restrict module consumption to only approved modules hosted in the Terraform Private Module Registry. This enhances security, maintains consistency in infrastructure deployments, and reduces the risk of using unverified or potentially harmful modules in your Terraform configurations.</p><p><strong>Wrong Answers:</strong></p><p> - Creating a list is probably a bad idea as it doesn't simplify the management of modules that can be used</p><p> - modules published to the public registry aren't \"approved\" modules, and these modules may not contain or implement security measures required by your organization</p><p> - TFC&nbsp;permissions wouldn't work here since they wouldn't be used to control access to certain modules</p><p><a href=\"https://developer.hashicorp.com/terraform/cloud-docs/registry\">https://developer.hashicorp.com/terraform/cloud-docs/registry</a></p>", "answers": ["<p>Use the TFC&nbsp;Private Module Registry to ensure only approved modules are consumed by your organization</p>", "<p>Create a list of approved modules and send them to your team to ensure they don't use modules that aren't approved by the team</p>", "<p>use only modules that are published to the Terraform public module registry</p>", "<p>apply TFC organization permissions to all workspaces that allow them to only use certain modules</p>"]}, "correct_response": ["a"], "section": "Objective 9 - Understand Terraform Cloud Capabilities", "question_plain": "When using Terraform Cloud, what is the easiest way to ensure the security and integrity of modules when used by multiple teams across different projects?", "related_lectures": []}, {"_class": "assessment", "id": 70826534, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Your organization requires that no security group in your public cloud environment includes \"0.0.0.0/0\" as a source of network traffic. How can you proactively enforce this control and prevent Terraform configurations from being executed if they contain this specific string?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>To prevent a Terraform configuration from being executed if it contains a specific string, you can use Sentinel or Open Policy Agent (OPA) to enforce policy checks. Both tools allow you to define custom policies to evaluate and control Terraform configurations before they are applied. Both offer powerful capabilities to enforce custom policies on your Terraform configurations, providing an additional layer of security and governance. By leveraging these tools, you can prevent sensitive information or undesired strings from being present in your infrastructure code, reducing the risk of accidental misconfigurations and potential security vulnerabilities.</p><p><strong>Wrong Answers:</strong></p><p> - there are no user settings in TFC that would prevent the use of a specific string in your Terraform configuration</p><p> - a terraform validate would not prevent specific strings from being used in Terraform</p><p> - while you could use another service to manage your environment and scan for security groups that permit \"0.0.0.0/0\" in your environment, it is a REACTIVE control, and not preventative.</p><p><br></p><p> <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/policy-enforcement/sentinel\">https://developer.hashicorp.com/terraform/cloud-docs/policy-enforcement/sentinel</a></p><p><a href=\"https://developer.hashicorp.com/terraform/cloud-docs/policy-enforcement/opa\">https://developer.hashicorp.com/terraform/cloud-docs/policy-enforcement/opa</a></p>", "answers": ["<p>Create a Sentinel or OPA&nbsp;policy that checks for the string and denies the Terraform apply if the string exists</p>", "<p>Configure the user's TFC organization permissions to not allow any variables or Terraform configuration that contain this string</p>", "<p>Perform a <code>terraform validate</code> on the local workstation before committing the code to the code repository linked to TFC&nbsp;workspace</p>", "<p>Configure a rule in your public cloud provider to scan for security groups and alert you if a security group contains the string</p>"]}, "correct_response": ["a"], "section": "Objective 9 - Understand Terraform Cloud Capabilities", "question_plain": "Your organization requires that no security group in your public cloud environment includes \"0.0.0.0/0\" as a source of network traffic. How can you proactively enforce this control and prevent Terraform configurations from being executed if they contain this specific string?", "related_lectures": []}]}
5413604
~~~
{"count": 57, "next": null, "previous": null, "results": [{"_class": "assessment", "id": 70826140, "assessment_type": "multi-select", "prompt": {"question": "<p>Which of the following are advantages of using infrastructure as code (IaC) for your day-to-day operations? (select three)</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Using Infrastructure as Code (IaC) like Terraform, CloudFormation, etc. enables organizations to completely change the way they deploy applications and the underlying infrastructure to support them.&nbsp;Rather than click around in a console, <strong><em>IaC enables API-driven workflows </em></strong>for deploying resources in public clouds, private infrastructure, and other SaaS and PaaS services.</p><p>When developing IaC, organizations can now use a Version Control System, such as GitHub, GitLab, Bitbucket, etc. <strong><em>to store and version its code</em></strong>. When changes are needed, the existing code can be cloned, modified, and merged back into the main repository by way of a pull or merge request. These requests can follow a traditional workflow where approvals are needed before they are deployed to a production environment.</p><p>By moving your configurations to code and publishing them to a shared repository, or registry, different operators in the organization can now easily consume this code without even knowing how to write Terraform. They can simply provide the required values by way of variables and entire environments can be provisioned to support their application(s).</p><p><strong>WRONG ANSWER:</strong></p><p>While Terraform can indeed help with the security of your applications, it won't guarantee it. You can combine Terraform with other tools, such as LaunchDarkly, SonarQube, DeepScan, and more using a CI/CD pipeline, but again, it doesn't guarantee the security of your application. Security is the responsibility of everybody involved in the deployment of an application, starting with the developer(s) themselves all the way to the people responsible for the day-to-day operations of the application.</p><p><a href=\"https://learn.hashicorp.com/tutorials/terraform/infrastructure-as-code\">https://learn.hashicorp.com/tutorials/terraform/infrastructure-as-code</a></p><p><a href=\"https://developer.hashicorp.com/terraform/intro\">https://developer.hashicorp.com/terraform/intro</a></p><p><a href=\"https://developer.hashicorp.com/terraform/intro/use-cases\">https://developer.hashicorp.com/terraform/intro/use-cases</a></p>", "answers": ["<p>API-driven workflows</p>", "<p>enables self-service for developers and operators alike</p>", "<p>provides the ability to version control the infrastructure and application architecture</p>", "<p>ensures the security of applications provisioned on managed infrastructure</p>"]}, "correct_response": ["a", "b", "c"], "section": "Objective 1 - Understand Infrastructure as Code Concepts", "question_plain": "Which of the following are advantages of using infrastructure as code (IaC) for your day-to-day operations? (select three)", "related_lectures": []}, {"_class": "assessment", "id": 70826142, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Which of the following best describes the primary use of Infrastructure as Code (IaC)?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>The primary use case for IaC is to deploy and configure resources in almost any environment in a single, unified way that also abstracts the user from the APIs. </p><p><strong>Wrong Answers:</strong></p><p>Combing disparate technologies and tasks is really the job of a pipeline, such as GitLab CI/CD, Jenkins, or Azure&nbsp;DevOps. While Terraform CAN be used with multiple technologies within a single configuration file, it's not really the ideal job for Terraform. Terraform isn't an orchestrator like the aforementioned tools would be used for.</p><p>The goal of Terraform is NOT to ensure that operations folks know how to develop code, although I'd say that is somewhat of an end result in most organizations. While they are developing Java or Golang applications, operations folks tend to use Terraform as an opportunity to learn more developer-centric workflows, like using Git or learning how to develop code in a repeatable fashion.</p><p>When deploying Terraform, it's often a one-time thing, and Terraform doesn't actively monitor applications for changes.&nbsp;That's the job of a configuration management tool, such as Ansible, Chef, Puppet, or SaltStack.</p><p><a href=\"https://developer.hashicorp.com/terraform/intro/use-cases\">https://developer.hashicorp.com/terraform/intro/use-cases</a></p><p><a href=\"https://developer.hashicorp.com/terraform/intro/vs/chef-puppet\">https://developer.hashicorp.com/terraform/intro/vs/chef-puppet</a></p><p><a href=\"https://developer.hashicorp.com/terraform/intro/vs\">https://developer.hashicorp.com/terraform/intro/vs</a></p>", "answers": ["<p>the ability to programmatically deploy and configure resources</p>", "<p>combining disparate technologies and various tasks into a single workflow</p>", "<p>ensures that the operations team understands how to develop code</p>", "<p>ensuring that applications remain in the desired state configuration</p>"]}, "correct_response": ["a"], "section": "Objective 1 - Understand Infrastructure as Code Concepts", "question_plain": "Which of the following best describes the primary use of Infrastructure as Code (IaC)?", "related_lectures": []}, {"_class": "assessment", "id": 70826144, "assessment_type": "multiple-choice", "prompt": {"question": "<p>You work for a retail organization that has multiple peak seasons throughout the year. During those peak seasons, your applications need to be scaled up quickly to handle the increased demand. However, the deployment of application servers is manual and new servers are only deployed when problems are reported by users.</p><p>How can you reduce the effort required to deploy new resources, increase the speed of deployments, and reduce or eliminate the negative experiences of your customers?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>In this case, automation is key. And considering that this is a course/question focused on Infrastructure as Code, developing IaC to trigger automatically based on workloads is the best answer here. </p><p><strong>Wrong Answers:</strong></p><p>While the others sound like a great idea or an improvement in the troubleshooting process, they wouldn't resolve the errors with their customers.</p><p><a href=\"https://developer.hashicorp.com/terraform/intro\">https://developer.hashicorp.com/terraform/intro</a></p><p><a href=\"https://developer.hashicorp.com/terraform/intro/use-cases\">https://developer.hashicorp.com/terraform/intro/use-cases</a></p>", "answers": ["<p>Develop code that provisions new application servers programmatically. Use monitoring software to trigger a pipeline that deploys additional servers during periods of increased demand.</p>", "<p>Deploy new IaC code that automatically shuts down existing application servers and scales the resources down during periods of high demand.</p>", "<p>Develop a manual runbook that the developers and operations teams can follow during the peak seasons to reconfigure the compute resources used to serve the primary application.</p>", "<p>Rather than wait on user reports, implement a ticketing system that alerts the operations team of poor performance or customer errors. Automatically assign the tickets to the on-call team to quickly resolve.</p>"]}, "correct_response": ["a"], "section": "Objective 1 - Understand Infrastructure as Code Concepts", "question_plain": "You work for a retail organization that has multiple peak seasons throughout the year. During those peak seasons, your applications need to be scaled up quickly to handle the increased demand. However, the deployment of application servers is manual and new servers are only deployed when problems are reported by users.How can you reduce the effort required to deploy new resources, increase the speed of deployments, and reduce or eliminate the negative experiences of your customers?", "related_lectures": []}, {"_class": "assessment", "id": 70826146, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Your organization uses IaC to provision and manage resources in a public cloud platform. A new employee has developed changes to existing code and wants to push it into production. </p><p>What best practice should the new employee follow to submit the new code?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Following best practices for code, the new changes should be submitted as a pull/merge request in the existing code repository. A teammate, or the security team, should validate the changes and approve the request, ultimately merging the new changes into the existing codebase</p><p><strong>Wrong Answers:</strong></p><p>None of these follow best practices for managing code. Please don't do any of these things :)</p><p><a href=\"https://learn.hashicorp.com/collections/terraform/aws-get-started\">https://learn.hashicorp.com/collections/terraform/aws-get-started</a></p><p><a href=\"https://developer.hashicorp.com/terraform/intro/vs\">https://developer.hashicorp.com/terraform/intro/vs</a>.</p>", "answers": ["<p>Submit a merge/pull request of the proposed changes. Have a team member validate the changes and approve the request.</p>", "<p>Submit the change to the change control board and wait for the approval. Commit the code directly to the main repository. </p>", "<p>Execute the code locally on the developer's machine to make the changes directly to the infrastructure.</p>", "<p>Make the change directly using the cloud provider's API to ensure the changes are valid. Store the code locally and email a copy of the code to a teammate so they have an extra copy.</p>"]}, "correct_response": ["a"], "section": "Objective 1 - Understand Infrastructure as Code Concepts", "question_plain": "Your organization uses IaC to provision and manage resources in a public cloud platform. A new employee has developed changes to existing code and wants to push it into production. What best practice should the new employee follow to submit the new code?", "related_lectures": []}, {"_class": "assessment", "id": 70826148, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Your organization has standardized on Microsoft Azure to run its applications on PaaS, SaaS, and IaaS offerings. The deployment quickly standardized on Azure ARM to provision these resources quickly and efficiently.</p><p>Which of the following is true about how the team currently deploys its infrastructure?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>While each of the main public cloud providers has its own version of Infrastructure as Code (ARM, AWS CloudFormation, etc.), adopting the native solution can be limiting as the organization matures its cloud capabilities and offerings. If the organization only learns the native solution, what happens if they decide to use a different public cloud provider or they acquire a company that uses a different one? While the developer mindset would still apply, the skillset used to deploy ARM doesn't necessarily apply one-to-one for writing AWS CloudFormation, for example. Each of these solutions handles development and deployment differently, and the engineers have to learn a second solution.</p><p>By using Terraform, engineers and developers can focus their time on <strong><em>learning a single solution</em></strong> applicable to all the public cloud providers and other SaaS, PaaS, and IaaS offerings available on the market.</p><p><strong>Wrong Answers:</strong></p><p>The wrong answers are all benefits of using any infrastructure as code, such as standardization, reusability, and familiarity with using a cloud provider solution.</p><p><a href=\"https://developer.hashicorp.com/terraform/intro/use-cases#multi-cloud-deployment\">https://developer.hashicorp.com/terraform/intro/use-cases#multi-cloud-deployment</a></p><p><a href=\"https://developer.hashicorp.com/terraform/intro/vs/cloudformation\">https://developer.hashicorp.com/terraform/intro/vs/cloudformation</a></p>", "answers": ["<p>the adoption of another public cloud provider will prove to be more challenging since all of its codebase is based on ARM</p>", "<p>the team would not be able to quickly adapt and integrate baseline security measures in its code to help standardize application deployments</p>", "<p>the team would not be able to develop reusable code in order to reduce the time it takes to develop code for new applications</p>", "<p>the team would not be able to use its existing skill set to develop code for newly announced services</p>"]}, "correct_response": ["a"], "section": "Objective 2 - Understand Terraform's purpose (vs other IaC)", "question_plain": "Your organization has standardized on Microsoft Azure to run its applications on PaaS, SaaS, and IaaS offerings. The deployment quickly standardized on Azure ARM to provision these resources quickly and efficiently.Which of the following is true about how the team currently deploys its infrastructure?", "related_lectures": []}, {"_class": "assessment", "id": 70826150, "assessment_type": "multi-select", "prompt": {"question": "<p>What are some of the benefits that Terraform <em>providers</em> offer to users? (select three)</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Terraform enables its users to interact with a platform's API without requiring the end-user to understand individual APIs for the targeted platform. This allows a user to easily provision and manage resources across many different platforms without having to understand the API for each individual backend. This benefit makes users more efficient and reduces the administrative burden for understanding and troubleshooting each one.</p><p>Terraform can support any platform that has an API, including public, private, and other offerings on the market today. If it has an API, a provider can be written to allow Terraform to manage it. Don't believe me? Check out the Spotify or Domino's Pizza Terraform provider :)</p><p>Lastly, by using providers, HashiCorp can enable the extensibility of Terraform without having to modify Terraform core for each supported platform. Each provider, or plugin, can be downloaded as needed to extend the functionality of Terraform itself.</p><p><strong>Wrong Answer:</strong></p><p>Now, while Terraform can help you standardize security configurations and settings across multiple clouds, it won't enforce it outside of your <code>terraform apply</code>. In other words, it doesn't act like a configuration management tool that can constantly watch for changes to change the configuration back to the desired state.</p><p><a href=\"https://developer.hashicorp.com/terraform/intro/use-cases\">https://developer.hashicorp.com/terraform/intro/use-cases</a></p><p><a href=\"https://developer.hashicorp.com/terraform/intro\">https://developer.hashicorp.com/terraform/intro</a></p>", "answers": ["<p>abstracts the target platform's API from the end-user</p>", "<p>enables the deployment of resources to multiple platforms, such as public cloud, private cloud, or other SaaS, PaaS, or IaaS services</p>", "<p>enables a plugin architecture that allows Terraform to be extensible without having to update Terraform core</p>", "<p>enforces security compliance across multiple cloud providers</p>"]}, "correct_response": ["a", "b", "c"], "section": "Objective 2 - Understand Terraform's purpose (vs other IaC)", "question_plain": "What are some of the benefits that Terraform providers offer to users? (select three)", "related_lectures": []}, {"_class": "assessment", "id": 70826152, "assessment_type": "multi-select", "prompt": {"question": "<p>Which of the following are true about Terraform providers? (select four)</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", "", ""], "explanation": "<p>The cool part about providers is that anybody can write or contribute to them. This includes individuals would just want to contribute to open-source projects, manufacturers/platform vendors that want to ensure providers are up to date, or HashiCorp themselves. If you find that a provider doesn't provide the capabilities you need, you can develop the new capabilities and submit a PR for review. If approved, those changes would now become part of the Terraform provider that millions of people could use. Pretty cool!</p><p><br></p><p><img src=\"https://img-b.udemycdn.com/redactor/raw/test_question_description/2021-12-17_20-53-30-c03dea4e00685f2ba4df1ed1bc8170f1.png\"></p><p><strong>Wrong Answer:</strong></p><p>Providers are treated as plugins for Terraform, and during a terraform init process, the required providers are downloaded to the local machine that is executing Terraform so they can be used. Therefore, not all providers are included with Terraform when you download the latest version from terraform.io.</p><p><a href=\"https://learn.hashicorp.com/collections/terraform/aws-get-started\">https://learn.hashicorp.com/collections/terraform/aws-get-started</a></p><p><a href=\"https://developer.hashicorp.com/terraform/plugin/how-terraform-works\">https://developer.hashicorp.com/terraform/plugin/how-terraform-works</a></p>", "answers": ["<p>they allow anybody to write a provider and publish it to the registry</p>", "<p>some providers are maintained by HashiCorp</p>", "<p>some providers are community-supported </p>", "<p>providers can be written and maintained by an outside organization, such as AWS, F5, or Microsoft</p>", "<p>all providers are automatically included when downloading Terraform</p>"]}, "correct_response": ["a", "b", "c", "d"], "section": "Objective 2 - Understand Terraform's purpose (vs other IaC)", "question_plain": "Which of the following are true about Terraform providers? (select four)", "related_lectures": []}, {"_class": "assessment", "id": 70826154, "assessment_type": "multiple-choice", "prompt": {"question": "<p>You have deployed your network architecture in AWS using Terraform. A colleague recently logged in to the AWS&nbsp;console and made a change manually and now you need to be sure your Terraform state reflects the new change. </p><p>What command should you run to update your Terraform state?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Terraform includes the ability to use the command <code>terraform apply -refresh-only</code> to refresh the local state based on the changes made outside of the Terraform workflow. Terraform will use the platform's API to query information about each known/managed resource and update any changes it finds.</p><p><br></p><p><strong>IMPORTANT - READ&nbsp;THIS!!!!</strong></p><p><code>terraform apply -refresh-only</code> replaced the deprecated command <code>terraform refresh</code>. However, you still may find <code>terraform refresh</code> in the real exam until it gets updated. Keep this in mind when taking the real exam. HashiCorp does update the exams very often, and this could very well come out at the beginning of 2022 when they overhaul the existing exam as noted on the <a href=\"https://www.hashicorp.com/certification/terraform-associate\">exam page</a> that a new version would be released in early 2022.</p><p><br></p><p><strong>WRONG ANSWERS:</strong></p><p><code>terraform plan -out=refresh</code> just runs a terraform plan and saves a plan called refresh. I was being a little tricky here but just know that this isn't how to refresh your state file</p><p><code>terraform init -upgrade</code> is the command to use if you want Terraform to upgrade your existing downloaded providers</p><p><code>terraform get -update</code> is used to download and update modules that are referenced in your Terraform configuration files</p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/refresh\">https://developer.hashicorp.com/terraform/cli/commands/refresh</a></p><p>Oddly enough, the <code>-refresh-only</code> option doesn't currently exist as a valid option on the <a href=\"https://developer.hashicorp.com/terraform/cli/commands/apply\">terraform apply documentation</a> - <em>if it does show up, let me know so I can update this description</em></p>", "answers": ["<p><code>terraform apply -refresh-only</code> </p>", "<p><code>terraform plan -out=refresh</code> </p>", "<p><code>terraform init -upgrade</code> </p>", "<p><code>terraform get -update</code> </p>"]}, "correct_response": ["a"], "section": "Objective 2 - Understand Terraform's purpose (vs other IaC)", "question_plain": "You have deployed your network architecture in AWS using Terraform. A colleague recently logged in to the AWS&nbsp;console and made a change manually and now you need to be sure your Terraform state reflects the new change. What command should you run to update your Terraform state?", "related_lectures": []}, {"_class": "assessment", "id": 70826156, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Which of the following is <strong><em>not true</em></strong> about the <code>terraform.tfstate</code> file used by Terraform?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>The one thing that cannot be guaranteed is that the <code>terraform.tfstate</code> file <strong>ALWAYS</strong> matches the deployed infrastructure since changes can easily be made outside of Terraform. For example, if you deploy a bunch of resources in GCP and nobody makes any changes, then yes, the <code>terraform.tfstate</code> file does match the current state of those resources. However, if an engineer makes a change in the GCP console or CLI, then the <code>terraform.tfstate</code> would <strong>NOT</strong> match the infrastructure deployed until you ran a <code>terraform apply -refresh-only</code> command.</p><p>This is why the only false statement in this question is: <strong><em>it always matches the infrastructure deployed with Terraform.</em></strong></p><p><br></p><p><strong>WRONG&nbsp;ANSWERS:</strong></p><p><em>The following statements are TRUE&nbsp;about Terraform, which makes them the incorrect choice for this question.</em></p><p>Terraform uses the terraform.tfstate file to store everything it needs to manage the resources it is managing. This includes a ton of information about each resource it provisions and manages. Because of this, HashiCorp recommends that you DO&nbsp;NOT modify the file directly outside of using the Terraform workflow (<code>terraform init, plan, apply, destroy</code>) and <code>terraform state</code> CLI commands.</p><p>Many times, you'll need to provide sensitive values to deploy and manage resources, or Terraform may retrieve sensitive values at your request (like data blocks). In that case, these values may get saved to the state file, therefore you should limit who can access the state file to protect this sensitive data.</p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/language/state\">https://developer.hashicorp.com/terraform/language/state</a></p><p><a href=\"https://developer.hashicorp.com/terraform/language/state/sensitive-data\">https://developer.hashicorp.com/terraform/language/state/sensitive-data</a></p><p><a href=\"https://developer.hashicorp.com/terraform/language/state/purpose\">https://developer.hashicorp.com/terraform/language/state/purpose</a></p>", "answers": ["<p>it always matches the infrastructure deployed with Terraform</p>", "<p>it is recommended not to modify the file directly</p>", "<p>the file can potentially contain sensitive values</p>", "<p>the file includes information about each resource managed by Terraform</p>"]}, "correct_response": ["a"], "section": "Objective 2 - Understand Terraform's purpose (vs other IaC)", "question_plain": "Which of the following is not true about the terraform.tfstate file used by Terraform?", "related_lectures": []}, {"_class": "assessment", "id": 70826158, "assessment_type": "multiple-choice", "prompt": {"question": "<p>You have recently cloned a repo containing Terraform that you want to test in your environment. Once you customize the configuration, you run a <code>terraform apply</code> but it immediately fails. Why would the apply fail?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>When you're learning the basics of Terraform, one of the critical requirements of executing any Terraform code is running <code>terraform init</code> to download all of the required plugins needed for the resources that will be deployed/managed. If you don't run a <code>terraform init</code> when running code in a new directory, a <code>terraform apply/plan</code> will immediately fail since it needs to download the plugins required to run.</p><p><br></p><p><strong>WRONG ANSWERS:</strong></p><p>While the traditional Terraform workflow is <code>init</code> --&gt; <code>plan</code> --&gt; <code>apply</code>, running a <code>terraform plan</code> is not required to execute a <code>terraform plan</code>. It's recommended to make changes to real environments, but when I'm testing or building labs for my other courses, I rarely run a terraform plan and go straight to <code>terraform apply</code>.</p><p>As for running Terraform cloned from another repo, you can absolutely do this. Many people use existing code as a starting point for their own environment. They will clone the repo, customize it however they need and then run it. This is a perfectly acceptable practice and it prevents you from constantly <a href=\"https://en.wikipedia.org/wiki/Reinventing_the_wheel\">reinventing the wheel</a>.</p><p>Regarding authentication, you only need to use the <code>terraform login</code> command when you are working with Terraform Cloud. You don't need authentication credentials outside of that use case unless you are deploying resources to some platform, like AWS, Azure, VMware, etc. There are plenty of use cases for Terraform where you don't need authentication credentials at all, like using the TLS or random provider.</p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/intro/core-workflow\">https://developer.hashicorp.com/terraform/intro/core-workflow</a></p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/init\">https://developer.hashicorp.com/terraform/cli/commands/init</a></p><p><a href=\"https://developer.hashicorp.com/terraform/cli/init#initialization\">https://developer.hashicorp.com/terraform/cli/init#initialization</a></p>", "answers": ["<p>Terraform needs to initialize the directory and download the required plugins</p>", "<p>you need to run a <code>terraform plan</code> before you can apply the configuration</p>", "<p>you can't run Terraform code that was cloned from another users code repository</p>", "<p>Terraform needs to obtain authentication credentials using the <code>terraform login</code> command</p>"]}, "correct_response": ["a"], "section": "Objective 3 -  Understand Terraform Basics", "question_plain": "You have recently cloned a repo containing Terraform that you want to test in your environment. Once you customize the configuration, you run a terraform apply but it immediately fails. Why would the apply fail?", "related_lectures": []}, {"_class": "assessment", "id": 70826160, "assessment_type": "multiple-choice", "prompt": {"question": "<p>True or False?&nbsp;When developing Terraform code, you <em>must</em> include a provider block for each unique provider so Terraform knows which ones you want to download and use.</p>", "relatedLectureIds": "", "feedbacks": ["", ""], "explanation": "<p>Unlike many other objects in the Terraform language, a <code>provider</code> block may be omitted if its contents would otherwise be empty. Terraform assumes an empty default configuration for any provider that is not explicitly configured. In other words, if you don't have any specific configurations for your provider, you may indeed leave it out of your configuration. </p><p>To prove this out,&nbsp;I created a <code>.tf</code> file that includes a resource from the <strong>RANDOM</strong> provider as well as the <strong>AWS</strong> provider and omitted any provider blocks in my configuration. After running a <code>terraform init</code>, you can clearly see that Terraform understands what providers the resources are from and downloads the correct provider plugins. Thus proving that you do NOT need a <code>Provider</code> block to use Terraform.</p><p><br></p><img src=\"https://img-b.udemycdn.com/redactor/raw/practice_test_question_explanation/2022-12-28_14-54-29-3dd8bd07ee0e3639be3fbc41c70b3f0a.png\"><p><a href=\"https://developer.hashicorp.com/terraform/language/providers/configuration\">https://developer.hashicorp.com/terraform/language/providers/configuration</a></p>", "answers": ["<p>True</p>", "<p>False</p>"]}, "correct_response": ["b"], "section": "Objective 3 -  Understand Terraform Basics", "question_plain": "True or False?&nbsp;When developing Terraform code, you must include a provider block for each unique provider so Terraform knows which ones you want to download and use.", "related_lectures": []}, {"_class": "assessment", "id": 70826162, "assessment_type": "multiple-choice", "prompt": {"question": "<p>You are using Terraform to manage resources in Azure. Due to unique requirements, you need to specify the version of the Azure provider so it remains the same until newer versions are thoroughly tested. </p><p>What block would properly configure Terraform to ensure it always installs the same Azure provider version?</p><p><br></p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>When you need to constrain the provider to a specific version, you would do this under the <code>terraform</code> configuration block. Within that block, you would use the <code>required_providers</code> block to set certain configurations, including the version of each provider you want to lockdown. </p><p>Note that even though you would add the provider constraint under the <code>terraform</code> block, you may still indeed have a separate <code>provider</code> block to set certain configurations, like credentials, regions, or other settings specific to the provider. Just keep in mind that each distinct block is used for different settings.</p><p><strong>Example:</strong></p><p>Set the version of the Azure provider:</p><p><br></p><pre class=\"prettyprint linenums\">terraform {\n  required_providers {\n    azurerm = {\n      source = \"hashicorp/azurerm\"\n      version = \"2.90.0\"\n    }\n  }\n}</pre><p>Configure settings for the Azure provider:</p><p><br></p><pre class=\"prettyprint linenums\">provider \"azurerm\" {\n  features {}\n}</pre><p> </p><p><a href=\"https://developer.hashicorp.com/terraform/language/providers/requirements\">https://developer.hashicorp.com/terraform/language/providers/requirements</a></p><p><a href=\"https://developer.hashicorp.com/terraform/language/providers/requirements#version-constraints\">https://developer.hashicorp.com/terraform/language/providers/requirements#version-constraints</a>\n\n</p>", "answers": ["<pre class=\"prettyprint linenums\">terraform {\n  required_providers {\n    azurerm = {\n      source = \"hashicorp/azurerm\"\n      version = \"2.90.0\"\n    }\n  }\n}</pre>", "<pre class=\"prettyprint linenums\">provider \"azurerm\" {\n  source = \"hashicorp/azurerm\"\n  version = \"2.90.0\"\n}</pre>", "<pre class=\"prettyprint linenums\">data \"azurerm\" {\n  source = \"hashicorp/azurerm\"\n  version = 2.90.0\n}</pre>", "<pre class=\"prettyprint linenums\">required_providers {\n  azurerm = {\n    source = \"hashicorp/azurerm\"\n    version = \"2.90.0\"\n  }\n}</pre>"]}, "correct_response": ["a"], "section": "Objective 3 -  Understand Terraform Basics", "question_plain": "You are using Terraform to manage resources in Azure. Due to unique requirements, you need to specify the version of the Azure provider so it remains the same until newer versions are thoroughly tested. What block would properly configure Terraform to ensure it always installs the same Azure provider version?", "related_lectures": []}, {"_class": "assessment", "id": 70826164, "assessment_type": "multi-select", "prompt": {"question": "<p>When using Terraform, where can you install providers from? (select four)</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", "", ""], "explanation": "<p>Providers can be installed using multiple methods, including downloading from a Terraform public or private registry, the official HashiCorp releases page, a local plugins directory, or even from a plugin cache. Terraform cannot, however, install directly from the source code.</p><p><a href=\"https://developer.hashicorp.com/terraform/language/providers#provider-installation\">Check out this site for more information on provider installation</a>.</p><p><a href=\"https://developer.hashicorp.com/terraform/language/providers#how-to-find-providers\">How to find a provider</a></p>", "answers": ["<p>Terraform registry</p>", "<p>Terraform plugin cache</p>", "<p>plugins directory</p>", "<p>official HashiCorp releases site</p>", "<p>the provider's source code</p>"]}, "correct_response": ["a", "b", "c", "d"], "section": "Objective 3 -  Understand Terraform Basics", "question_plain": "When using Terraform, where can you install providers from? (select four)", "related_lectures": []}, {"_class": "assessment", "id": 70826166, "assessment_type": "multiple-choice", "prompt": {"question": "<p>You need to use multiple resources from different providers in Terraform to accomplish a task. Which of the following can be used to configure the settings for each of the providers?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>To configure each provider, you need to define a provider block and provide the configuration within that block. You would need to do this for each provider that you need to configure. For example, if you needed to customize the <code>aws</code>, <code>gcp</code>, and <code>vault</code> provider, you'd need to create three separate provider blocks, one for each provider.</p><p><strong>Additional Clarity: </strong>While you can configure parameters inside a <code>provider</code> block, the provider block is not needed to use Terraform successfully. The most common configurations within a provider block are <strong>credentials</strong> to access the platform, which should be placed in <em>environment variables</em> rather than inside a <code>provider</code> block. In my examples above, I am providing custom configurations for my needs. But, if I were using the defaults, I wouldn't need to add a <code>provider</code> block for my project to be successfully deployed.</p><p>Don't forget that configurations for a provider go inside of a <code>provider</code> block, but any provider constraints go inside of the <code>terraform</code> --&gt; <code>required_providers</code> block.</p><p><a href=\"https://developer.hashicorp.com/terraform/language/providers\">https://developer.hashicorp.com/terraform/language/providers</a></p><p><a href=\"https://developer.hashicorp.com/terraform/language/providers/configuration#provider-configuration-1\">https://developer.hashicorp.com/terraform/language/providers/configuration#provider-configuration-1</a></p>", "answers": ["<pre class=\"prettyprint linenums\">provider \"consul\"&nbsp;{\n  address = \"https://consul.krausen.com:8500\"  \n  namespace = \"developer\"\n  token = \"45a3bd52-07c7-47a4-52fd-0745e0cfe967\"\n}\n\nprovider \"vault\" {\n  address = \"https://vault.krausen.com:8200\"\n  namespace = \"developer\"\n}</pre>", "<pre class=\"prettyprint linenums\">terraform {\n  providers {\n    consul&nbsp;{\n      address = \"https://consul.krausen.com:8500\"  \n      namespace = \"developer\"\n      token = \"45a3bd52-07c7-47a4-52fd-0745e0cfe967\"\n    }\n    vault {\n      address = \"https://vault.krausen.com:8200\"\n      namespace = \"developer\"\n    }\n  }\n}</pre>", "<pre class=\"prettyprint linenums\">required_providers {\n  consul&nbsp;{\n    address = \"https://consul.krausen.com:8500\"  \n    namespace = \"developer\"\n    token = \"45a3bd52-07c7-47a4-52fd-0745e0cfe967\"\n  }\n  vault {\n    address = \"https://vault.krausen.com:8200\"\n    namespace = \"developer\"\n  }\n}</pre>", "<pre class=\"prettyprint linenums\">data \"consul\" {\n  address = \"https://consul.krausen.com:8500\"  \n  namespace = \"developer\"\n  token = \"45a3bd52-07c7-47a4-52fd-0745e0cfe967\"\n}\n\ndata \"vault\" {\n  address = \"https://vault.krausen.com:8200\"\n  namespace = \"developer\"\n}</pre>"]}, "correct_response": ["a"], "section": "Objective 3 -  Understand Terraform Basics", "question_plain": "You need to use multiple resources from different providers in Terraform to accomplish a task. Which of the following can be used to configure the settings for each of the providers?", "related_lectures": []}, {"_class": "assessment", "id": 70826168, "assessment_type": "multiple-choice", "prompt": {"question": "<p>You want to use a Terraform provisioner to execute a script on the remote machine. What block type would use to declare the provisioner?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>First, provisioners should only be used as a last resort. Keep that in mind when writing Terraform.</p><p>When using a Terraform provisioned, you would declare the provisioned inside of a resource block to determine when the provisioner should be executed. For example, if you add the provisioner to an <code>aws_instance</code> resource, the provisioner will be executed when the <code>aws_instance</code> resource is built.</p><p>Example:</p><pre class=\"prettyprint linenums\">resource \"aws_instance\" \"web\" {\n  # ...\n\n  provisioner \"local-exec\" {\n    command = \"echo The server's IP address is ${self.private_ip}\"\n  }\n}</pre><p><a href=\"https://developer.hashicorp.com/terraform/language/resources/provisioners/syntax\">https://developer.hashicorp.com/terraform/language/resources/provisioners/syntax</a></p><p><a href=\"https://developer.hashicorp.com/terraform/language/resources/provisioners/syntax#how-to-use-provisioners\">https://developer.hashicorp.com/terraform/language/resources/provisioners/syntax#how-to-use-provisioners</a></p><p><a href=\"https://developer.hashicorp.com/terraform/language/resources/provisioners/syntax#multiple-provisioners\">https://developer.hashicorp.com/terraform/language/resources/provisioners/syntax#multiple-provisioners</a></p>", "answers": ["<p><code>resource</code> block</p>", "<p><code>data</code> block</p>", "<p><code>terraform</code> block</p>", "<p><code>provider</code> block</p>"]}, "correct_response": ["a"], "section": "Objective 3 -  Understand Terraform Basics", "question_plain": "You want to use a Terraform provisioner to execute a script on the remote machine. What block type would use to declare the provisioner?", "related_lectures": []}, {"_class": "assessment", "id": 70826178, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Steve is a developer who is deploying resources to AWS using Terraform. Steve needs to gather detailed information about an EC2 instance that he deployed earlier in the day. What command can Steve use to view this detailed information?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>All resources that are managed by Terraform are referenced in the state file, including detailed information about the resource. Terraform uses the state to map your configuration to the real-world resources that are deployed and managed on the backend platform (AWS, GCP, F5, Infoblox, etc.). You can use the <code>terraform state</code> commands to view and manipulate Terraform state if needed.</p><p><code>terraform state show &lt;resource address&gt;</code> will show you a lot of details on the resource, including things like the ID, IP&nbsp;address, the state of the resource, and lots more.</p><p><br></p><p><strong>WRONG&nbsp;ANSWERS:</strong></p><p><code>terraform state list</code> will just show you a list of the resources being managed by Terraform,&nbsp;but it won't show you details on each of those resources</p><p><code>terraform state rm aws_instance.frontend</code> would remove the resource from state.&nbsp;This <strong><em>would not destroy the resource</em></strong> on the public cloud, but it would tell Terraform to stop managing it.</p><p><code>terraform state pull</code> will download the state from its current location, upgrade the local copy to the latest state file version that is compatible with locally-installed Terraform, and output the raw format to stdout</p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/state/show#example-show-a-resource\">https://developer.hashicorp.com/terraform/cli/commands/state/show#example-show-a-resource</a></p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/state/rm\">https://developer.hashicorp.com/terraform/cli/commands/state/rm</a></p>", "answers": ["<p><code>terraform state show aws_instance.frontend</code> </p>", "<p><code>terraform state list</code> </p>", "<p><code>terraform state rm aws_instance.frontend</code> </p>", "<p><code>terraform state pull</code> </p>"]}, "correct_response": ["a"], "section": "Objective 4 - Use the Terraform Outside Core Workflow", "question_plain": "Steve is a developer who is deploying resources to AWS using Terraform. Steve needs to gather detailed information about an EC2 instance that he deployed earlier in the day. What command can Steve use to view this detailed information?", "related_lectures": []}, {"_class": "assessment", "id": 70826180, "assessment_type": "multiple-choice", "prompt": {"question": "<p>After running <code>terraform apply</code>, you notice some odd behavior and need to investigate. Which of the following environment variables will configure Terraform to write more detailed logs to assist with troubleshooting?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Terraform has detailed logs which can be enabled by setting the <code>TF_LOG</code> environment variable to any value. This will cause detailed logs to appear on stderr.</p><p>You can set <code>TF_LOG</code> to one of the log levels <code>TRACE</code>, <code>DEBUG</code>, <code>INFO</code>, <code>WARN</code> or <code>ERROR</code> to change the verbosity of the logs.</p><p><br></p><p><strong>WRONG ANSWERS:</strong></p><p>None of the incorrect answers are valid environment variables that you can use to configure Terraform logs.</p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/internals/debugging\">https://developer.hashicorp.com/terraform/internals/debugging</a></p><p><a href=\"https://developer.hashicorp.com/terraform/cli/config/environment-variables#tf_log\">https://developer.hashicorp.com/terraform/cli/config/environment-variables#tf_log</a></p>", "answers": ["<p><code>TF_LOG=TRACE</code> </p>", "<p><code>TF_LOGS=ERROR</code> </p>", "<p><code>TF_LOG_CONFIG=WARN</code> </p>", "<p><code>LOG_CONFIG=INFO</code> </p>"]}, "correct_response": ["a"], "section": "Objective 4 - Use the Terraform Outside Core Workflow", "question_plain": "After running terraform apply, you notice some odd behavior and need to investigate. Which of the following environment variables will configure Terraform to write more detailed logs to assist with troubleshooting?", "related_lectures": []}, {"_class": "assessment", "id": 70826170, "assessment_type": "multiple-choice", "prompt": {"question": "<p>You need to ensure your Terraform is easily readable and follows the HCL canonical format and style. In the current directory, you have a <code>main.tf</code> that calls modules stored in a <code>modules</code> directory. What command could you run to easily rewrite your Terraform to follow the HCL style in both the current directory and all sub-directories?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>By default, <code>fmt</code> scans the current directory for configuration files and formats them according to the HCP canonical style and format. However, if you need it to also scan and format files in sub-directories, you can use the <code>-recursive</code> flag to instruct <code>terraform fmt</code> to also process files in subdirectories. </p><p><strong>WRONG&nbsp;ANSWERS:</strong></p><p>None of the wrong answers would instruct <code>terraform fmt</code> to scan subdirectories. All of these are, however, other valid flags that you can use with <code>terraform fmt</code>.</p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/fmt#usage\">https://developer.hashicorp.com/terraform/cli/commands/fmt#usage</a></p><p><a href=\"https://developer.hashicorp.com/terraform/language/syntax/style\">https://developer.hashicorp.com/terraform/language/syntax/style</a></p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/fmt#command-fmt\">https://developer.hashicorp.com/terraform/cli/commands/fmt#command-fmt</a></p>", "answers": ["<p><code>terraform fmt -recursive</code></p>", "<p><code>terraform fmt -diff</code> </p>", "<p><code>terraform fmt -check</code> </p>", "<p><code>terraform fmt -list=false</code> </p>"]}, "correct_response": ["a"], "section": "Objective 4 - Use the Terraform Outside Core Workflow", "question_plain": "You need to ensure your Terraform is easily readable and follows the HCL canonical format and style. In the current directory, you have a main.tf that calls modules stored in a modules directory. What command could you run to easily rewrite your Terraform to follow the HCL style in both the current directory and all sub-directories?", "related_lectures": []}, {"_class": "assessment", "id": 70826172, "assessment_type": "multiple-choice", "prompt": {"question": "<p>You need Terraform to destroy and recreate a single database server that was deployed with a bunch of other resources. You don't want to modify the Terraform code. What command can be used to accomplish this task?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>When working with resources, there may be times where a particular resource didn't deploy correctly, although Terraform thinks it did. An example of this might be a script that runs on a virtual machine in the background. The virtual came up fine, so Terraform believes it was successful, but the script didn't perform the tasks you needed it to, so you need Terraform to destroy and recreate the one resource. In this case, you can use <code>terraform apply -replace=\"&lt;resource_id&gt;\"</code>&nbsp; to have Terraform replace this one resource on the next <code>terraform apply</code>. </p><p><br></p><p><strong>IMPORTANT - PLEASE READ</strong></p><p>This command was formally <code>terraform taint</code>, and you may or may not see <code>terraform taint</code> still on the exam. The <code>taint</code> command was deprecated in Terraform 0.15.2 and replaced with the <code>terraform apply -replace</code> command. Note that the resource is NOT immediately replaced when you run a <code>terraform taint</code>. It will only happen on the next <code>terraform plan/apply</code>. While HashiCorp does a great job updating their exams, sometimes commands can be a little slow to be removed or replaced from the test questions.</p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/taint\">https://developer.hashicorp.com/terraform/cli/commands/taint</a></p>", "answers": ["<p><code>terraform apply -replace=\"aws_instance.database\"</code> </p>", "<p><code>terraform state rm aws_instance.database</code> </p>", "<p><code>terraform plan -destroy=\"aws_instance.database\"</code> </p>", "<p><code>terraform state show aws_instance.database</code> </p>"]}, "correct_response": ["a"], "section": "Objective 4 - Use the Terraform Outside Core Workflow", "question_plain": "You need Terraform to destroy and recreate a single database server that was deployed with a bunch of other resources. You don't want to modify the Terraform code. What command can be used to accomplish this task?", "related_lectures": []}, {"_class": "assessment", "id": 70826174, "assessment_type": "multi-select", "prompt": {"question": "<p>Which of the following statements are <strong><em>true</em></strong> about using <code>terraform import</code>? (select three)</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p><code>terraform import</code> can be used to import resources into Terraform so they can be managed by Terraform moving forward. Any resources that are imported will be added to Terraform state so they can be managed like any other resource. Before you can use the terraform import command, you MUST develop the resource block for the resource that will be imported. For example, if you are planning to import an Azure virtual machine, you must add an <a href=\"https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/virtual_machine\">azurerm_virtual_machine</a> block with the proper configurations.</p><p>When you run the <code>terraform import</code> command, you will need to reference the <code>resource address</code> - like <em>azure_virtual_machine.web-server</em> - and the <code>resource ID</code> - like the ID of the virtual machine in Azure - as the two required parameters.</p><p><code>terraform import azurerm_virtual_machine.web-server 090556DA-D4FA-764F-A9F1-63614EDA019A</code></p><p><br></p><p><strong>WRONG&nbsp;ANSWER:</strong></p><p><strong>IMPORTANT</strong> - <code>terraform import</code> will <strong><em>NOT</em></strong> create the resource block for you. You must create the resource block in your Terraform configuration <em>before</em> using the import command</p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/import\">https://developer.hashicorp.com/terraform/cli/commands/import</a></p><p><a href=\"https://developer.hashicorp.com/terraform/cli/import\">https://developer.hashicorp.com/terraform/cli/import</a></p><p><a href=\"https://developer.hashicorp.com/terraform/cli/import/usage\">https://developer.hashicorp.com/terraform/cli/import/usage</a></p>", "answers": ["<p>you must update your Terraform configuration for the imported resource <strong><em>before</em></strong> attempting to import the resource</p>", "<p>using <code>terraform import</code> will bring the imported resource under Terraform management and add the new resource to the state file</p>", "<p>the <code>resource address</code> (example: <em>aws_instance.web</em>) and <code>resource ID</code> (example: <em>i-abdcef12345</em>) must be provided when importing a resource</p>", "<p>the <code>terraform import</code> command will automatically update the referenced Terraform resource block after the resource has been imported to ensure consistency</p>"]}, "correct_response": ["a", "b", "c"], "section": "Objective 4 - Use the Terraform Outside Core Workflow", "question_plain": "Which of the following statements are true about using terraform import? (select three)", "related_lectures": []}, {"_class": "assessment", "id": 70826176, "assessment_type": "multi-select", "prompt": {"question": "<p>You are using Terraform OSS and need to spin up a copy of your GCP&nbsp;environment in a second region to test some new features. You create a new workspace. Which of the following is true about this new workspace? (select four)</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", "", ""], "explanation": "<p>Terraform workspaces (OSS) allow you to create a new workspace to execute the same Terraform but with a <strong><em>different state file</em></strong>. This feature will enable you to run the same Terraform with different configurations without modifying Terraform code or impacting any existing workspaces.&nbsp; Terraform states out with the <code>default</code> workspace, and that's the workspace you are using unless you create and switch to a new workspace.</p><p><strong>IMPORTANT - PLEASE&nbsp;READ:</strong></p><p>Remember that Terraform Cloud and Enterprise also have Workspaces, but they behave slightly differently. In Cloud and Ent, each workspace is still isolated from others, meaning it has its own state. Still, often these workspaces point to different code repositories and use completely different Terraform configuration files.</p><p><br></p><p><strong>To create a new workspace, you'd run:</strong></p><pre class=\"prettyprint linenums\">$ terraform workspace new btk\n\nCreated and switched to workspace \"btk\"! \n\nYou're now on a new, empty workspace. Workspaces isolate their state, so if you run \"terraform plan\" Terraform will not see any existing state for this configuration.</pre><p><br></p><p><strong>To list all of the existing workspaces, you can run (note the * indicates the workspace you are using):</strong></p><pre class=\"prettyprint linenums\">$ terraform workspace list \n\ndefault*\nbtk\nbryan-dev\ntemp-workspace\n</pre><p><br></p><p><strong>WRONG&nbsp;ANSWER:</strong></p><p>When using workspaces, you're essentially using the same Terraform configuration files. Therefore the backend will remain the same for all of your workspaces. That makes this answer incorrect.</p><p><a href=\"https://developer.hashicorp.com/terraform/language/state/workspaces\">https://developer.hashicorp.com/terraform/language/state/workspaces</a></p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/workspace/list\">https://developer.hashicorp.com/terraform/cli/commands/workspace/list</a></p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/workspace/new\">https://developer.hashicorp.com/terraform/cli/commands/workspace/new</a></p>", "answers": ["<p>it has its own state file</p>", "<p>changes to this workspace won't impact other workspaces</p>", "<p>you can use a different variables file for this workspace if needed</p>", "<p>it uses a different Terraform backend</p>", "<p>it uses the same Terraform code in the current directory</p>"]}, "correct_response": ["a", "b", "c", "e"], "section": "Objective 4 - Use the Terraform Outside Core Workflow", "question_plain": "You are using Terraform OSS and need to spin up a copy of your GCP&nbsp;environment in a second region to test some new features. You create a new workspace. Which of the following is true about this new workspace? (select four)", "related_lectures": []}, {"_class": "assessment", "id": 70826182, "assessment_type": "multiple-choice", "prompt": {"question": "<p>When initializing Terraform, you notice that Terraform's CLI output states it is downloading the modules referenced in your code. Where does Terraform cache these modules?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>The <code>.terraform</code> directory contains the modules and plugins used to provision your infrastructure. These files are specific to a specific instance of Terraform when provisioning infrastructure, not the configuration of the infrastructure defined in <code>.tf</code> files.</p><p><br></p><p><img src=\"https://img-b.udemycdn.com/redactor/raw/test_question_description/2021-12-25_01-04-23-72f50aefe68ff0e57f4867be084980b6.png\"></p><p><a href=\"https://learn.hashicorp.com/tutorials/terraform/module-create?in=terraform/modules\">https://learn.hashicorp.com/tutorials/terraform/module-create?in=terraform/modules</a></p><p><a href=\"https://developer.hashicorp.com/terraform/language/modules/syntax\">https://developer.hashicorp.com/terraform/language/modules/syntax</a></p>", "answers": ["<p>in the <code>.terraform/modules</code> subdirectory in the current working directory</p>", "<p>in the <code>/tmp</code> directory on the machine executing Terraform</p>", "<p>in the <code>/downloads</code> directory for the user running the terraform init</p>", "<p>in a <code>/modules</code> directory in the current working directory</p>"]}, "correct_response": ["a"], "section": "Objective 5 - Interact with Terraform Modules", "question_plain": "When initializing Terraform, you notice that Terraform's CLI output states it is downloading the modules referenced in your code. Where does Terraform cache these modules?", "related_lectures": []}, {"_class": "assessment", "id": 70826184, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Which of the following is <strong><em>true</em></strong> about working with modules?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Ok, so there's a lot to unpack for this question here. First, let's talk about the correct answer. Modules can be called one or more times by a parent module. The configuration file/module that calls a module is often called the <code>parent,</code> <code>root,</code>or <code>calling module</code>. The module that is called is the <code>child module</code>, or sometimes just \"module\". The whole point of using a module is to be able to call it one or many times to create resources without having to rewrite the same code over and over.</p><p><strong>WRONG&nbsp;ANSWERS:</strong></p><p><strong><em>Where do modules live?</em></strong> While modules can be published to the <a href=\"https://registry.terraform.io/browse/modules\">Terraform module registry</a>, they don't have to be. They can be simply stored locally on your machine or in a private code repository. Publishing them to the public registry, or using a <a href=\"https://developer.hashicorp.com/terraform/registry/private#terraform-cloud-s-private-registry\">private module registry</a>, is completely optional.</p><p><strong><em>Module outputs</em></strong>: While modules are often more valuable when they output values, they don't necessarily have to output values. They can be used to simply manage resources. If you do need values from the module, that's when you'd create outputs. Those outputs can be used just for informational purposes or they can be used as inputs for other modules. For example, you might create a subnet in a public cloud in one module and need to output the subnet ID so you can use it as an input on a second module to deploy application workloads.</p><p><strong><em>Resources in Modules:</em></strong> Modules can be used to deploy and manage one or more resources within the module. For example, you might need to deploy multiple resources needs for a specific application or requirements. </p><p><a href=\"https://developer.hashicorp.com/terraform/language/modules/syntax\">https://developer.hashicorp.com/terraform/language/modules/syntax</a></p><p><a href=\"https://developer.hashicorp.com/terraform/language/values/outputs\">https://developer.hashicorp.com/terraform/language/values/outputs</a></p>", "answers": ["<p>a single module can be called many times in a single configuration file</p>", "<p>modules must be published to the Terraform module registry before they can be used</p>", "<p>every module that is called from a parent module must output values</p>", "<p>a module can only contain a single resource to be deployed or managed</p>"]}, "correct_response": ["a"], "section": "Objective 5 - Interact with Terraform Modules", "question_plain": "Which of the following is true about working with modules?", "related_lectures": []}, {"_class": "assessment", "id": 70826186, "assessment_type": "multiple-choice", "prompt": {"question": "<p>You have a module named <code>prod_subnet</code> that outputs the <code>subnet_id</code> of the subnet created by the module. How would you reference the subnet ID when using it for an input of another module?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Using interpolation, you can reference the output of an exported value by using the following syntax: <code>module.&lt;module name&gt;.&lt;output name&gt;</code></p><p>Don't forget that before you can reference data/values from a module, the module has to have an output declared that references the desired value(s).</p><p><strong>WRONG&nbsp;ANSWERS:</strong></p><p>None of the wrong answers are valid interpolation syntax to reference an output that originates from a module.</p><p><a href=\"https://developer.hashicorp.com/terraform/language/modules/syntax#accessing-module-output-values\">https://developer.hashicorp.com/terraform/language/modules/syntax#accessing-module-output-values</a></p><p><a href=\"https://learn.hashicorp.com/collections/terraform/modules\">https://learn.hashicorp.com/collections/terraform/modules</a></p>", "answers": ["<p><code>subnet = module.prod_subnet.subnet_id</code> </p>", "<p><code>subnet = module.outputs.prod_subnet.subnet_id</code> </p>", "<p><code>subnet = prod_subnet.outputs.subnet_id</code> </p>", "<p><code>subnet = prod_subnet.subnet_id</code> </p>"]}, "correct_response": ["a"], "section": "Objective 5 - Interact with Terraform Modules", "question_plain": "You have a module named prod_subnet that outputs the subnet_id of the subnet created by the module. How would you reference the subnet ID when using it for an input of another module?", "related_lectures": []}, {"_class": "assessment", "id": 70826188, "assessment_type": "multiple-choice", "prompt": {"question": "<p>You have declared a variable named <strong><em>db_connection_string</em></strong> inside of the <strong><em>app</em></strong> module. However, when you run a <code>terraform apply</code>, you get the following error message:</p><p><br></p><pre class=\"prettyprint linenums\">Error: Reference to undeclared input variable\n\non main.tf line 35:\n4: db_path = var.db_connection_string\n\nAn input variable with the name \"db_connection_string\" has not been declared. This variable can be declared with a variable \"db_connection_string\" {} block.</pre><p>Why would you receive such an error?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>When using modules, it's common practice to declare variables outside of the module and pass the value(s) to the child module when it is called by the parent/root module. However, it's perfectly acceptable to declare a variable inside of a module if you needed. Any variables declared <em>inside</em> of a module are only directly referencable within that module. You can't directly reference that variable outside of the module. You can, however, create an output in the module to export any values that might be needed outside of the module.</p><p><strong>WRONG&nbsp;ANSWERS:</strong></p><p><strong><em>Output block?</em></strong> While an output block would allow you to get information from within the module, creating an output block still wouldn't allow you to reference the variable directly using the var.&lt;name&gt; nomenclature.</p><p><strong><em>Referencing a Variable</em></strong> You can't reference a variable declared inside of a module, therefore the name shown in this incorrect answer wouldn't work. Ideally, you would create an output inside the module and reference the output rather than the variable inside of the module itself.</p><p><strong><em>Using Interpolation in Terraform </em></strong>This incorrect answer is just plain wrong. In fact, you would reference an accessible variable using the var prefix. Interpolation is the ability to reference data or values within your Terraform code using specific formats. For variables, that format is var.&lt;name&gt;.</p><p><a href=\"https://developer.hashicorp.com/terraform/language/values/variables\">https://developer.hashicorp.com/terraform/language/values/variables</a></p><p><a href=\"https://developer.hashicorp.com/terraform/language/modules/syntax\">https://developer.hashicorp.com/terraform/language/modules/syntax</a></p>", "answers": ["<p>since the variable was declared within the module, it cannot be referenced outside of the module</p>", "<p>an output block was not created in the module, and therefore the variable cannot be referenced</p>", "<p>the variable should be referenced as <code>var.module.app.db_connection_string</code> </p>", "<p>input variables are not referenced using the <code>var</code> prefix</p>"]}, "correct_response": ["a"], "section": "Objective 5 - Interact with Terraform Modules", "question_plain": "You have declared a variable named db_connection_string inside of the app module. However, when you run a terraform apply, you get the following error message:Error: Reference to undeclared input variable\n\non main.tf line 35:\n4: db_path = var.db_connection_string\n\nAn input variable with the name \"db_connection_string\" has not been declared. This variable can be declared with a variable \"db_connection_string\" {} block.Why would you receive such an error?", "related_lectures": []}, {"_class": "assessment", "id": 70826190, "assessment_type": "multiple-choice", "prompt": {"question": "<p>True or False? Official Terraform providers and modules are owned and maintained by HashiCorp.</p>", "relatedLectureIds": "", "feedbacks": ["", ""], "explanation": "<p><strong>This is true.</strong> <strong>If a module or provider is marked as official, it is owned and maintained by HashiCorp themselves.</strong> <em>In fact, I copied the sentence in the question straight off the </em><a href=\"https://registry.terraform.io/\"><em>official Terraform registry</em></a><em> page :)</em></p><p>There are other modules/providers available in the registry that are maintained by third-party partners, or even individuals. This also means that not all of the modules published to the Terraform registry are validated or verified by HashiCorp. Many folks will use the public module registry as a starting place to create their own custom modules needed to meet requirements.</p><p><a href=\"https://registry.terraform.io/\">https://registry.terraform.io/</a></p><p><a href=\"https://registry.terraform.io/browse/modules\">https://registry.terraform.io/browse/modules</a></p><p><a href=\"https://developer.hashicorp.com/terraform/internals/module-registry-protocol\">https://developer.hashicorp.com/terraform/internals/module-registry-protocol</a></p>", "answers": ["<p>True</p>", "<p>False</p>"]}, "correct_response": ["a"], "section": "Objective 5 - Interact with Terraform Modules", "question_plain": "True or False? Official Terraform providers and modules are owned and maintained by HashiCorp.", "related_lectures": []}, {"_class": "assessment", "id": 70826192, "assessment_type": "multiple-choice", "prompt": {"question": "<p>You are working on updating your infrastructure managed by Terraform. Before lunch, you update your configuration file and run a <code>terraform plan</code> to validate the changes. While you are away, a colleague manually updates a tag on a managed resource directly in the console (UI).</p><p>What will happen when you run a <code>terraform apply</code>?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>There's a lot to this question, but the reasoning is pretty basic. Since a resource was manually changed, it means that Terraform state is no longer accurate. However, before a <code>terraform plan</code> or <code>terraform apply</code> is executed, Terraform refreshes its state to ensure it knows the status of all its managed resources. During this process, Terraform would recognize the change, update state, and compare that to the new configuration file. Assuming the change defined in the configuration is identical to the manual change, Terraform would simply apply any changes (if any), update the state file, and complete the <code>terraform apply</code>.</p><p><strong>WRONG&nbsp;ANSWERS:</strong></p><p><strong><em>Change the resource back?</em></strong>&nbsp;Terraform relies on state for everything and any changes are a result of comparing the current state of the resource to the desired configuration (the .tf files). Therefore, Terraform won't revert the resource back to the original configuration because the configuration has been updated for the new change, and that's the desired state.</p><p><strong><em>Return an Error?</em></strong> Since Terraform performs a state refresh before executing a <code>plan</code> or <code>apply</code>, Terraform will recognize any configuration changes and then apply any changes. This will not result in an error being returned.</p><p><strong><em>Will Terraform destroy my resources?</em></strong> It won't destroy the resource since the resource is still defined in the configuration file. The only way that TF would destroy your resource is if you actually remove that resource from your configuration file(s).</p><p><a href=\"https://developer.hashicorp.com/terraform/intro/core-workflow\">https://developer.hashicorp.com/terraform/intro/core-workflow</a></p><p><a href=\"https://learn.hashicorp.com/tutorials/terraform/resource-drift?in=terraform/state\">https://learn.hashicorp.com/tutorials/terraform/resource-drift?in=terraform/state</a></p><p><a href=\"https://learn.hashicorp.com/tutorials/terraform/resource-lifecycle?in=terraform/state\">https://learn.hashicorp.com/tutorials/terraform/resource-lifecycle?in=terraform/state</a></p>", "answers": ["<p>Before applying the new configuration, Terraform will refresh the state and recognize the manual change. It will update the resource based on the desired state as configured in the Terraform configuration. The manual change will no longer exist.</p>", "<p>Terraform will update the manually changed resource back to the original configuration. It will then apply the new changes defined in the updated configuration file.</p>", "<p>Terraform will recognize the manual change and return an error since the Terraform state no longer matches the real-world infrastructure.</p>", "<p>Terraform will destroy the manually-changed resource and recreate it to ensure the infrastructure matches the desired state.</p>"]}, "correct_response": ["a"], "section": "Objective 6 - Use the Core Terraform Workflow", "question_plain": "You are working on updating your infrastructure managed by Terraform. Before lunch, you update your configuration file and run a terraform plan to validate the changes. While you are away, a colleague manually updates a tag on a managed resource directly in the console (UI).What will happen when you run a terraform apply?", "related_lectures": []}, {"_class": "assessment", "id": 70826194, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Thomas has recently developed a new Terraform configuration in a new working directory and is very cost-conscious. After running a <code>terraform init</code>, how can Thomas perform a dry run to ensure Terraform will create the right resources without deploying real-world resources?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>To perform a dry-run of your Terraform configuration, you should run a <code>terraform plan</code>. The entire purpose of running a <code>terraform plan</code> is to validate the change(s) to your infrastructure before you apply the change. In this case, Thomas could see what resources would be created without actually deploying the resources and costing him money.</p><p><strong>WRONG&nbsp;ANSWERS:</strong></p><p>Running a <code>terraform apply -refresh-only</code> would not give you the desired output. This command is used to update the state file for existing resources deployed with Terraform. This would be useful if somebody made a change outside of Terraform, and you needed to reflect that change in the state file.</p><p>Using <code>terraform output</code> wouldn't work because this command is used to view any outputs defined in your Terraform code. You can also use <code>terraform output &lt;output name&gt;</code> to view more detailed information about a particular output.</p><p>Running a <code>terraform show</code> would not give you what you're looking for here. This command displays the output from a state or plan file.</p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/plan\">https://developer.hashicorp.com/terraform/cli/commands/plan</a></p><p><a href=\"https://learn.hashicorp.com/tutorials/terraform/aws-build?in=terraform/aws-get-started\">https://learn.hashicorp.com/tutorials/terraform/aws-build?in=terraform/aws-get-started</a></p><p><a href=\"https://developer.hashicorp.com/terraform/intro/core-workflow#plan\">https://developer.hashicorp.com/terraform/intro/core-workflow#plan</a></p>", "answers": ["<p>run <code>terraform plan -out=thomas</code> </p>", "<p>run <code>terraform apply -refresh-only</code> </p>", "<p>run <code>terraform output</code> </p>", "<p>run <code>terraform show</code></p>"]}, "correct_response": ["a"], "section": "Objective 6 - Use the Core Terraform Workflow", "question_plain": "Thomas has recently developed a new Terraform configuration in a new working directory and is very cost-conscious. After running a terraform init, how can Thomas perform a dry run to ensure Terraform will create the right resources without deploying real-world resources?", "related_lectures": []}, {"_class": "assessment", "id": 70826196, "assessment_type": "multi-select", "prompt": {"question": "<p>Which of the following tasks does <code>terraform init</code> perform? (select three)</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", "", ""], "explanation": "<p>The <code>terraform init</code> command performs several different initialization steps in order to prepare the current working directory for use with Terraform. Some of these steps include downloading any referenced providers (like AWS, Azure, GCP, etc.), caching the source code for modules in the local directory so they can be used, and other steps to prepare the working directory to be used with Terraform.</p><p>Note that there are quite a few options that you can use with <code>terraform init</code> to perform operations that you might need when using Terraform. These operations might include state migrations or upgrading providers.</p><p><strong>WRONG&nbsp;ANSWERS:</strong></p><p><code>terraform init</code> does NOT create a sample Terraform configuration file. Actually, I don't know if there are any native Terraform commands that will create a .tf file for you.</p><p>You can run <code>terraform init</code> over and over again and it will not change/modify your state file.</p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/init\">https://developer.hashicorp.com/terraform/cli/commands/init</a></p><p><a href=\"https://learn.hashicorp.com/collections/terraform/aws-get-started\">https://learn.hashicorp.com/collections/terraform/aws-get-started</a></p>", "answers": ["<p>caches the source code locally for referenced modules</p>", "<p>downloads required providers used in your configuration file</p>", "<p>prepares the working directory for use with Terraform</p>", "<p>creates a sample Terraform configuration file in the working directory</p>", "<p>updates your state file based on any new changes</p>"]}, "correct_response": ["a", "b", "c"], "section": "Objective 6 - Use the Core Terraform Workflow", "question_plain": "Which of the following tasks does terraform init perform? (select three)", "related_lectures": []}, {"_class": "assessment", "id": 70826198, "assessment_type": "multiple-choice", "prompt": {"question": "<p>True or False?&nbsp;<code>terraform validate</code> will validate the syntax of your HCL files.</p>", "relatedLectureIds": "", "feedbacks": ["", ""], "explanation": "<p>The <code>terraform validate</code> command validates the configuration files in a directory, referring only to the configuration and not accessing any remote services such as remote state, provider APIs, etc.</p><p>Validate runs checks that verify whether a configuration is syntactically valid and internally consistent, regardless of any provided variables or existing state. It is thus primarily useful for general verification of reusable modules, including the correctness of attribute names and value types.</p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/validate\">https://developer.hashicorp.com/terraform/cli/commands/validate</a></p><p><br></p>", "answers": ["<p>True</p>", "<p>False</p>"]}, "correct_response": ["a"], "section": "Objective 6 - Use the Core Terraform Workflow", "question_plain": "True or False?&nbsp;terraform validate will validate the syntax of your HCL files.", "related_lectures": []}, {"_class": "assessment", "id": 70826242, "assessment_type": "multi-select", "prompt": {"question": "<p>What CLI&nbsp;commands will completely tear down and delete all resources that Terraform is currently managing? (select two)</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>The <code>terraform destroy</code> command is a convenient way to destroy all remote objects managed by a particular Terraform configuration.</p><p>While you will typically not want to destroy long-lived objects in a production environment, Terraform is sometimes used to manage ephemeral infrastructure for development purposes, in which case you can use <code>terraform destroy</code> to conveniently clean up all of those temporary objects once you are finished with your work.</p><p>This command is just a convenience alias for the following command:</p><p><code>terraform apply -destroy</code></p><p>For that reason, this command accepts most of the options that <a href=\"https://www.terraform.io/cli/commands/apply\"><code>terraform apply</code></a> accepts, although it does not accept a plan file argument and forces the selection of the \"destroy\" planning mode.</p><p><br></p><p><strong>WRONG&nbsp;ANSWERS:</strong></p><p>While <code>terraform plan -destroy</code> is a valid command, it only creates a speculative destroy plan to see what the effect of destroying would be</p><p><code>terraform apply -delete</code>&nbsp; is not a valid Terraform command</p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/destroy\">https://developer.hashicorp.com/terraform/cli/commands/destroy</a></p>", "answers": ["<p><code>terraform destroy</code> </p>", "<p><code>terraform apply -destroy</code> </p>", "<p><code>terraform plan -destroy</code> </p>", "<p><code>terraform apply -delete</code> </p>"]}, "correct_response": ["a", "b"], "section": "Objective 6 - Use the Core Terraform Workflow", "question_plain": "What CLI&nbsp;commands will completely tear down and delete all resources that Terraform is currently managing? (select two)", "related_lectures": []}, {"_class": "assessment", "id": 70826200, "assessment_type": "multiple-choice", "prompt": {"question": "<p>By default, Terraform OSS&nbsp;stores its state file in what type of backend?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>The default local backend will be used if you don't specify a backend at all in your Terraform configuration. The local backend stores state on the local filesystem, locks that state using system APIs, and performs operations locally. </p><p>Note that you can define the backend to be local by using the <code>backend \"local\" {}</code> block.</p><p><strong>WRONG&nbsp;ANSWERS:</strong></p><p>While <code>remote</code>&nbsp;is a valid backend type, <code>shared</code> or <code>encrypted</code> is not a valid backend type.&nbsp;Local is the default and a remote backend must be explicitly configured in your configuration file.</p><p><a href=\"https://developer.hashicorp.com/terraform/language/settings/backends/configuration#backend-configuration\">https://developer.hashicorp.com/terraform/language/settings/backends/configuration#backend-configuration</a></p>", "answers": ["<p><code>local</code> backend</p>", "<p><code>remote</code> backend</p>", "<p><code>encrypted</code> backend</p>", "<p><code>shared</code> backend</p>"]}, "correct_response": ["a"], "section": "Objective 7 - Implement and Maintain State", "question_plain": "By default, Terraform OSS&nbsp;stores its state file in what type of backend?", "related_lectures": []}, {"_class": "assessment", "id": 70826202, "assessment_type": "multiple-choice", "prompt": {"question": "<p>If supported by your backend, Terraform will lock your state for all operations that could write state. What purpose does this serve?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>State locking prevents others from acquiring the lock and potentially corrupting your state. If Terraform didn't use state locking, multiple people could try to make changes to your infrastructure and corrupt the state file. At that point, Terraform would no longer understand how to manage the resources deployed since the state file wouldn't be consistent. </p><p>State locking happens automatically on all operations that could write state. You won't see any message that it is happening. If state locking fails, Terraform will not continue.</p><p><strong>WRONG&nbsp;ANSWERS:</strong></p><p><strong><em>Committing code?&nbsp;</em></strong>State locking wouldn't prevent somebody from committing code to your code repository.</p><p><strong><em>Moving the state file!</em></strong>..Even after you run your first <code>terraform apply,</code> you can move the state file by modifying your state block and running a terraform init. State locking does not prevent you from moving state in the future.</p><p><strong><em>Changing Infrastructure</em></strong> Even with state locking, somebody could make manual changes to your infrastructure using the API, CLI, or console if they wanted to. State locking doesn't prevent this.</p><p><a href=\"https://developer.hashicorp.com/terraform/language/state/locking\">https://developer.hashicorp.com/terraform/language/state/locking</a></p><p><a href=\"https://developer.hashicorp.com/terraform/language/state\">https://developer.hashicorp.com/terraform/language/state</a></p>", "answers": ["<p>This prevents others from acquiring the lock and potentially corrupting your state.</p>", "<p>Prevents others from committing Terraform code that could override your updates.</p>", "<p>Ensures the state file cannot be moved after the initial <code>terraform apply</code> </p>", "<p>Locks colleagues from making manual changes to the managed infrastructure</p>"]}, "correct_response": ["a"], "section": "Objective 7 - Implement and Maintain State", "question_plain": "If supported by your backend, Terraform will lock your state for all operations that could write state. What purpose does this serve?", "related_lectures": []}, {"_class": "assessment", "id": 70826204, "assessment_type": "multiple-choice", "prompt": {"question": "<p>After using Terraform locally to deploy cloud resources, you have decided to move your state file to an Amazon S3 remote backend. You configure Terraform with the proper configuration as shown below. What command should be run in order to complete the state migration while copying the existing state to the new backend?</p><p><br></p><pre class=\"prettyprint linenums\">terraform {\n  backend \"s3\" {\n    bucket = \"tf-bucket\"\n    key = \"terraform/krausen/\"\n    region = \"us-east-1\"\n  }\n}</pre>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Whenever a configuration's backend changes, you must run <code>terraform init</code> again to validate and configure the backend before you can perform any plans, applies, or state operations. Re-running init with an already-initialized backend will update the working directory to use the new backend settings. Either <code>-reconfigure</code> or <code>-migrate-state</code> must be supplied to update the backend configuration.</p><p>When changing backends, Terraform will give you the option to migrate your state to the new backend. This lets you adopt backends without losing any existing state.</p><p><strong>WRONG&nbsp;ANSWERS:</strong></p><p>None of the wrong answers would allow you to migrate state. They are simply other CLI commands that are commonly used with Terraform.</p><p><a href=\"https://developer.hashicorp.com/terraform/language/settings/backends/configuration\">https://developer.hashicorp.com/terraform/language/settings/backends/configuration</a></p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/init#backend-initialization\">https://developer.hashicorp.com/terraform/cli/commands/init#backend-initialization</a></p>", "answers": ["<p><code>terraform init -migrate-state</code></p>", "<p><code>terraform state show</code> </p>", "<p><code>terraform plan -replace</code> </p>", "<p><code>terraform apply -refresh-only</code> </p>"]}, "correct_response": ["a"], "section": "Objective 7 - Implement and Maintain State", "question_plain": "After using Terraform locally to deploy cloud resources, you have decided to move your state file to an Amazon S3 remote backend. You configure Terraform with the proper configuration as shown below. What command should be run in order to complete the state migration while copying the existing state to the new backend?terraform {\n  backend \"s3\" {\n    bucket = \"tf-bucket\"\n    key = \"terraform/krausen/\"\n    region = \"us-east-1\"\n  }\n}", "related_lectures": []}, {"_class": "assessment", "id": 70826206, "assessment_type": "multi-select", "prompt": {"question": "<p>Your co-worker has decided to migrate Terraform state to a remote backend. They configure Terraform with the backend configuration, including the type, location, and credentials. However, you want to secure this configuration better.</p><p>Rather than storing them in plaintext, where should you store the credentials for the remote backend? (select two)</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Some backends allow providing access credentials directly as part of the configuration for use in unusual situations, for pragmatic reasons. However, in normal use, HashiCorp <strong><em>does not</em></strong> recommend including access credentials as part of the backend configuration. Instead, leave those arguments completely unset and provide credentials via the credentials files or environment variables that are conventional for the target system, as described in the documentation for each backend.</p><p><strong>WRONG&nbsp;ANSWERS:</strong></p><p><strong><em>Use a variable?</em></strong> Well, you could use a variable but that wouldn't really improve security here, since variable defaults or configurations are also stored in plaintext.</p><p><strong><em>On the remote system?</em></strong> I don't think this is even a viable option. The creds would need to be read by the local system that is executing Terraform.</p><p><a href=\"https://developer.hashicorp.com/terraform/language/settings/backends/configuration\">https://developer.hashicorp.com/terraform/language/settings/backends/configuration</a></p>", "answers": ["<p>environment variables</p>", "<p>credentials file</p>", "<p>use a variable</p>", "<p>on the remote system</p>"]}, "correct_response": ["a", "b"], "section": "Objective 7 - Implement and Maintain State", "question_plain": "Your co-worker has decided to migrate Terraform state to a remote backend. They configure Terraform with the backend configuration, including the type, location, and credentials. However, you want to secure this configuration better.Rather than storing them in plaintext, where should you store the credentials for the remote backend? (select two)", "related_lectures": []}, {"_class": "assessment", "id": 70826208, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Which common action does not cause Terraform to refresh its state?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Running a <code>terraform state list</code> does not cause Terraform to refresh its state. This command simply reads the state file but it will not modify it.</p><p><strong>WRONG&nbsp;ANSWERS:</strong></p><p>When running a <code>plan</code>, <code>apply</code>, or <code>destroy</code>, Terraform needs to refresh state to ensure that it has the latest information about the managed resources so it understands what changes should be made when applying the desired state configuration. </p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/init\">https://developer.hashicorp.com/terraform/cli/commands/init</a></p>", "answers": ["<p><code>terraform state list</code></p>", "<p><code>terraform plan</code> </p>", "<p><code>terraform apply</code> </p>", "<p><code>terraform destroy</code> </p>"]}, "correct_response": ["a"], "section": "Objective 7 - Implement and Maintain State", "question_plain": "Which common action does not cause Terraform to refresh its state?", "related_lectures": []}, {"_class": "assessment", "id": 70826210, "assessment_type": "multi-select", "prompt": {"question": "<p>Your team is using Terraform, and multiple team members need to be able to manage the infrastructure. You need to support state locking to reduce the chance of corrupting the state file. What backends can you use to meet these requirements? (select three)</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Not all Terraform backends are created equal. Some backends act like plain \"remote disks\" for state files; others support <em>locking</em> the state while operations are being performed, which helps prevent conflicts and inconsistencies. </p><p>Kubernetes, Consul, and S3 backends all support state locking. S3 supports state locking with the help of DynamoDB.</p><p><br></p><p><strong>WRONG&nbsp;ANSWER:</strong></p><p>While the <code>local</code> backend does support locking via system APIs, you can't use the <code>local</code> backend to share the state across your team.</p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/language/settings/backends/configuration\">https://developer.hashicorp.com/terraform/language/settings/backends/configuration</a></p>", "answers": ["<p><code>consul</code> backend</p>", "<p><code>s3</code> backend (with DynamoDB)</p>", "<p><code>local</code> backend</p>", "<p><code>kubernetes</code> backend</p>"]}, "correct_response": ["a", "b", "d"], "section": "Objective 7 - Implement and Maintain State", "question_plain": "Your team is using Terraform, and multiple team members need to be able to manage the infrastructure. You need to support state locking to reduce the chance of corrupting the state file. What backends can you use to meet these requirements? (select three)", "related_lectures": []}, {"_class": "assessment", "id": 70826212, "assessment_type": "multi-select", "prompt": {"question": "<p>You are worried about unauthorized access to the Terraform state file since it might contain sensitive information. What are some ways you can protect the state file? (select two)</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>If you manage any sensitive data with Terraform (like database passwords, user passwords, or private keys), treat the state itself as sensitive data.</p><p>Storing state remotely can provide better security. As of Terraform 0.9, Terraform does not persist state to the local disk when remote state is in use, and some backends can be configured to encrypt the state data at rest.</p><p><a href=\"https://cloud.hashicorp.com/products/terraform\">Terraform Cloud</a> always encrypts state at rest and protects it with TLS in transit. Terraform Cloud also knows the identity of the user requesting state and maintains a history of state changes. This can be used to control access and track activity. <a href=\"https://developer.hashicorp.com/terraform/enterprise\">Terraform Enterprise</a> also supports detailed audit logging.</p><p>The S3 backend supports encryption at rest when the <code>encrypt</code> option is enabled. IAM policies and logging can be used to identify any invalid access. Requests for the state go over a TLS connection.</p><p><strong>WRONG&nbsp;ANSWERS:</strong></p><p><strong><em>Replication?</em></strong>&nbsp;replicating the state file to another location won't prevent the original file from being accessed.</p><p><strong><em>Encryption?</em></strong> As of today, Terraform doesn't support any type of native encryption capability when writing and managing state.</p><p><a href=\"https://developer.hashicorp.com/terraform/language/state/sensitive-data\">https://developer.hashicorp.com/terraform/language/state/sensitive-data</a></p>", "answers": ["<p>store in a remote backend that encrypts state at rest</p>", "<p>use the S3 backend using the <code>encrypt</code> option to ensure state is encrypted</p>", "<p>replicate the state file to an encrypted storage device</p>", "<p>enable native encryption in Terraform as configured in the <code>terraform</code> block</p>"]}, "correct_response": ["a", "b"], "section": "Objective 7 - Implement and Maintain State", "question_plain": "You are worried about unauthorized access to the Terraform state file since it might contain sensitive information. What are some ways you can protect the state file? (select two)", "related_lectures": []}, {"_class": "assessment", "id": 70826214, "assessment_type": "multiple-choice", "prompt": {"question": "<p>True or False?&nbsp;You can move Terraform state between supported backends at any time, even after running your first <code>terraform apply</code>.</p>", "relatedLectureIds": "", "feedbacks": ["", ""], "explanation": "<p>You can change your backend configuration at any time. You can change both the configuration itself as well as the type of backend (for example from \"consul\" to \"s3\").</p><p>Terraform will automatically detect any changes in your configuration and request a <a href=\"https://developer.hashicorp.com/terraform/cli/init\">reinitialization</a>. As part of the reinitialization process, Terraform will ask if you'd like to migrate your existing state to the new configuration. This allows you to easily switch from one backend to another.</p><p><a href=\"https://developer.hashicorp.com/terraform/language/settings/backends/configuration#changing-configuration\">https://developer.hashicorp.com/terraform/language/settings/backends/configuration#changing-configuration</a></p>", "answers": ["<p>True</p>", "<p>False</p>"]}, "correct_response": ["a"], "section": "Objective 7 - Implement and Maintain State", "question_plain": "True or False?&nbsp;You can move Terraform state between supported backends at any time, even after running your first terraform apply.", "related_lectures": []}, {"_class": "assessment", "id": 70826216, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Which of the following code snippets will properly configure a Terraform backend?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Backends are configured with a nested <code>backend</code> block within the top-level <code>terraform</code> block. There are some important limitations on backend configuration:</p><p>&nbsp; * A configuration can only provide one backend block.</p><p>&nbsp; *&nbsp;A backend block cannot refer to named values (like input variables, locals, or data source attributes).</p><p><br></p><p><strong>WRONG&nbsp;ANSWERS:</strong></p><p>None of the wrong answers are correct, since the state is ONLY&nbsp;configured inside of the terraform block.</p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/language/settings/backends/configuration#using-a-backend-block\">https://developer.hashicorp.com/terraform/language/settings/backends/configuration#using-a-backend-block</a></p><p><br></p>", "answers": ["<pre class=\"prettyprint linenums\">terraform {\n  backend \"remote\" {\n    hostname = \"app.terraform.io\"\n    organization = \"btk\"\n\n  workspaces {\n    name = \"bryan-prod\"\n  }\n }\n}\n</pre>", "<pre class=\"prettyprint linenums\">backend \"s3\" {\n  bucket = \"krausen-bucket\"\n  key    = \"terraform/\"\n  region = \"us-west-2\"\n }\n}</pre>", "<pre class=\"prettyprint linenums\">provider \"consul\" {\n  address = \"consul.btk.com\"\n  scheme  = \"https\"\n  path    = \"terraform/\"\n  }\n}</pre>", "<pre class=\"prettyprint linenums\">data \"terraform_remote_state\" \"btk\" {\n  backend = \"etcd\"\n  config = {\n    path      = \"terraform/terraform.tfstate\"\n    endpoints = \"http://server1:4001\"\n  }\n}</pre>"]}, "correct_response": ["a"], "section": "Objective 7 - Implement and Maintain State", "question_plain": "Which of the following code snippets will properly configure a Terraform backend?", "related_lectures": []}, {"_class": "assessment", "id": 70826218, "assessment_type": "multi-select", "prompt": {"question": "<p>Which of the following are true regarding Terraform variables? (select two)</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>When it comes to working with variables, the value that is used in the Terraform configuration will be stored in the state file, regardless of whether the sensitive argument was set to <code>true</code>. However, the value will not be shown in the CLI output if the value was to be exported by an output block. </p><p><strong>WRONG&nbsp;ANSWERS:</strong></p><p>Beyond the value, you won't find the variable name or description in the state file because they are simply used on the development side of Terraform, and not the backend operational aspect of how Terraform works.</p><p><a href=\"https://developer.hashicorp.com/terraform/language/values/variables\">https://developer.hashicorp.com/terraform/language/values/variables</a></p><p><a href=\"https://learn.hashicorp.com/tutorials/terraform/outputs\">https://learn.hashicorp.com/tutorials/terraform/outputs</a></p><p><a href=\"https://learn.hashicorp.com/tutorials/terraform/variables\">https://learn.hashicorp.com/tutorials/terraform/variables</a></p>", "answers": ["<p>variables marked as sensitive are still stored in the state file, even though the values are obfuscated from the CLI output</p>", "<p>the default value will be found in the state file if no other value was set for the variable</p>", "<p>the variable name can be found in the state file to allow for easy searching</p>", "<p>the description of a variable will be written to state to help describe the contents of the state file</p>"]}, "correct_response": ["a", "b"], "section": "Objective 8 - Read, Generate, and Modify Configuration", "question_plain": "Which of the following are true regarding Terraform variables? (select two)", "related_lectures": []}, {"_class": "assessment", "id": 70826220, "assessment_type": "multiple-choice", "prompt": {"question": "<p>You are using modules to deploy various resources in your environment. You want to provide a \"friendly name\" for the DNS of a new web server so you can simply click the CLI&nbsp;output and access the new website. Which of the following code snippets would satisfy these requirements?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>When working with outputs, you need to determine where the value will be coming from and work your way backward from there. For example, if the resource was created inside of a module, then the module will require an output block to export that value. That said, output blocks that are created in a module aren't displayed on the Terraform CLI. Therefore, you need to create an output block in the parent/calling module to output the value while referencing the output in the module. Because of this, the correct answer requires you to create an output in the parent module and reference the output value from the module.</p><p><strong>WRONG&nbsp;ANSWERS:</strong></p><p>********************</p><p><em>Add the following code to the web module:</em></p><pre class=\"prettyprint linenums\">output \"website\" {\n  description = \"Outputs the URL of the provisioned website\" \n  value       = \"https://${aws_instance.web.public_dns}:8080/index.html\"\n}</pre><p>While this could be a way to get the proper URL, the output of a module wouldn't show up in the CLI output, therefore this is incorrect.</p><p>******************</p><p><em>Add the following code to the parent module:</em></p><pre class=\"prettyprint linenums\">output \"website\" {\n  description = \"Outputs the URL of the provisioned website\" \n  value       = aws_instance.web.public_dns\n}</pre><p>The resource was created inside of the web module, therefore you wouldn't be able to access their attributes directly from the parent module, making this an incorrect answer.</p><p>******************</p><p><em>Add the following code to the web module:</em></p><pre class=\"prettyprint linenums\">output \"website\" {\n  description = \"Outputs the URL of the provisioned website\" \n  value       = module.web.public_dns\n}\n</pre><p>Even if you could output the value from a module to the CLI, the resource ID&nbsp;for the module is incorrect because it is referring to another module, making this answer incorrect.</p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/language/modules/syntax#accessing-module-output-values\">https://developer.hashicorp.com/terraform/language/modules/syntax#accessing-module-output-values</a></p>", "answers": ["<p><em>Add the following code to the parent module:</em></p><p><br></p><pre class=\"prettyprint linenums\">output \"website\" {\n  description = \"Outputs the URL of the provisioned website\" \n  value       = \"https://${module.web.public_dns}:8080/index.html\"\n}</pre>", "<p><em>Add the following code to the web module:</em></p><p><br></p><pre class=\"prettyprint linenums\">output \"website\" {\n  description = \"Outputs the URL of the provisioned website\" \n  value       = \"https://${aws_instance.web.public_dns}:8080/index.html\"\n}</pre>", "<p><em>Add the following code to the parent module:</em></p><p><br></p><pre class=\"prettyprint linenums\">output \"website\" {\n  description = \"Outputs the URL of the provisioned website\" \n  value       = aws_instance.web.public_dns\n}</pre>", "<p><em>Add the following code to the web module:</em></p><p><br></p><pre class=\"prettyprint linenums\">output \"website\" {\n  description = \"Outputs the URL of the provisioned website\" \n  value       = module.web.public_dns\n}</pre>"]}, "correct_response": ["a"], "section": "Objective 8 - Read, Generate, and Modify Configuration", "question_plain": "You are using modules to deploy various resources in your environment. You want to provide a \"friendly name\" for the DNS of a new web server so you can simply click the CLI&nbsp;output and access the new website. Which of the following code snippets would satisfy these requirements?", "related_lectures": []}, {"_class": "assessment", "id": 70826222, "assessment_type": "multiple-choice", "prompt": {"question": "<p>True or False?&nbsp;If you have properly locked down access to your state file, it is safe to provide sensitive values inside of your Terraform configuration.</p>", "relatedLectureIds": "", "feedbacks": ["", ""], "explanation": "<p>Ok, so this was sort of a trick question because locking down your state file really has nothing to do with storing sensitive values inside of your Terraform configuration. Remember that most, if not all, of your configuration, will likely be committed to a code repository. Anybody, or any machine, with access to that code repo would now be able to read the sensitive values that were hardcoded in your Terraform configuration.</p><p>Best practice here is to provide your sensitive values OUTSIDE of Terraform, like storing and retrieving them from a secrets management platform like Vault, or using environment variables.</p><p><br></p><p><a href=\"https://learn.hashicorp.com/tutorials/terraform/sensitive-variables?in=terraform/configuration-language\">https://learn.hashicorp.com/tutorials/terraform/sensitive-variables?in=terraform/configuration-language</a></p>", "answers": ["<p>True</p>", "<p>False</p>"]}, "correct_response": ["b"], "section": "Objective 8 - Read, Generate, and Modify Configuration", "question_plain": "True or False?&nbsp;If you have properly locked down access to your state file, it is safe to provide sensitive values inside of your Terraform configuration.", "related_lectures": []}, {"_class": "assessment", "id": 70826224, "assessment_type": "multi-select", "prompt": {"question": "<p>When using collection types for variables in Terraform, which of the following <strong><em>two</em></strong> statements are true? (select two)</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Lists/tuples are represented by a pair of <strong><em>square brackets</em></strong> containing a comma-separated sequence of values, like <code>[\"a\", 15, true]</code>.</p><p>Maps/objects are represented by a pair of <strong><em>curly braces</em></strong> containing a series of <code>&lt;KEY&gt; = &lt;VALUE&gt;</code> pairs.</p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/language/expressions/types#lists-tuples\">https://developer.hashicorp.com/terraform/language/expressions/types#lists-tuples</a></p>", "answers": ["<p>lists are defined inside of square brackets, like this: <code>[\"value1\", \"value2\", \"value3\"]</code> </p>", "<p>maps are defined inside of curly braces, like this: <code>{ name = \"John\" age = 52 }</code> </p>", "<p>lists are defined inside of curly braces, like this: <code>{\"value1\", \"value2\", \"value3\"}</code> </p>", "<p>maps are defined inside of square brackets, like this: <code>[ name = \"John\" age = 52 ]</code> </p>"]}, "correct_response": ["a", "b"], "section": "Objective 8 - Read, Generate, and Modify Configuration", "question_plain": "When using collection types for variables in Terraform, which of the following two statements are true? (select two)", "related_lectures": []}, {"_class": "assessment", "id": 70826226, "assessment_type": "multiple-choice", "prompt": {"question": "<p>A new variable has been created using the <code>list</code> type as shown below. How would you reference <code>terraform</code> in your configuration?</p><p><br></p><pre class=\"prettyprint linenums\">variable \"products\" {\n    type = list(string)\n    default = [\n        \"vault\",\n        \"consul\",\n        \"terraform\",\n        \"boundary\",\n        \"nomad\"\n    ]\n}</pre>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>For a collection type such as a<code>list</code>, the provided values are referenced using an index that starts with [0]. In this case, the strings would be represented as such:</p><pre class=\"prettyprint linenums\">[0] = vault\n[1] = consul\n[2] = terraform\n[3] = boundary\n[4] = nomad\n</pre><p>When referencing a variable that contains a list, you reference it almost identically to a regular variable, except you just add the index on the end of the variable. So for <code>terraform</code>, it would simply be <code>var.products[2]</code>. </p><p><strong>WRONG&nbsp;ANSWERS:</strong></p><p><code>var.products[3]</code> = actually equals <strong>boundary</strong> since an index starts with 0</p><p><code>var.list.products[2]</code> = this isn't a valid way to reference a variable in Terraform</p><p><code>var.default.products[\"terraform\"]</code> = this isn't a valid way to reference a list variable in Terraform. If you remove the default from the answer, it could be a valid option if the variable was of type map, though.</p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/language/values/variables\">https://developer.hashicorp.com/terraform/language/values/variables</a></p>", "answers": ["<p><code>var.products[2]</code> </p>", "<p><code>var.products[3]</code> </p>", "<p><code>var.list.products[2]</code> </p>", "<p><code>var.default.products[\"terraform\"]</code> </p>"]}, "correct_response": ["a"], "section": "Objective 8 - Read, Generate, and Modify Configuration", "question_plain": "A new variable has been created using the list type as shown below. How would you reference terraform in your configuration?variable \"products\" {\n    type = list(string)\n    default = [\n        \"vault\",\n        \"consul\",\n        \"terraform\",\n        \"boundary\",\n        \"nomad\"\n    ]\n}", "related_lectures": []}, {"_class": "assessment", "id": 70826228, "assessment_type": "multiple-choice", "prompt": {"question": "<p>You have an existing resource in your public cloud that was deployed manually, but you want the ability to reference different attributes of that resource throughout your configuration without hardcoding any values. How can you accomplish this?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Anytime you need to reference a resource that is NOT part of your Terraform configuration, you need to query that resource using a data block - assuming a data source is available for that resource_type. Once you add the data block to your configuration, you will be able to export attributes from that data block using interpolation like any other resource in Terraform. For example, if you had an AWS S3 bucket, you could get information using a data block that looked like this:</p><pre class=\"prettyprint linenums\">data \"aws_s3_bucket\" \"data_bucket\" {\n  bucket = \"my-data-lookup-bucket-btk\"\n}\n</pre><p>Once you add the data block, you can refer to exported attributes like this: <code>data.aws_s3_bucket.data_bucket.arn</code> </p><p><br></p><p><strong>WRONG&nbsp;ANSWERS:</strong><br>None of the wrong answers would allow you to import or query information so that Terraform can use it through interpolation.</p><p><br></p><p><a href=\"https://learn.hashicorp.com/tutorials/terraform/data-sources\">https://learn.hashicorp.com/tutorials/terraform/data-sources</a></p><p><a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs/data-sources/s3_bucket\">https://registry.terraform.io/providers/hashicorp/aws/latest/docs/data-sources/s3_bucket</a></p>", "answers": ["<p>Add a <code>data</code> block to your configuration to query the existing resource. Use the available exported attributes of that resource type as needed throughout your configuration to get the values you need.</p>", "<p>Create a new <code>resource</code> block that matches the exact configuration of the existing resource. Run a terraform apply to import the resource. Use the available exported attributes of that resource throughout your configuration as needed.</p>", "<p>Run a <code>terraform state list</code> to find the <em>resource_id</em> of the resource you need the attributes from. Reference that <em>resource_id</em> throughout your configuration to get the exported attributes as needed.</p>", "<p>Create a new <code>variable</code> block within your configuration. Add the <em>resource_id</em> as the default value and reference the variable using <code>var.&lt;name&gt;</code> throughout your configuration as needed.</p>"]}, "correct_response": ["a"], "section": "Objective 8 - Read, Generate, and Modify Configuration", "question_plain": "You have an existing resource in your public cloud that was deployed manually, but you want the ability to reference different attributes of that resource throughout your configuration without hardcoding any values. How can you accomplish this?", "related_lectures": []}, {"_class": "assessment", "id": 70826230, "assessment_type": "multiple-choice", "prompt": {"question": "<p>What Terraform command can be used to evaluate and experiment with expressions in your configuration?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>The <code>terraform console</code> command provides an interactive command-line console for evaluating and experimenting with <a href=\"https://developer.hashicorp.com/terraform/language/expressions\">expressions</a>. This is useful for testing interpolations before using them in configurations, and for interacting with any values currently saved in <a href=\"https://developer.hashicorp.com/terraform/language/state\">state</a>.</p><p>Example from the Terraform documentation:</p><p><code>echo 'split(\",\", \"foo,bar,baz\")' | terraform console</code> </p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/console\">https://developer.hashicorp.com/terraform/cli/commands/console</a></p>", "answers": ["<p><code>terraform console</code> </p>", "<p><code>terraform env</code> </p>", "<p><code>terraform plan</code> </p>", "<p><code>terraform get</code> </p>"]}, "correct_response": ["a"], "section": "Objective 8 - Read, Generate, and Modify Configuration", "question_plain": "What Terraform command can be used to evaluate and experiment with expressions in your configuration?", "related_lectures": []}, {"_class": "assessment", "id": 70826232, "assessment_type": "multiple-choice", "prompt": {"question": "<p>True or False?&nbsp;<code>min</code>, <code>max</code>, <code>format</code>, <code>join</code>, <code>trim</code>, and <code>length</code> are examples of different expressions in Terraform.</p>", "relatedLectureIds": "", "feedbacks": ["", ""], "explanation": "<p>These are actually examples of Terraform functions, not expressions.&nbsp;Expressions would be something more in the line of <code>string</code>, <code>number</code>, <code>bool</code>, <code>null</code>, etc.</p><p>For the exam, you should go through these and understand what they do at a high level as you could get questions on using a few of them. Check out the built-in functions for Terraform here - <a href=\"https://developer.hashicorp.com/terraform/language/functions\">https://developer.hashicorp.com/terraform/language/functions</a></p>", "answers": ["<p>True</p>", "<p>False</p>"]}, "correct_response": ["b"], "section": "Objective 8 - Read, Generate, and Modify Configuration", "question_plain": "True or False?&nbsp;min, max, format, join, trim, and length are examples of different expressions in Terraform.", "related_lectures": []}, {"_class": "assessment", "id": 70826234, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Which of the following is the best description of a <code>dynamic</code> block?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>A <code>dynamic</code> block acts much like a <a href=\"https://www.terraform.io/language/expressions/for\"><code>for</code></a><a href=\"https://developer.hashicorp.com/terraform/language/expressions/for\"> expression</a>, but produces nested blocks instead of a complex typed value. It iterates over a given complex value and generates a nested block for each element of that complex value. You can dynamically construct repeatable nested blocks like <code>setting</code> using a special <code>dynamic</code> block type, which is supported inside <code>resource</code>, <code>data</code>, <code>provider</code>, and <code>provisioner</code> blocks.</p><p><br></p><p><strong>WRONG&nbsp;ANSWERS:</strong></p><p><strong><em>*&nbsp;declares a resource of a given type with a given local name =</em></strong> this is the definition of a resource block</p><p><strong><em>*&nbsp;requests that Terraform read from a given data source and export the result under the given local name =</em></strong> this is a data block</p><p><strong><em>*&nbsp;exports a value exported by a module or configuration =</em></strong> this is an output block</p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/language/expressions/dynamic-blocks\">https://developer.hashicorp.com/terraform/language/expressions/dynamic-blocks</a></p>", "answers": ["<p>produces nested configuration blocks instead of a complex typed value</p>", "<p>declares a resource of a given type with a given local name</p>", "<p>requests that Terraform read from a given data source and export the result under the given local name</p>", "<p>exports a value exported by a module or configuration </p>"]}, "correct_response": ["a"], "section": "Objective 8 - Read, Generate, and Modify Configuration", "question_plain": "Which of the following is the best description of a dynamic block?", "related_lectures": []}, {"_class": "assessment", "id": 70826236, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Given the code snippet below, how would you refer to the value of <code>ip</code> for the <code>dev</code> environment if you are using a <code>for_each </code>argument?</p><p><br></p><pre class=\"prettyprint linenums\">variable \"env\" {\n  type = map(any)\n  default = {\n    prod = {\n      ip = \"10.0.150.0/24\"\n      az = \"us-east-1a\"\n    }\n    dev  = {\n      ip = \"10.0.250.0/24\"\n      az = \"us-east-1e\"\n    }\n  }\n}</pre>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Sort of testing two different things here - a complex map variable plus the for_each argument.</p><p>A <code>for_each</code> argument will iterate over a map or set of strings and create a similar instance/resource for each item in the map or set. In our case, the map is the input variable and the \"each\" would be the higher-level map, so prod and dev.&nbsp; Underneath each value, there are two arguments, both <code>az</code> and <code>ip</code> that you can choose from.</p><p>The input variable that is shown in this example is essentially a map of maps.</p><p><br></p><p><strong>WRONG&nbsp;ANSWERS:</strong></p><p>None of the wrong answers are valid ways to reference the values provided by the input variable.</p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/language/meta-arguments/for_each\">https://developer.hashicorp.com/terraform/language/meta-arguments/for_each</a></p><p><a href=\"https://learn.hashicorp.com/tutorials/terraform/for-each\">https://learn.hashicorp.com/tutorials/terraform/for-each</a></p>", "answers": ["<p><code>each.value.ip</code> </p>", "<p><code>var.env.dev.ip</code> </p>", "<p><code>var.env[\"dev.ip\"]</code> </p>", "<p><code>each.dev.ip</code> </p>"]}, "correct_response": ["a"], "section": "Objective 8 - Read, Generate, and Modify Configuration", "question_plain": "Given the code snippet below, how would you refer to the value of ip for the dev environment if you are using a for_each argument?variable \"env\" {\n  type = map(any)\n  default = {\n    prod = {\n      ip = \"10.0.150.0/24\"\n      az = \"us-east-1a\"\n    }\n    dev  = {\n      ip = \"10.0.250.0/24\"\n      az = \"us-east-1e\"\n    }\n  }\n}", "related_lectures": []}, {"_class": "assessment", "id": 70826238, "assessment_type": "multiple-choice", "prompt": {"question": "<p>True or False?&nbsp;Terraform can only manage dependencies between resources if the <code>depends_on</code> argument is explicitly set for the dependent resources. </p>", "relatedLectureIds": "", "feedbacks": ["", ""], "explanation": "<p>The most common source of dependencies is an implicit dependency between two resources or modules. That means that Terraform builds a dependency map (aka resource graph) to help determine what resources it can create in parallel, and what resources are dependent on others based on interpolation used within the configuration.</p><p><a href=\"https://developer.hashicorp.com/terraform/internals/graph\">https://developer.hashicorp.com/terraform/internals/graph</a></p><p><a href=\"https://www.youtube.com/watch?v=Ce3RNfRbdZ0\">https://www.youtube.com/watch?v=Ce3RNfRbdZ0</a></p>", "answers": ["<p>True</p>", "<p>False</p>"]}, "correct_response": ["b"], "section": "Objective 8 - Read, Generate, and Modify Configuration", "question_plain": "True or False?&nbsp;Terraform can only manage dependencies between resources if the depends_on argument is explicitly set for the dependent resources.", "related_lectures": []}, {"_class": "assessment", "id": 70826246, "assessment_type": "multiple-choice", "prompt": {"question": "<p>True or False?&nbsp;When using Terraform Cloud, committing code to your version control system (VCS) can automatically trigger a speculative plan.</p>", "relatedLectureIds": "", "feedbacks": ["", ""], "explanation": "<p>When workspaces are linked to a VCS repository, Terraform Cloud can <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/run/ui\">automatically initiate Terraform runs</a> when changes are committed to the specified branch.</p><p><a href=\"https://developer.hashicorp.com/terraform/cloud-docs/vcs\">https://developer.hashicorp.com/terraform/cloud-docs/vcs</a></p>", "answers": ["<p>True</p>", "<p>False</p>"]}, "correct_response": ["a"], "section": "Objective 9 - Understand Terraform Cloud Capabilities", "question_plain": "True or False?&nbsp;When using Terraform Cloud, committing code to your version control system (VCS) can automatically trigger a speculative plan.", "related_lectures": []}, {"_class": "assessment", "id": 70826248, "assessment_type": "multiple-choice", "prompt": {"question": "<p>True or False? You can continue using your local Terraform CLI to execute <code>terraform plan</code> and <code>terraform apply</code> operations while using Terraform Cloud as the backend.</p>", "relatedLectureIds": "", "feedbacks": ["", ""], "explanation": "<p>If you have migrated or configured your state to use Terraform Cloud using the backend configuration, you can continue using your local Terraform CLI to execute operations while using Terraform Cloud. You can even specify the workspace you want to execute the operation in.</p><p>To configure the backend to use Terraform Cloud, you can add something like this:</p><pre class=\"prettyprint linenums\">terraform {\n  cloud {\n    organization = \"bryan\"\n\n    workspaces {\n      tags = [\"app\"]\n    }\n  }\n}</pre><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/language/settings/terraform-cloud\">https://developer.hashicorp.com/terraform/language/settings/terraform-cloud</a></p>", "answers": ["<p>True</p>", "<p>False</p>"]}, "correct_response": ["a"], "section": "Objective 9 - Understand Terraform Cloud Capabilities", "question_plain": "True or False? You can continue using your local Terraform CLI to execute terraform plan and terraform apply operations while using Terraform Cloud as the backend.", "related_lectures": []}, {"_class": "assessment", "id": 70826240, "assessment_type": "multiple-choice", "prompt": {"question": "<p>True or False?&nbsp;The terraform graph command can be used to generate a visual representation of a configuration or execution plan.</p>", "relatedLectureIds": "", "feedbacks": ["", ""], "explanation": "<p>The <code>terraform graph</code> command is used to generate a visual representation of either a configuration or execution plan. The output is in the DOT format, which can be used by <a href=\"http://www.graphviz.org/\">GraphViz</a> to generate charts.</p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/graph\">https://developer.hashicorp.com/terraform/cli/commands/graph</a></p>", "answers": ["<p>True</p>", "<p>False</p>"]}, "correct_response": ["a"], "section": "Objective 8 - Read, Generate, and Modify Configuration", "question_plain": "True or False?&nbsp;The terraform graph command can be used to generate a visual representation of a configuration or execution plan.", "related_lectures": []}, {"_class": "assessment", "id": 70826244, "assessment_type": "multiple-choice", "prompt": {"question": "<p>True or False? In both Terraform OSS and Terraform Cloud, workspaces provide similar functionality of using a separate state file for each workspace.</p>", "relatedLectureIds": "", "feedbacks": ["", ""], "explanation": "<p>This is true. When you create a new workspace using Terraform OSS/CLI using the <code>terraform workspace new</code> command, you will be working with a separate state file when working with that workspace. You can easily change between workspaces and their respective state file using the <code>terraform workspace select</code> command.</p><p>The same is true in Terraform Cloud. When you create a new workspace, you'll be working with a dedicated state file for that particular workspace. It doesn't share a state file with any other workspace.</p><p><a href=\"https://developer.hashicorp.com/terraform/cli/workspaces#the-purpose-of-workspaces\">https://developer.hashicorp.com/terraform/cli/workspaces#the-purpose-of-workspaces</a></p><p><a href=\"https://developer.hashicorp.com/terraform/cli/workspaces#interactions-with-terraform-cloud-workspaces\">https://developer.hashicorp.com/terraform/cli/workspaces#interactions-with-terraform-cloud-workspaces</a></p>", "answers": ["<p>True</p>", "<p>False</p>"]}, "correct_response": ["a"], "section": "Objective 9 - Understand Terraform Cloud Capabilities", "question_plain": "True or False? In both Terraform OSS and Terraform Cloud, workspaces provide similar functionality of using a separate state file for each workspace.", "related_lectures": []}, {"_class": "assessment", "id": 70826250, "assessment_type": "multiple-choice", "prompt": {"question": "<p>You are using Terraform Cloud to manage a new data analytics environment for your organization. You have decided to use Sentinel to enforce standardization and security controls. At what step are the Sentinel policies enforced during a run?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Sentinel policy evaluations occur <strong><em>after Terraform completes the plan</em></strong> <strong><em>and after both </em></strong><a href=\"https://developer.hashicorp.com/terraform/cloud-docs/workspaces/settings/run-tasks\"><strong><em>run tasks</em></strong></a><strong><em> and </em></strong><a href=\"https://terraform.io/cloud-dodcs/cost-estimation\"><strong><em>cost estimation</em></strong></a>. This order lets you write Sentinel policies to restrict costs based on the data in the cost estimates.</p><p>OPA policy evaluations are slightly different and occur after Terraform completes the plan and after any run tasks. Unlike Sentinel policies, Terraform Cloud evaluates OPA policies immediately before cost estimation.</p><p><a href=\"https://developer.hashicorp.com/terraform/cloud-docs/policy-enforcement/policy-results\">https://developer.hashicorp.com/terraform/cloud-docs/policy-enforcement/policy-results</a></p>", "answers": ["<p><em>after</em> the plan, run tasks, cost estimation phases but <em>before</em> the apply phase</p>", "<p><em>after</em> the apply phase has completed any required changes</p>", "<p><em>before</em> the plan phase has started to compare the changes to the existing infrastructure</p>", "<p><em>before</em> the OPA policies have been evaluated </p>"]}, "correct_response": ["a"], "section": "Objective 9 - Understand Terraform Cloud Capabilities", "question_plain": "You are using Terraform Cloud to manage a new data analytics environment for your organization. You have decided to use Sentinel to enforce standardization and security controls. At what step are the Sentinel policies enforced during a run?", "related_lectures": []}, {"_class": "assessment", "id": 70826252, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Which of the following Terraform offerings provide the ability to use a private module registry?</p>", "relatedLectureIds": "", "feedbacks": ["", ""], "explanation": "<p>You can use Terraform Provide Module Registry with Terraform Cloud (and Enterprise), but not when using Terraform OSS/CLI.</p><p><strong>WRONG ANSWER:</strong></p><p>You do not have the ability to use a private module registry with Terraform OSS.</p><p><a href=\"https://developer.hashicorp.com/terraform/cloud-docs/registry\">https://developer.hashicorp.com/terraform/cloud-docs/registry</a></p>", "answers": ["<p>Terraform OSS/CLI</p>", "<p>Terraform Cloud</p>"]}, "correct_response": ["b"], "section": "Objective 9 - Understand Terraform Cloud Capabilities", "question_plain": "Which of the following Terraform offerings provide the ability to use a private module registry?", "related_lectures": []}]}
5429662
~~~
{"count": 57, "next": null, "previous": null, "results": [{"_class": "assessment", "id": 67004822, "assessment_type": "multiple-choice", "prompt": {"question": "<p>You've included two different modules from the official Terraform registry in a new configuration file. When you run a <code>terraform init</code>, where does Terraform OSS download and store the modules locally?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>When plugins and modules are downloaded, they are stored under their respective directory in the <code>.terraform</code> folder within the current working directory. For example, providers/plugins are downloaded to <code>.terraform/providers</code> and modules are downloaded to the <code>.terraform/modules</code> directory.</p><p><br></p><p><strong>WRONG&nbsp;ANSWERS:</strong></p><p>Terraform doesn't use any of these directories to store any downloaded content when running a <code>terraform init</code></p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/language/providers#provider-installation\">https://developer.hashicorp.com/terraform/language/providers#provider-installation</a></p>", "answers": ["<p>in the <code>.terraform/modules</code> folder in the working directory</p>", "<p>in the <code>/tmp</code> directory of the machine executing Terraform</p>", "<p>in the same root directory where the Terraform configuration files are stored</p>", "<p>Terraform stores them in memory on the machine running Terraform</p>"]}, "correct_response": ["a"], "section": "Objective 5 - Interact with Terraform Modules", "question_plain": "You've included two different modules from the official Terraform registry in a new configuration file. When you run a terraform init, where does Terraform OSS download and store the modules locally?", "related_lectures": []}, {"_class": "assessment", "id": 67004824, "assessment_type": "multiple-choice", "prompt": {"question": "<p>A coworker provided you with Terraform configuration file that includes the code snippet below. Where will Terraform download the referenced module from?</p><p><br></p><pre class=\"prettyprint linenums\">terraform {\n  required_providers {\n    kubernetes = {\n      source = \"hashicorp/kubernetes\"\n      version = \"2.6.1\"\n    }\n  }\n}\n\nprovider \"kubernetes\" {\n  # Configuration below\n...</pre>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>When a module is located at <code>hashicorp/&lt;name&gt;</code>, Terraform download it from the official Terraform pubic module registry. This is specified by the <code>source</code> argument within the <code>module</code> block. The module installer supports the following source types:</p><p>&nbsp; - <a href=\"https://developer.hashicorp.com/terraform/language/modules/sources#local-paths\">Local paths</a></p><p>&nbsp; - <a href=\"https://developer.hashicorp.com/terraform/language/modules/sources#terraform-registry\">Terraform Registry</a></p><p>&nbsp; - <a href=\"https://developer.hashicorp.com/terraform/language/modules/sources#github\">GitHub</a></p><p>&nbsp; - <a href=\"https://developer.hashicorp.com/terraform/language/modules/sources#bitbucket\">Bitbucket</a></p><p>&nbsp; - Generic <a href=\"https://developer.hashicorp.com/terraform/language/modules/sources#generic-git-repository\">Git</a>, <a href=\"https://developer.hashicorp.com/terraform/language/modules/sources#generic-mercurial-repository\">Mercurial</a> repositories</p><p>&nbsp; - <a href=\"https://developer.hashicorp.com/terraform/language/modules/sources#http-urls\">HTTP URLs</a></p><p>&nbsp; - <a href=\"https://developer.hashicorp.com/terraform/language/modules/sources#s3-bucket\">S3 buckets</a></p><p>&nbsp; - <a href=\"https://developer.hashicorp.com/terraform/language/modules/sources#gcs-bucket\">GCS buckets</a></p><p>&nbsp; - <a href=\"https://developer.hashicorp.com/terraform/language/modules/sources#modules-in-package-sub-directories\">Modules in Package Sub-directories</a></p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/language/modules/sources#terraform-registry\">https://developer.hashicorp.com/terraform/language/modules/sources#terraform-registry</a></p>", "answers": ["<p>the official Terraform public module registry</p>", "<p>from the configured VCS provider in the <code>hashicorp/kubernetes</code> repo</p>", "<p>from the official Kubernetes public GitHub repo</p>", "<p>from the <code>hashicorp/kubernetes</code> directory where Terraform is executed</p>"]}, "correct_response": ["a"], "section": "Objective 5 - Interact with Terraform Modules", "question_plain": "A coworker provided you with Terraform configuration file that includes the code snippet below. Where will Terraform download the referenced module from?terraform {\n  required_providers {\n    kubernetes = {\n      source = \"hashicorp/kubernetes\"\n      version = \"2.6.1\"\n    }\n  }\n}\n\nprovider \"kubernetes\" {\n  # Configuration below\n...", "related_lectures": []}, {"_class": "assessment", "id": 67004826, "assessment_type": "multiple-choice", "prompt": {"question": "<p>A child module created a new subnet for some new workloads. What Terraform block type would allow you to pass the subnet ID back to the parent module?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>The resources defined in a module are encapsulated, so the calling module cannot access their attributes directly. However, the child module can declare <a href=\"https://developer.hashicorp.com/terraform/language/values/outputs\">output values</a> to selectively export certain values to be accessed by the calling module.</p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/language/modules/syntax#accessing-module-output-values\">https://developer.hashicorp.com/terraform/language/modules/syntax#accessing-module-output-values</a></p>", "answers": ["<p><code>output</code> block</p>", "<p><code>data</code> block</p>", "<p><code>terraform</code> block</p>", "<p><code>resource</code> block</p>"]}, "correct_response": ["a"], "section": "Objective 5 - Interact with Terraform Modules", "question_plain": "A child module created a new subnet for some new workloads. What Terraform block type would allow you to pass the subnet ID back to the parent module?", "related_lectures": []}, {"_class": "assessment", "id": 67004828, "assessment_type": "multiple-choice", "prompt": {"question": "<p>You have a number of different variables in a parent module that calls multiple child modules. Can the child modules refer to <em>any</em> of the variables declared in the parent module? </p>", "relatedLectureIds": "", "feedbacks": ["", "", ""], "explanation": "<p>Child modules can only access values that are passed in the calling module block.</p><p>The resources defined in a module are encapsulated, so the calling module cannot access its attributes directly. However, the child module can declare <a href=\"https://developer.hashicorp.com/terraform/language/values/outputs\">output values</a> to selectively export certain values to be accessed by the calling module.</p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/language/values/outputs\">https://developer.hashicorp.com/terraform/language/values/outputs</a></p><p><a href=\"https://developer.hashicorp.com/terraform/language/modules/syntax#accessing-module-output-values\">https://developer.hashicorp.com/terraform/language/modules/syntax#accessing-module-output-values</a></p>", "answers": ["<p>Not the variable, but it can only refer to values that are passed to the child module</p>", "<p>No, child modules can never refer to any variables or values declared in the parent module</p>", "<p>Yes, child modules can refer to any variable in a parent module</p>"]}, "correct_response": ["a"], "section": "Objective 5 - Interact with Terraform Modules", "question_plain": "You have a number of different variables in a parent module that calls multiple child modules. Can the child modules refer to any of the variables declared in the parent module?", "related_lectures": []}, {"_class": "assessment", "id": 67004830, "assessment_type": "multiple-choice", "prompt": {"question": "<p>True or False?&nbsp;When you are referencing a module, you must specify the version of the module in the calling module block.</p>", "relatedLectureIds": "", "feedbacks": ["", ""], "explanation": "<p>While it's not required, we recommend explicitly constraining the acceptable version numbers to avoid unexpected or unwanted changes. Use the <code>version</code> argument in the <code>module</code> block to specify versions.</p><p><br></p><pre class=\"prettyprint linenums\">module \"consul\" {\n  source  = \"hashicorp/consul/aws\"\n  version = \"0.0.5\"\n\n  servers = 3\n}</pre><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/language/expressions/version-constraints\">https://developer.hashicorp.com/terraform/language/expressions/version-constraints</a></p>", "answers": ["<p>True</p>", "<p>False</p>"]}, "correct_response": ["b"], "section": "Objective 5 - Interact with Terraform Modules", "question_plain": "True or False?&nbsp;When you are referencing a module, you must specify the version of the module in the calling module block.", "related_lectures": []}, {"_class": "assessment", "id": 67004832, "assessment_type": "multiple-choice", "prompt": {"question": "<p>True or False?&nbsp;Running a <code>terraform apply</code> will fail if you do not run a <code>terraform plan</code> first.</p>", "relatedLectureIds": "", "feedbacks": ["", ""], "explanation": "<p>You do NOT need to run a <code>terraform plan</code> before running <code>terraform apply</code>. When you execute a <code>terraform apply</code>, it will actually run its own \"plan\" to make sure it knows what resources to update.</p><p>The most straightforward way to use <code>terraform apply</code> is to run it without any arguments at all, in which case it will automatically create a new execution plan (as if you had run <code>terraform plan</code>) and then prompt you to approve that plan, before taking the indicated actions.</p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/apply\">https://developer.hashicorp.com/terraform/cli/commands/apply</a></p>", "answers": ["<p>True</p>", "<p>False</p>"]}, "correct_response": ["b"], "section": "Objective 6 - Use the Core Terraform Workflow", "question_plain": "True or False?&nbsp;Running a terraform apply will fail if you do not run a terraform plan first.", "related_lectures": []}, {"_class": "assessment", "id": 67004834, "assessment_type": "multiple-choice", "prompt": {"question": "<p>After hours of development, you've created a new Terraform configuration from scratch and now you want to test it. Before you can provision the resources, what is the first command that you should run?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>When you develop new Terraform code, and you're ready to test it out, the first thing you need to do is run <code>terraform init</code> in order to initialize the working directory and download any required providers or referenced modules. Even if you're in a directory that has some of these plugins, you should still run <code>terraform init</code> to make sure all the providers have been downloaded. You could even run a <code>terraform init -upgrade</code> to ensure you have the latest versions of the plugins that meet your requirements.</p><p><br></p><p><strong>WRONG&nbsp;ANSWERS:</strong></p><p>None of these commands would work if you haven't initialized the working directory yet. You would get an error similar to this:</p><p><br></p><pre class=\"prettyprint linenums\">\u2502 Error: Could not load plugin\n\u2502 \n\u2502 \n\u2502 Plugin reinitialization required. Please run \"terraform init\".\n\u2502 \n\u2502 Plugins are external binaries that Terraform uses to access and manipulate\n\u2502 resources. The configuration provided requires plugins which can't be located,\n\u2502 don't satisfy the version constraints, or are otherwise incompatible.\n\u2502 \n\u2502 Terraform automatically discovers provider requirements from your\n\u2502 configuration, including providers used in child modules. To see the\n\u2502 requirements and constraints, run \"terraform providers\".\n\u2502 \n\u2502 failed to instantiate provider \"registry.terraform.io/hashicorp/aws\" to obtain schema:\n\u2502 unknown provider \"registry.terraform.io/hashicorp/aws\"\n</pre><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/init\">https://developer.hashicorp.com/terraform/cli/commands/init</a></p>", "answers": ["<p><code>terraform init</code> </p>", "<p><code>terraform import</code> </p>", "<p><code>terraform apply</code> </p>", "<p><code>terraform validate</code> </p>"]}, "correct_response": ["a"], "section": "Objective 6 - Use the Core Terraform Workflow", "question_plain": "After hours of development, you've created a new Terraform configuration from scratch and now you want to test it. Before you can provision the resources, what is the first command that you should run?", "related_lectures": []}, {"_class": "assessment", "id": 67004836, "assessment_type": "multiple-choice", "prompt": {"question": "<p>What actions does a <code>terraform init</code> perform for you?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>One of the functions that a <code>terraform init</code> does for you is download any referenced modules/plugins so they can be used locally. This is required before you run most other terraform CLI&nbsp;commands.</p><p><br></p><p><strong>WRONG&nbsp;ANSWERS:</strong></p><p><strong><em>&nbsp; - ensures any configuration file that ends with a </em></strong><code><strong><em>.tf</em></strong></code><strong><em> file extension is syntactically valid and internally consistent -</em></strong> this is the job of <code>terraform validate</code>, not <code>terraform init</code></p><p><strong><em>&nbsp; - ensures that all terraform files match the canonical formatting and style - </em></strong>this is done by the CLI command <code>terraform fmt</code> </p><p><strong><em>&nbsp; - compares the current configuration to the prior state and notes any differences -</em></strong> nope, that's what a <code>terraform plan</code> will do for you, not <code>terraform init</code> </p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/init\">https://developer.hashicorp.com/terraform/cli/commands/init</a></p>", "answers": ["<p>downloads plugins and retrieves the source code for referenced modules</p>", "<p>ensures any configuration file that ends with a <code>.tf</code> file extension is syntactically valid and internally consistent</p>", "<p>ensures that all Terraform files match the canonical formatting and style</p>", "<p>compares the current configuration to the prior state and notes any differences</p>"]}, "correct_response": ["a"], "section": "Objective 6 - Use the Core Terraform Workflow", "question_plain": "What actions does a terraform init perform for you?", "related_lectures": []}, {"_class": "assessment", "id": 67004838, "assessment_type": "multi-select", "prompt": {"question": "<p>Which of the following are tasks that <code>terraform apply</code> can perform? (select three)</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>The <code>terraform apply</code> command executes the actions proposed in a Terraform plan. This works the same regardless of whether you have existing infrastructure deployed and changes are needed, or if you are just deploying your infrastructure for the first time. The <code>terraform apply</code> command can also destroy infrastructure by passing the <code>-destroy</code> flag as well.</p><p><br></p><p><strong>WRONG&nbsp;ANSWER:</strong></p><p>Running a <code>terraform apply</code> cannot import infrastructure to pull under Terraform management. That's the job of the <code>terraform import</code> command</p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/apply\">https://developer.hashicorp.com/terraform/cli/commands/apply</a></p><p><a href=\"https://learn.hashicorp.com/collections/terraform/aws-get-started\">https://learn.hashicorp.com/collections/terraform/aws-get-started</a></p>", "answers": ["<p>provision new infrastructure</p>", "<p>destroy infrastructure previously deployed with Terraform</p>", "<p>update existing infrastructure with new configurations</p>", "<p>import existing infrastructure</p>"]}, "correct_response": ["a", "b", "c"], "section": "Objective 6 - Use the Core Terraform Workflow", "question_plain": "Which of the following are tasks that terraform apply can perform? (select three)", "related_lectures": []}, {"_class": "assessment", "id": 67004840, "assessment_type": "multiple-choice", "prompt": {"question": "<p>You have infrastructure deployed with Terraform. A developer recently submitted a support ticket to update a security group to permit a new port. To satisfy the ticket, you update the Terraform configuration to reflect the changes and run a <code>terraform plan</code>. However, a co-worker has since logged into the console and manually updated the security group.</p><p>What will happen when you run a <code>terraform apply</code>?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>A <code>terraform apply</code> will run its own state refresh and see the configuration matches the deployed infrastructure, so no changes will be made to the infrastructure.</p><p><br></p><p><strong>WRONG&nbsp;ANSWERS:</strong></p><p><strong><em>Terraform will detect the drift and return an error - </em></strong>since terraform apply will refresh state, it will see that the configuration has changed and now meets the desired state, therefore it won't do anything.</p><p><strong><em>the security group will be changed back to the original configuration -</em></strong> this won't happen because the Terraform configuration now states it should have the new port. If Terraform changed it back to the original configuration, the real-world resources would NOT match the desired state</p><p><strong><em>the terraform apply command will require you to re-run the terraform plan command first -</em></strong> terraform plan is not a requirement of the terraform apply command, so this won't happen</p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/apply\">https://developer.hashicorp.com/terraform/cli/commands/apply</a></p>", "answers": ["<p>Nothing will happen. Terraform will validate the infrastructure matches the desired state.</p>", "<p>Terraform will detect the drift and return an error.</p>", "<p>the security group will be changed back to the original configuration</p>", "<p>the <code>terraform apply</code> command will require you to re-run the <code>terraform plan</code> command first</p>"]}, "correct_response": ["a"], "section": "Objective 6 - Use the Core Terraform Workflow", "question_plain": "You have infrastructure deployed with Terraform. A developer recently submitted a support ticket to update a security group to permit a new port. To satisfy the ticket, you update the Terraform configuration to reflect the changes and run a terraform plan. However, a co-worker has since logged into the console and manually updated the security group.What will happen when you run a terraform apply?", "related_lectures": []}, {"_class": "assessment", "id": 67004842, "assessment_type": "multiple-choice", "prompt": {"question": "<p>By default, where does Terraform CLI store its state?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Terraform must store state about your managed infrastructure and configuration. This state is used by Terraform to map real-world resources to your configuration, keep track of metadata, and improve performance for large infrastructures.</p><p>Terraform will store its state in the <code>terraform.tfstate</code> file on the local backend. This is the default but you can always change it if you want.</p><p><a href=\"https://developer.hashicorp.com/terraform/language/state\">https://developer.hashicorp.com/terraform/language/state</a></p>", "answers": ["<p>in the <code>terraform.tfstate</code> file on the local backend</p>", "<p>in the <code>default</code> workspace in Terraform Cloud</p>", "<p>in the <code>.terraform</code> directory within the current working directory</p>", "<p>in a <code>temp</code> directory on the local machine executing the Terraform configurations</p>"]}, "correct_response": ["a"], "section": "Objective 7 - Implement and Maintain State", "question_plain": "By default, where does Terraform CLI store its state?", "related_lectures": []}, {"_class": "assessment", "id": 67004844, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Both you and a colleague are responsible for maintaining resources that host multiple applications using Terraform CLI. What feature of Terraform helps ensure only a single person can update or make changes to the resources Terraform is managing?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>If supported by your <a href=\"https://developer.hashicorp.com/terraform/language/settings/backends/configuration\">backend</a>, Terraform will lock your state for all operations that could write state. This prevents others from acquiring the lock and potentially corrupting your state.</p><p>State locking happens automatically on all operations that could write state. You won't see any message that it is happening. If state locking fails, Terraform will not continue. You can disable state locking for most commands with the <code>-lock</code> flag but it is not recommended.</p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/language/state/locking\">https://developer.hashicorp.com/terraform/language/state/locking</a></p>", "answers": ["<p>state locking</p>", "<p>provisioners</p>", "<p>version control</p>", "<p>local backend</p>"]}, "correct_response": ["a"], "section": "Objective 7 - Implement and Maintain State", "question_plain": "Both you and a colleague are responsible for maintaining resources that host multiple applications using Terraform CLI. What feature of Terraform helps ensure only a single person can update or make changes to the resources Terraform is managing?", "related_lectures": []}, {"_class": "assessment", "id": 67004846, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Where is the most secure place to store credentials when using a remote backend?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Anytime you can configure these credentials outside of Terraform is your best choice. Environment variables would be the second most-secure choice here. The primary focus is to ensure your credentials are not stored in plaintext and committed to a code repository. <strong><em>NOTE:</em></strong><em>&nbsp;You could use an encrypted file to store credentials and that encrypted file could be accessed by Terraform to read the creds.</em></p><p><br></p><p><strong>WRONG&nbsp;ANSWERS:</strong></p><p><strong><em>environment variables -</em></strong> this is the SECOND&nbsp;best choice here, with storing outside of Terraform using a credential file being the best choice</p><p><strong><em>in the backend configuration block where the remote state location is defined -</em></strong> this is exactly what we DO&nbsp;NOT want to do because the creds are now stored in cleartext, which isn't desirable. Also, backend config might also get committed to a code repo.</p><p><strong><em>using an input variable defined in your </em></strong><code><strong><em>variables.tf</em></strong></code><strong><em> file -</em></strong> this is another example of what we DO&nbsp;NOT want - storing the credentials in a cleartext file</p><p><br></p><p><a href=\"https://blog.gruntwork.io/a-comprehensive-guide-to-managing-secrets-in-your-terraform-code-1d586955ace1\">https://blog.gruntwork.io/a-comprehensive-guide-to-managing-secrets-in-your-terraform-code-1d586955ace1</a></p>", "answers": ["<p>defined outside of Terraform </p>", "<p>environment variables</p>", "<p>in the backend configuration block where the remote state location is defined</p>", "<p>using an input variable defined in your <code>variables.tf</code> file</p>"]}, "correct_response": ["a"], "section": "Objective 7 - Implement and Maintain State", "question_plain": "Where is the most secure place to store credentials when using a remote backend?", "related_lectures": []}, {"_class": "assessment", "id": 67004848, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Beyond storing state, what capability can an enhanced storage backend, such as the remote backend, provide your organization?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Using an enhanced storage backend allows you to execute your Terraform on infrastructure either locally or in Terraform Cloud. Note that this <strong><em>enhanced storage backend</em></strong> term has now been deprecated by Terraform but it's likely to show up in the test for a while. See the <a href=\"https://developer.hashicorp.com/terraform/language/settings/backends/configuration#what-backends-do\">note below from this site:</a></p><p><strong><em>Note:</em></strong><em> In Terraform versions prior to 1.1.0, backends were also classified as being 'standard' or 'enhanced', where the latter term referred to the ability of the </em><a href=\"https://developer.hashicorp.com/terraform/language/settings/backends/remote\"><em>remote backend</em></a><em> to store state and perform Terraform operations. This classification has been removed, clarifying the primary purpose of backends. Refer to </em><a href=\"https://developer.hashicorp.com/terraform/cli/cloud\"><em>Using Terraform Cloud</em></a><em> for details about how to store state, execute remote operations, and use Terraform Cloud directly from Terraform.</em></p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/language/settings/backends/configuration#what-backends-do\">https://developer.hashicorp.com/terraform/language/settings/backends/configuration#what-backends-do</a></p>", "answers": ["<p>execute your Terraform on infrastructure either locally or in Terraform Cloud</p>", "<p>replicate your state to a secondary location for backup</p>", "<p>allow multiple people to execute operations on the state file at the same time</p>", "<p>provides versioning capabilities on your state file in the event it becomes corrupted</p>"]}, "correct_response": ["a"], "section": "Objective 7 - Implement and Maintain State", "question_plain": "Beyond storing state, what capability can an enhanced storage backend, such as the remote backend, provide your organization?", "related_lectures": []}, {"_class": "assessment", "id": 67004850, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Your organization has multiple engineers that have permission to manage Terraform as well as administrative access to the public cloud where these resources are provisioned. If an engineer makes a change outside of Terraform, what command can you run to detect drift and update the state file?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>To instruct Terraform to refresh the state file based on the current configuration of managed resources, you can use the <code>terraform apply -refresh-only</code> command. If Terraform discovers drift, it will update the state file with the changes.</p><p>Note that <code>terraform refresh</code> used to be the correct command here, but that command is deprecated. It might show up on the exam though.</p><p><br></p><p><a href=\"https://learn.hashicorp.com/tutorials/terraform/refresh\">https://learn.hashicorp.com/tutorials/terraform/refresh</a></p>", "answers": ["<p><code>terraform apply -refresh-only</code> </p>", "<p><code>terraform state list</code> </p>", "<p><code>terraform init</code> </p>", "<p><code>terraform get</code> </p>"]}, "correct_response": ["a"], "section": "Objective 7 - Implement and Maintain State", "question_plain": "Your organization has multiple engineers that have permission to manage Terraform as well as administrative access to the public cloud where these resources are provisioned. If an engineer makes a change outside of Terraform, what command can you run to detect drift and update the state file?", "related_lectures": []}, {"_class": "assessment", "id": 67004852, "assessment_type": "multiple-choice", "prompt": {"question": "<p>True or False?&nbsp;Input variables that are marked as sensitive are NOT written to Terraform state.</p>", "relatedLectureIds": "", "feedbacks": ["", ""], "explanation": "<p>While the value is not shown in the Terraform CLI output, the value will still be written to state. This is why it's important to secure your state file wherever possible.</p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/language/state/sensitive-data\">https://developer.hashicorp.com/terraform/language/state/sensitive-data</a></p>", "answers": ["<p>True</p>", "<p>False</p>"]}, "correct_response": ["b"], "section": "Objective 8 - Read, Generate, and Modify Configuration", "question_plain": "True or False?&nbsp;Input variables that are marked as sensitive are NOT written to Terraform state.", "related_lectures": []}, {"_class": "assessment", "id": 67004854, "assessment_type": "multiple-choice", "prompt": {"question": "<p>You need to input variables that follow a key/value type structure. What type of variable would be used for this use case?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Map is the best choice for this use case because it allows you to create a key/value structure that can easily be referenced in your Terraform configuration.</p><p><br></p><p><strong>WRONG&nbsp;ANSWERS:</strong></p><p><strong><em>&nbsp; - use a </em></strong><code><strong><em>list of strings</em></strong></code><strong><em> for this use case -</em></strong> nope, this is just a list of strings that wouldn't create a key/value structure. '</p><p><strong><em>&nbsp; - use a </em></strong><code><strong><em>string</em></strong></code><strong><em> variable to accomplish this task -</em></strong> nope, this would allow you to just create a single string value</p><p><strong><em>&nbsp; - use an </em></strong><code><strong><em>array</em></strong></code><strong><em> to satisfy the requirement -</em></strong> array isn't a valid Type constraint in Terraform</p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/language/expressions/types#maps-objects\">https://developer.hashicorp.com/terraform/language/expressions/types#maps-objects</a></p>", "answers": ["<p>use a <code>map</code> to satisfy this requirement</p>", "<p>use a <code>list of strings</code> for this use case</p>", "<p>use a <code>string</code> variable to accomplish this task</p>", "<p>use an <code>array</code> to satisfy the requirement</p>"]}, "correct_response": ["a"], "section": "Objective 8 - Read, Generate, and Modify Configuration", "question_plain": "You need to input variables that follow a key/value type structure. What type of variable would be used for this use case?", "related_lectures": []}, {"_class": "assessment", "id": 67004856, "assessment_type": "multiple-choice", "prompt": {"question": "<p>You need to set the value for a Terraform input variable. Which of the following allows you to set the value using an environment variable?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>As a fallback for the other ways of defining variables, Terraform searches the environment of its own process for environment variables named <code>TF_VAR_</code> followed by the name of a declared variable. </p><p><strong><br>WRONG&nbsp;ANSWERS:</strong></p><p>None of the other environment variables shown as answers will successfully set a value for a Terraform variable.</p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/language/values/variables#environment-variables\">https://developer.hashicorp.com/terraform/language/values/variables#environment-variables</a></p>", "answers": ["<p><code>export TF_VAR_user=dbadmin01</code> </p>", "<p><code>export VAR_database=prodsql01</code> </p>", "<p><code>export TF_db-pass=P@ssw0rd01!</code> </p>", "<p><code>export TF_VARIABLE_app=eCommerce01</code> </p>"]}, "correct_response": ["a"], "section": "Objective 8 - Read, Generate, and Modify Configuration", "question_plain": "You need to set the value for a Terraform input variable. Which of the following allows you to set the value using an environment variable?", "related_lectures": []}, {"_class": "assessment", "id": 67004858, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Given the following code snippet, what is the managed resource name for this particular resource?</p><p><br></p><pre class=\"prettyprint linenums\">resource \"aws_vpc\" \"prod-vpc\" {\n  cidr_block = var.vpc_cidr\n\n  tags = {\n    Name        = var.vpc_name\n    Environment = \"demo_environment\"\n    Terraform   = \"true\"\n  }\n\n  enable_dns_hostnames = true\n}</pre>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p><code>prod-vpc</code> is the managed resource name for this resource. More specifically, you'd use <code>aws_vpc.prod-vpc</code> address to refer to this resource in your code, like this: </p><p><br></p><pre class=\"prettyprint linenums\">output \"vpc_id\" {\n  value = aws_vpc.prod-vpc.id\n}</pre><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/cli/state/resource-addressing\">https://developer.hashicorp.com/terraform/cli/state/resource-addressing</a></p>", "answers": ["<p><code>prod-vpc</code> </p>", "<p><code>aws_vpc</code> </p>", "<p><code>resource.aws_vpc</code> </p>", "<p><code>demo environment</code> </p>"]}, "correct_response": ["a"], "section": "Objective 8 - Read, Generate, and Modify Configuration", "question_plain": "Given the following code snippet, what is the managed resource name for this particular resource?resource \"aws_vpc\" \"prod-vpc\" {\n  cidr_block = var.vpc_cidr\n\n  tags = {\n    Name        = var.vpc_name\n    Environment = \"demo_environment\"\n    Terraform   = \"true\"\n  }\n\n  enable_dns_hostnames = true\n}", "related_lectures": []}, {"_class": "assessment", "id": 67004860, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Given the code snippet below, how would you identify the <code>arn</code> to be used in the output block that was retrieved by the data block?</p><p><br></p><pre class=\"prettyprint linenums\">data \"aws_s3_bucket\" \"data-bucket\" {\n  bucket = \"my-data-lookup-bucket-btk\"\n}\n...\n\noutput \"s3_bucket_arn\" {\n  value = ????\n}</pre>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>To refer to a resource, you'd use <code>&lt;block type&gt;.&lt;resource type&gt;.&lt;name&gt;</code> . In this case, the <code>&lt;block type&gt;</code> is <strong>data</strong>, the <code>&lt;resource type&gt;</code> is <strong>aws_s3_bucket</strong>, and then you'd add the <strong>arn</strong> attribute at the end.</p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/cli/state/resource-addressing\">https://developer.hashicorp.com/terraform/cli/state/resource-addressing</a></p>", "answers": ["<p><code>data.aws_s3_bucket.data-bucket.arn</code> </p>", "<p><code>data.aws_s3_bucket.arn</code> </p>", "<p><code>aws_s3_bucket.data-bucket</code> </p>", "<p><code>data.aws_s3_bucket.data-bucket</code> </p>"]}, "correct_response": ["a"], "section": "Objective 8 - Read, Generate, and Modify Configuration", "question_plain": "Given the code snippet below, how would you identify the arn to be used in the output block that was retrieved by the data block?data \"aws_s3_bucket\" \"data-bucket\" {\n  bucket = \"my-data-lookup-bucket-btk\"\n}\n...\n\noutput \"s3_bucket_arn\" {\n  value = ????\n}", "related_lectures": []}, {"_class": "assessment", "id": 67004862, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Which statement below is <strong><em>true</em></strong> regarding using Sentinel in Terraform Enterprise?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p><a href=\"https://www.hashicorp.com/sentinel\">Sentinel</a> is an embedded policy-as-code framework integrated with the HashiCorp Enterprise products. It enables fine-grained, logic-based policy decisions, and can be extended to use information from external sources.</p><p>When using Sentinel policies to define and enforce policies, it (Sentinel) runs after a <code>terraform plan</code>, but before a <code>terraform apply</code>. Therefore, you can potentially reduce costs on public cloud resources by NOT deploying resources that do NOT conform to policies enforced by Sentinel. For example, without Sentinel, your dev group might deploy instances that are too large, or too many of them, by accident or just because they can. Rather than being <em>REACTIVE</em> and shutting them down after they have been deployed, which it would cost you $, you can use Sentinel to prevent those large resources from being deployed in the first place. </p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/cloud-docs/policy-enforcement\">https://developer.hashicorp.com/terraform/cloud-docs/policy-enforcement</a></p>", "answers": ["<p>Sentinel runs before a configuration is applied, therefore potentially reducing cost for public cloud resources</p>", "<p>Sentinel can extend the functionality of user permissions in Terraform Enterprise</p>", "<p>Sentinel runs before each phase of the Terraform workflow, meaning a <code>terraform init</code>, <code>terraform plan</code>, and <code>terraform apply</code> </p>", "<p>Sentinel policies can be developed using HCL,&nbsp;JSON, or YAML</p>"]}, "correct_response": ["a"], "section": "Objective 9 - Understand Terraform Cloud Capabilities", "question_plain": "Which statement below is true regarding using Sentinel in Terraform Enterprise?", "related_lectures": []}, {"_class": "assessment", "id": 67004864, "assessment_type": "multiple-choice", "prompt": {"question": "<p>True or False?&nbsp;In Terraform OSS, workspaces generally use the same code repository while workspaces in Terraform Enterprise/Cloud are often mapped to different code repositories.</p>", "relatedLectureIds": "", "feedbacks": ["", ""], "explanation": "<p>Workspaces in OSS are often used within the same working directory while workspaces in Enterprise/Cloud are often (but not required) mapped to unique repos.</p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/language/state/workspaces\">https://developer.hashicorp.com/terraform/language/state/workspaces</a></p><p><a href=\"https://developer.hashicorp.com/terraform/cloud-docs/workspaces\">https://developer.hashicorp.com/terraform/cloud-docs/workspaces</a></p>", "answers": ["<p>True</p>", "<p>False</p>"]}, "correct_response": ["a"], "section": "Objective 9 - Understand Terraform Cloud Capabilities", "question_plain": "True or False?&nbsp;In Terraform OSS, workspaces generally use the same code repository while workspaces in Terraform Enterprise/Cloud are often mapped to different code repositories.", "related_lectures": []}, {"_class": "assessment", "id": 67004782, "assessment_type": "multiple-choice", "prompt": {"question": "<p>What is <strong><em>NOT</em></strong> a benefit of using Infrastructure as Code?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Although Infrastructure as Code (IaC) tools allow you to programmatically deploy and manage your applications, it does NOT&nbsp;ensure that your applications have a reduced number of vulnerabilities. This security feature is not the responsibility of IaC, and you would need to pair IaC with another tool to scan your code to identify security vulnerabilities.</p><p><br></p><p><strong>WRONG&nbsp;ANSWERS:</strong></p><p>All of the wrong answers in this question are actually the primary use cases of Infrastructure as Code tools.</p><p>Infrastructure as code (IaC) tools allow you to manage infrastructure with configuration files rather than through a graphical user interface. IaC allows you to build, change, and manage your infrastructure in a safe, consistent, and repeatable way by defining resource configurations that you can version, reuse, and share.</p><p><br></p><p><a href=\"https://learn.hashicorp.com/tutorials/terraform/infrastructure-as-code\">https://learn.hashicorp.com/tutorials/terraform/infrastructure-as-code</a></p>", "answers": ["<p>reducing vulnerabilities in your publicly-facing applications</p>", "<p>the reduction of misconfigurations that could lead to security vulnerabilities and unplanned downtime</p>", "<p>your infrastructure configurations can be version controlled and stored in a code repository alongside the application code</p>", "<p>the ability to programmatically deploy infrastructure</p>"]}, "correct_response": ["a"], "section": "Objective 1 - Understand Infrastructure as Code Concepts", "question_plain": "What is NOT a benefit of using Infrastructure as Code?", "related_lectures": []}, {"_class": "assessment", "id": 67004784, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Infrastructure as Code (IaC) provides many benefits to help organizations deploy application infrastructure much faster than manually clicking in the console. Which is NOT an additional benefit to IaC?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Eliminating API communication to the target platform is NOT a benefit of IaC. In fact, Terraform likely increases communication with the backend platform since Terraform uses the platform's API to build and manage infrastructure.</p><p>Remember that Terraform providers/plugins are essentially the features that enable communication with the platform's API on your behalf.</p><p><br></p><p><strong>WRONG&nbsp;ANSWERS:</strong></p><p>All of the wrong answers are essentially direct benefits of using Terraform.</p><p><br></p><p><a href=\"https://learn.hashicorp.com/tutorials/terraform/infrastructure-as-code\">https://learn.hashicorp.com/tutorials/terraform/infrastructure-as-code</a></p><p><br></p>", "answers": ["<p>eliminates API communication to the target platform</p>", "<p>allows infrastructure to be versioned</p>", "<p>code can easily be shared and reused</p>", "<p>creates self-documenting infrastructure</p>"]}, "correct_response": ["a"], "section": "Objective 1 - Understand Infrastructure as Code Concepts", "question_plain": "Infrastructure as Code (IaC) provides many benefits to help organizations deploy application infrastructure much faster than manually clicking in the console. Which is NOT an additional benefit to IaC?", "related_lectures": []}, {"_class": "assessment", "id": 67004786, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Which of the following is an advantage of using Infrastructure as Code?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>IaC helps organizations standardize their deployment workflows since they can codify and automate the deployment of applications and underlying infrastructure.</p><p><br></p><p><strong>WRONG&nbsp;ANSWERS:</strong></p><p><strong><em>increase the time to market for application deployment</em></strong> - nope, who wants to use a tool that would INCREASE the time to market for application deployment?&nbsp;We want to find tools that DECREASE&nbsp;it.</p><p><strong><em>simplification of using a user interface to define your infrastructure </em></strong>- Nah, we want to move quickly, and using a user interface for any tool likely slows us down and increases our chances of human error. We want to use a CLI or API for our changes so it's quick and predictable. </p><p><strong><em>elimination of security vulnerabilities in your application deployment workflow</em></strong> - while Terraform could help with the security of your workflow, it doesn't guarantee it since Terraform just deploys what you tell it. It's not checking for security requirements or vulnerabilities or anything like that</p><p><br></p><p><a href=\"https://learn.hashicorp.com/tutorials/terraform/infrastructure-as-code\">https://learn.hashicorp.com/tutorials/terraform/infrastructure-as-code</a></p>", "answers": ["<p>standardize your deployment workflow</p>", "<p>increase the time to market for application deployment</p>", "<p>simplification of using a user interface to define your infrastructure</p>", "<p>elimination of security vulnerabilities in your application deployment workflow</p>"]}, "correct_response": ["a"], "section": "Objective 1 - Understand Infrastructure as Code Concepts", "question_plain": "Which of the following is an advantage of using Infrastructure as Code?", "related_lectures": []}, {"_class": "assessment", "id": 67004788, "assessment_type": "multiple-choice", "prompt": {"question": "<p>True or False? Infrastructure as code (IaC) tools allow you to manage infrastructure with configuration files rather than through a graphical user interface.</p>", "relatedLectureIds": "", "feedbacks": ["", ""], "explanation": "<p>This is true, although there are tools out there that have UIs to deploy IaC. However, the goal is to reduce or eliminate the need to use a UI to deploy infrastructure and applications.</p><p><br></p><p><a href=\"https://learn.hashicorp.com/tutorials/terraform/infrastructure-as-code\">https://learn.hashicorp.com/tutorials/terraform/infrastructure-as-code</a></p>", "answers": ["<p>True</p>", "<p>False</p>"]}, "correct_response": ["a"], "section": "Objective 1 - Understand Infrastructure as Code Concepts", "question_plain": "True or False? Infrastructure as code (IaC) tools allow you to manage infrastructure with configuration files rather than through a graphical user interface.", "related_lectures": []}, {"_class": "assessment", "id": 67004790, "assessment_type": "multi-select", "prompt": {"question": "<p>What of the following are benefits of using Infrastructure as Code? (select three)</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Reducing vulnerabilities in your publicly-facing applications is NOT a benefit of using IaC since IaC is geared towards deploying infrastructure and applications, but not determining whether your application is secure.</p><p><br></p><p><strong>WRONG&nbsp;ANSWER:</strong></p><p>Terraform does not reduce vulnerabilities in your applications. You CAN pair Terraform with other tools that do this through a CI?CD pipeline or something like that, but Terraform will not do this natively.</p><p><br></p><p><a href=\"https://www.youtube.com/watch?v=l5k1ai_GBDE\">https://www.youtube.com/watch?v=l5k1ai_GBDE</a></p>", "answers": ["<p>the reduction of misconfigurations that could lead to security vulnerabilities and unplanned downtime</p>", "<p>your infrastructure configurations can be version controlled and stored in a code repository alongside the application code</p>", "<p>the ability to programmatically deploy infrastructure</p>", "<p>reducing vulnerabilities in your publicly-facing applications</p>"]}, "correct_response": ["a", "b", "c"], "section": "Objective 1 - Understand Infrastructure as Code Concepts", "question_plain": "What of the following are benefits of using Infrastructure as Code? (select three)", "related_lectures": []}, {"_class": "assessment", "id": 67004792, "assessment_type": "multi-select", "prompt": {"question": "<p>Which of the following are true statements regarding Terraform? (select three)</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Terraform can indeed manage dependencies across multiple cloud providers. That is a huge benefit of using Terraform since it's cloud-agnostic, it doesn't care where the resources are deployed. It can still manage implicit or explicit dependencies between resources regardless of where they are deployed.</p><p><a href=\"https://learn.hashicorp.com/tutorials/terraform/dependencies?in=terraform/0-13\">https://learn.hashicorp.com/tutorials/terraform/dependencies?in=terraform/0-13</a></p>", "answers": ["<p>Terraform is cloud-agnostic</p>", "<p>A single configuration file can use multiple providers</p>", "<p>Terraform can orchestrate large-scale, multi-cloud infrastructure deployments</p>", "<p>Terraform can manage dependencies within a single cloud, but not cross-cloud</p>"]}, "correct_response": ["a", "b", "c"], "section": "Objective 2 - Understand Terraform's purpose (vs other IaC)", "question_plain": "Which of the following are true statements regarding Terraform? (select three)", "related_lectures": []}, {"_class": "assessment", "id": 67004794, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Rather than having to scan and inspect every resource on every run, Terraform relies on what feature to help manage resources?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Terraform must store state about your managed infrastructure and configuration. This state is used by Terraform to map real-world resources to your configuration, keep track of metadata, and improve performance for large infrastructures.</p><p>This state is stored by default in a local file named \"terraform.tfstate\", but it can also be stored remotely, which works better in a team environment.</p><p><br></p><p><strong>WRONG&nbsp;ANSWERS:</strong></p><p><strong><em>environment variables</em></strong> - these can be used to provide values for variables or other Terraform configurations, but this is now how Terraform manages resources</p><p><strong><em>providers</em></strong> - these are Terraform plugins that enable communication to a platform's API to allow Terraform to provision resources, but it's not the feature that it uses to manage the resources that it is managing.</p><p><strong><em>local variables</em></strong> - these provide values to use for the deployment and management of deployed resources in Terraform. It doesn't use these to manage resources</p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/language/state\">https://developer.hashicorp.com/terraform/language/state</a></p><p><a href=\"https://developer.hashicorp.com/terraform/language/state/purpose\">https://developer.hashicorp.com/terraform/language/state/purpose</a></p>", "answers": ["<p>state</p>", "<p>environment variables</p>", "<p>providers</p>", "<p>local variables</p>"]}, "correct_response": ["a"], "section": "Objective 2 - Understand Terraform's purpose (vs other IaC)", "question_plain": "Rather than having to scan and inspect every resource on every run, Terraform relies on what feature to help manage resources?", "related_lectures": []}, {"_class": "assessment", "id": 67004796, "assessment_type": "multiple-choice", "prompt": {"question": "<p>True or False?&nbsp;Under special circumstances, Terraform can be used without state.</p>", "relatedLectureIds": "", "feedbacks": ["", ""], "explanation": "<p>State is a hard requirement for Terraform - there's no getting around it. You can have the state stored locally or you can configure a remote backend to store it somewhere else. But overall, state is always required for Terraform.</p><p><a href=\"https://developer.hashicorp.com/terraform/language/state/purpose\">https://developer.hashicorp.com/terraform/language/state/purpose</a></p>", "answers": ["<p>True</p>", "<p>False</p>"]}, "correct_response": ["b"], "section": "Objective 2 - Understand Terraform's purpose (vs other IaC)", "question_plain": "True or False?&nbsp;Under special circumstances, Terraform can be used without state.", "related_lectures": []}, {"_class": "assessment", "id": 67004798, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Using multi-cloud and provider-agnostic tools like Terraform provides which of the following benefit?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Terraform can be used across major cloud providers and VM hypervisors, which is a huge benefit. This is made possible by the thousands of providers/plugins that are written by HashiCorp, third-party partners, or individual contributors.</p><p><a href=\"https://developer.hashicorp.com/terraform/language/providers\">https://developer.hashicorp.com/terraform/language/providers</a></p>", "answers": ["<p>can be used across major cloud providers and VM hypervisors</p>", "<p>slower provisioning speed allows the operations team to catch mistakes before they are applied</p>", "<p>forces developers to learn Terraform alongside their current programming language</p>", "<p>increased risk due to all infrastructure relying on a single tool for management</p>"]}, "correct_response": ["a"], "section": "Objective 2 - Understand Terraform's purpose (vs other IaC)", "question_plain": "Using multi-cloud and provider-agnostic tools like Terraform provides which of the following benefit?", "related_lectures": []}, {"_class": "assessment", "id": 67004800, "assessment_type": "multiple-choice", "prompt": {"question": "<p>What feature does Terraform use to map configuration to resources in the real world?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Terraform requires some sort of database to map Terraform config to the real world. When you have a resource <code>resource \"aws_instance\" \"foo\"</code> in your configuration, Terraform uses this map to know that instance <code>i-abcd1234</code> is represented by that resource.</p><p>For some providers like AWS, Terraform could theoretically use something like AWS tags. Early prototypes of Terraform actually had no state files and used this method. However, we quickly ran into problems. The first major issue was a simple one: not all resources support tags, and not all cloud providers support tags.</p><p>Therefore, for mapping configuration to resources in the real world, Terraform uses its own state structure.</p><p><br></p><p><strong>WRONG&nbsp;ANSWERS:</strong></p><p><strong><em>Parallelism</em></strong> is the way Terraform can deploy many resources at the same time to speed up the deployment</p><p><strong><em>Local variables</em></strong> are used to reduce repeating the same expressions or values over and over in your code</p><p><strong><em>Resource blocks</em></strong> are the block type that deploys actual resources</p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/language/state/purpose\">https://developer.hashicorp.com/terraform/language/state/purpose</a></p>", "answers": ["<p>state</p>", "<p>parallelism</p>", "<p>local variables</p>", "<p>resource blocks</p>"]}, "correct_response": ["a"], "section": "Objective 2 - Understand Terraform's purpose (vs other IaC)", "question_plain": "What feature does Terraform use to map configuration to resources in the real world?", "related_lectures": []}, {"_class": "assessment", "id": 67004802, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Which of the following code snippets will ensure you're using a specific version of the AWS&nbsp;provider?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>To specify the version of Terraform provider that is required, you need to use the <code>required_providers</code> block parameter under the <code>terraform</code> block. HashiCorp recommends that you explicitly set the version of both Terraform and the required providers/plugins to avoid issues when upgrading to the latest versions.</p><p><br></p><p><strong>WRONG&nbsp;ANSWERS:</strong></p><p>None of these wrong answers are valid configuration blocks for Terraform to set the specific version of Terraform.</p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/language/settings#specifying-a-required-terraform-version\">https://developer.hashicorp.com/terraform/language/settings#specifying-a-required-terraform-version</a></p>", "answers": ["<pre class=\"prettyprint linenums\">terraform { \n  required_providers {\n    aws = \"&gt;= 3.0\"\n  }\n}</pre>", "<pre class=\"prettyprint linenums\">provider \"aws\" {\n  region = \"us-east-2\"  \n  required_version \"&gt;= 3.0\"\n}</pre>", "<pre class=\"prettyprint linenums\">provider \"aws\" {\n  region = \"us-east-1\"  \n  required_provider \"&gt;= 3.0\"\n}</pre>", "<pre class=\"prettyprint linenums\">terraform { \n  required_version = \"&gt;= 3.0\"\n}</pre>"]}, "correct_response": ["a"], "section": "Objective 3 - Understand Terraform Basics", "question_plain": "Which of the following code snippets will ensure you're using a specific version of the AWS&nbsp;provider?", "related_lectures": []}, {"_class": "assessment", "id": 67004804, "assessment_type": "multiple-choice", "prompt": {"question": "<p>You are using Terraform to manage some of your AWS&nbsp;infrastructure. You notice that a new version of the provider now includes additional functionality you want to take advantage of. What command do you need to run to upgrade the provider?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>To upgrade an existing provider that you have already downloaded, you need to run <code>terraform init -upgrade</code> . This command will upgrade all previously-selected plugins to the newest version that complies with the configuration's version constraints. This will cause Terraform to ignore any selections recorded in the dependency lock file, and to take the newest available version matching the configured version constraints.</p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/init\">https://developer.hashicorp.com/terraform/cli/commands/init</a></p>", "answers": ["<p><code>terraform init -upgrade</code> </p>", "<p><code>terraform providers</code> </p>", "<p><code>terraform plan</code> </p>", "<p><code>terraform get hashicorp/aws</code> </p>"]}, "correct_response": ["a"], "section": "Objective 3 - Understand Terraform Basics", "question_plain": "You are using Terraform to manage some of your AWS&nbsp;infrastructure. You notice that a new version of the provider now includes additional functionality you want to take advantage of. What command do you need to run to upgrade the provider?", "related_lectures": []}, {"_class": "assessment", "id": 67004806, "assessment_type": "multiple-choice", "prompt": {"question": "<p>True or False?&nbsp;A <code>provider</code> block is required in every configuration file so Terraform can download the proper plugin.</p>", "relatedLectureIds": "", "feedbacks": ["", ""], "explanation": "<p>You don't have to specify a provider block since Terraform is smart enough to download the right provider based on the specified resources. That said, Terraform official documentation states that Terraform configurations must declare which providers they require so that Terraform can install and use them. Although&nbsp;Terraform CAN&nbsp;be used without declaring a plugin, you should follow best practices and declare it along with the <code>required_version</code> argument to explicitly set the version constraint.</p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/language/providers/requirements\">https://developer.hashicorp.com/terraform/language/providers/requirements</a></p>", "answers": ["<p>True</p>", "<p>False</p>"]}, "correct_response": ["b"], "section": "Objective 3 - Understand Terraform Basics", "question_plain": "True or False?&nbsp;A provider block is required in every configuration file so Terraform can download the proper plugin.", "related_lectures": []}, {"_class": "assessment", "id": 67004808, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Terraform includes a few types of provisioners. Which provisioner type will invoke a process on the machine executing Terraform?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>The <code>local-exec</code> provisioner invokes a local executable after a resource is created. This invokes a process on the machine running Terraform, not on the resource.</p><p><br></p><p><strong>WRONG&nbsp;ANSWERS:</strong></p><p>A <code>remote</code> provisioner will execute a process on a <strong><em>remote</em></strong> resource, such as the resource created by Terraform.</p><p>The <code>file</code> provisioner is used to copy files or directories from the machine executing Terraform to the newly created resource.</p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/language/resources/provisioners/local-exec\">https://developer.hashicorp.com/terraform/language/resources/provisioners/local-exec</a></p>", "answers": ["<p><code>local-exec</code> provisioner</p>", "<p><code>remote-exec</code> provisioner</p>", "<p>None of the provisioners have the ability to invoke a process on the local machine executing Terraform</p>", "<p><code>file</code> provisioner</p>"]}, "correct_response": ["a"], "section": "Objective 3 - Understand Terraform Basics", "question_plain": "Terraform includes a few types of provisioners. Which provisioner type will invoke a process on the machine executing Terraform?", "related_lectures": []}, {"_class": "assessment", "id": 67004810, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Which of the following Terraform versions would be permitted to run the Terraform configuration based on the following code snippet?</p><p><br></p><pre class=\"prettyprint linenums\">terraform {\n  required_version = \"~&gt; 1.0.0\"\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~&gt; 3.0\"\n    }\n    random = {\n      source  = \"hashicorp/random\"\n      version = \"3.1.0\"\n    }\n  }\n}\n</pre>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>When setting Terraform <code>required_version</code> or provider constraints, the <code>~</code> specifies that only the right-most version number can be incremented - therefore only v1.0.5 will satisfy the requirements.</p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/language/providers/requirements#best-practices-for-provider-versions\">https://developer.hashicorp.com/terraform/language/providers/requirements#best-practices-for-provider-versions</a></p>", "answers": ["<p>Terraform v1.0.5</p>", "<p>Terraform v1.2.0</p>", "<p>Terraform v1.1.0</p>", "<p>Terraform v1.4.9</p>"]}, "correct_response": ["a"], "section": "Objective 3 - Understand Terraform Basics", "question_plain": "Which of the following Terraform versions would be permitted to run the Terraform configuration based on the following code snippet?terraform {\n  required_version = \"~&gt; 1.0.0\"\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~&gt; 3.0\"\n    }\n    random = {\n      source  = \"hashicorp/random\"\n      version = \"3.1.0\"\n    }\n  }\n}", "related_lectures": []}, {"_class": "assessment", "id": 67004812, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Your colleague provided you with a Terraform configuration file and you're having trouble reading it because parameters and blocks are not properly aligned. What command can you run to quickly update the file configuration file to make it easier to consume?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>The <code>terraform fmt</code> command is used to rewrite Terraform configuration files to a canonical format and style. This command applies a subset of the <a href=\"https://developer.hashicorp.com/terraform/language/syntax/style\">Terraform language style conventions</a>, along with other minor adjustments for readability.</p><p>Other Terraform commands that generate Terraform configuration will produce configuration files that conform to the style imposed by <code>terraform fmt</code>, so using this style in your own files will ensure consistency.</p><p>The canonical format may change in minor ways between Terraform versions, so after upgrading Terraform we recommend to proactively run <code>terraform fmt</code> on your modules along with any other changes you are making to adopt the new version.</p><p>If you want to format ALL&nbsp;of your <code>.tf</code> files, you can use <code>terraform fmt -recursive</code> and it'll format all files in the current and all subdirectories.</p><p><br></p><p><strong>WRONG&nbsp;ANSWERS:</strong></p><p><code>terraform init</code> - this is used to initialize and work with the Terraform backend</p><p><code>terraform state</code> - this command is for working with and viewing Terraform state</p><p><code>terraform workspace</code> - this command is used to create and manage Terraform OSS workspaces</p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/fmt\">https://developer.hashicorp.com/terraform/cli/commands/fmt</a></p>", "answers": ["<p><code>terraform fmt</code> </p>", "<p><code>terraform init</code> </p>", "<p><code>terraform state</code> </p>", "<p><code>terraform workspace</code> </p>"]}, "correct_response": ["a"], "section": "Objective 4 - Use the Terraform Outside Core Workflow", "question_plain": "Your colleague provided you with a Terraform configuration file and you're having trouble reading it because parameters and blocks are not properly aligned. What command can you run to quickly update the file configuration file to make it easier to consume?", "related_lectures": []}, {"_class": "assessment", "id": 67004814, "assessment_type": "multiple-choice", "prompt": {"question": "<p>You have a configuration file that you've deployed to one AWS region already but you want to deploy the same configuration file to a second AWS region without making changes to the configuration file. What feature of Terraform can you use to accomplish this?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Workspaces should be used in this scenario to create separate state files for each regional deployment. When you use a workspace in Terraform OSS, you get a brand new state file to work with that is completely separate from the original. Therefore, you can modify environment variables or other values and use the same Terraform without negatively impacting resources that were deployed in any other workspace.</p><p>To create a new workspace, you can use the command <code>terraform workspace new &lt;name&gt;</code> </p><p><br></p><p><strong>WRONG&nbsp;ANSWERS:</strong></p><p><code>terraform plan</code> - this command compares the current infrastructure against the desired state (configuration file) and proposes changes to your infrastructure. This is also commonly referred to as a dry run.</p><p><code>terraform get</code> - this command is used to download modules</p><p><code>terraform import</code> - this command can be used to import existing resources and pull them under Terraform management</p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/language/state/workspaces\">https://developer.hashicorp.com/terraform/language/state/workspaces</a></p>", "answers": ["<p><code>terraform workspace</code> </p>", "<p><code>terraform plan</code> </p>", "<p><code>terraform get</code> </p>", "<p><code>terraform import</code> </p>"]}, "correct_response": ["a"], "section": "", "question_plain": "You have a configuration file that you've deployed to one AWS region already but you want to deploy the same configuration file to a second AWS region without making changes to the configuration file. What feature of Terraform can you use to accomplish this?", "related_lectures": []}, {"_class": "assessment", "id": 67004816, "assessment_type": "multiple-choice", "prompt": {"question": "<p>After deploying a new virtual machine using Terraform, you find that the local script didn't run properly. However,&nbsp;Terraform reports the virtual machine was successfully created. How can you force Terraform to replace the virtual machine without impacting the rest of the managed infrastructure?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Using <code>terraform apply -replace</code> is how you tag a resource for replacement.</p><p><br></p><p><strong>IMPORTANT - PLEASE&nbsp;READ BELOW</strong></p><p>The <code>terraform taint</code> command is deprecated. However, you may still see <code>terraform taint</code> on the real exam. Please note the information below and be prepared to understand both options.</p><p>For Terraform v0.15.2 and later, we recommend using the <code>-replace</code> option with <code>terraform apply</code> instead. <a href=\"https://developer.hashicorp.com/terraform/cli/commands/plan#replace-address\">Check out this link for more details.</a></p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/plan#replace-address\">https://developer.hashicorp.com/terraform/cli/commands/plan#replace-address</a></p>", "answers": ["<p>use <code>terraform apply -replace</code> to tag the resource for replacement</p>", "<p>run a <code>terraform destroy</code> and then run <code>terraform import</code> to pull in the other resources under Terraform management</p>", "<p>execute a <code>terraform debug</code> command to see why the script failed to run</p>", "<p>update the virtual machine resource and run a <code>terraform init</code> </p>"]}, "correct_response": ["a"], "section": "Objective 4 - Use the Terraform Outside Core Workflow", "question_plain": "After deploying a new virtual machine using Terraform, you find that the local script didn't run properly. However,&nbsp;Terraform reports the virtual machine was successfully created. How can you force Terraform to replace the virtual machine without impacting the rest of the managed infrastructure?", "related_lectures": []}, {"_class": "assessment", "id": 67004818, "assessment_type": "multiple-choice", "prompt": {"question": "<p>You are managing multiple resources using Terraform running in AWS. You want to destroy all the resources except for a single web server. How can you accomplish this?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>To accomplish this, you can delete the resource from state so Terraform no longer knows anything about it. Then you can run a <code>terraform destroy</code> to destroy the remaining resources. During the destroy, Terraform won't touch the web server since it is no longer managing it. This is similar to how Terraform won't impact existing resources that it does not know about when creating, modifying, and destroying resources in your local or public cloud infrastructure.</p><p>To delete a resource from state, you can use the <code>terraform state rm &lt;address&gt;</code> command, which will effectively make Terraform \"forget\" the object while it continues to exist in the remote system.</p><p><br></p><p><strong>WRONG&nbsp;ANSWERS:</strong></p><p><strong><em>change to new workspace and run terraform destroy</em></strong> - changing to a different workspace would have no impact on any resources in the current workspace. It could, however, impact any resources that were provisioned with the second workspace that you change to</p><p><strong><em>terraform import &amp;&nbsp;terraform destroy </em></strong>- using the import command here is basically the opposite of what we want to do. We want Terraform to \"forget\" about a particular resource, and the import command pulls existing resources under Terraform management</p><p><strong><em>delete the block and run terraform apply </em></strong>- this would actually destroy ONLY&nbsp;the web server that we want to keep, so essentially doing the exact opposite of what we're trying to accomplish</p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/state/rm\">https://developer.hashicorp.com/terraform/cli/commands/state/rm</a></p>", "answers": ["<p>run a <code>terraform state rm</code> to remove it from state and then destroy the remaining resources by running <code>terraform destroy</code> </p>", "<p>change to a different workspace and run a <code>terraform destroy</code> </p>", "<p>run a <code>terraform import</code> command against the web server and then execute a <code>terraform destroy</code> </p>", "<p>delete the web server resource block from the configuration file and run a <code>terraform apply</code> </p>"]}, "correct_response": ["a"], "section": "Objective 4 - Use the Terraform Outside Core Workflow", "question_plain": "You are managing multiple resources using Terraform running in AWS. You want to destroy all the resources except for a single web server. How can you accomplish this?", "related_lectures": []}, {"_class": "assessment", "id": 67004820, "assessment_type": "multiple-choice", "prompt": {"question": "<p>You are having trouble with executing Terraform and want to enable the <em>most verbose</em> logs. What log level should you set for the TF_LOG environment variable?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Trace is the most verbose logging level. In order, they go <code>TRACE</code>, <code>DEBUG</code>, <code>INFO</code>, <code>WARN</code> and <code>ERROR</code></p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/internals/debugging\">https://developer.hashicorp.com/terraform/internals/debugging</a></p>", "answers": ["<p><code>TRACE</code> </p>", "<p><code>ERROR</code> </p>", "<p><code>INFO</code> </p>", "<p><code>DEBUG</code> </p>"]}, "correct_response": ["a"], "section": "Objective 4 - Use the Terraform Outside Core Workflow", "question_plain": "You are having trouble with executing Terraform and want to enable the most verbose logs. What log level should you set for the TF_LOG environment variable?", "related_lectures": []}, {"_class": "assessment", "id": 67004866, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Given the definition below, what Terraform feature is being described?</p><p><em>\"helps you share Terraform providers and Terraform modules across your organization. It includes support for versioning, a searchable list of available providers and modules, and a configuration designer to help you build new workspaces faster.\"</em></p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>This definition is describing the Private Module Registry...</p><p>Terraform Cloud's private registry works similarly to the <a href=\"https://developer.hashicorp.com/terraform/registry\">public Terraform Registry</a> and helps you share <a href=\"https://developer.hashicorp.com/terraform/language/providers\">Terraform providers</a> and <a href=\"https://developer.hashicorp.com/terraform/language/modules\">Terraform modules</a> across your organization. It includes support for versioning, a searchable list of available providers and modules, and a <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/registry/design\">configuration designer</a> to help you build new workspaces faster.</p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/cloud-docs/registry\">https://developer.hashicorp.com/terraform/cloud-docs/registry</a></p>", "answers": ["<p>Private Module Registry</p>", "<p>Terraform Workspaces</p>", "<p>HashiCorp Sentinel</p>", "<p>CDK for Terraform</p>"]}, "correct_response": ["a"], "section": "Objective 9 - Understand Terraform Cloud Capabilities", "question_plain": "Given the definition below, what Terraform feature is being described?\"helps you share Terraform providers and Terraform modules across your organization. It includes support for versioning, a searchable list of available providers and modules, and a configuration designer to help you build new workspaces faster.\"", "related_lectures": []}, {"_class": "assessment", "id": 67004868, "assessment_type": "multi-select", "prompt": {"question": "<p>You need to enable logging for Terraform and persist the logs to a specific file. What two environment variables can be set to enable logs and write them to a file? (select two)</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Terraform has detailed logs which can be enabled by setting the <code>TF_LOG</code> environment variable to any value. This will cause detailed logs to appear on stderr. You can set <code>TF_LOG</code> to one of the log levels <code>TRACE</code>, <code>DEBUG</code>, <code>INFO</code>, <code>WARN</code> or <code>ERROR</code> to change the verbosity of the logs, with <code>TRACE</code> being the most verbose.</p><p>To persist logged output you can set <code>TF_LOG_PATH</code> in order to force the log to always be appended to a specific file when logging is enabled. Note that even when <code>TF_LOG_PATH</code> is set, <code>TF_LOG</code> must be set in order for any logging to be enabled.</p><p><br></p><p><strong>WRONG&nbsp;ANSWERS:</strong></p><p>The wrong answers provided in this question are not valid environment variables that you can use with Terraform.</p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/internals/debugging\">https://developer.hashicorp.com/terraform/internals/debugging</a></p>", "answers": ["<p><code>TF_LOG_PATH=\"&lt;file_path&gt;\"</code> </p>", "<p><code>TF_LOG=TRACE</code> </p>", "<p><code>TF_ENABLE_LOG=true</code> </p>", "<p><code>TF_LOG_OUTPUT=\"&lt;file_path&gt;\"</code> </p>"]}, "correct_response": ["a", "b"], "section": "Objective 4 - Use the Terraform Outside Core Workflow", "question_plain": "You need to enable logging for Terraform and persist the logs to a specific file. What two environment variables can be set to enable logs and write them to a file? (select two)", "related_lectures": []}, {"_class": "assessment", "id": 67004870, "assessment_type": "multiple-choice", "prompt": {"question": "<p>Based on the code snippet below, where is the module that the code is referencing?</p><p><br></p><pre class=\"prettyprint linenums\">module \"server_subnet_1\" {\n  source          = \"./modules/web_server\"\n  ami             = data.aws_ami.ubuntu.id\n  key_name        = aws_key_pair.generated.key_name\n  user            = \"ubuntu\"\n  private_key     = tls_private_key.generated.private_key_pem\n  subnet_id       = aws_subnet.public_subnets[\"public_subnet_1\"].id\n  security_groups = [aws_security_group.vpc-ping.id, aws_security_group.vpc-web.id]\n}</pre>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>In this example, the user created a `modules` directory and then saved the module in that new directory. Therefore, the answer is <code>in the modules subdirectory in the current working directory where Terraform is being executed.&nbsp; </code> </p><p>Anytime you have a local path as the source, the module will be sourced from the referenced directory. You could also put the path of a VCS repository here, or a reference to a private or public module registry.</p><p>For example, if you wanted to reference a public module, you could use something like this:</p><p><br></p><pre class=\"prettyprint linenums\">module \"network\" {\n  source  = \"Azure/network/azurerm\"\n  version = \"3.5.0\"\n  # insert the 1 required variable here\n}</pre><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/internals/module-registry-protocol#module-addresses\">https://developer.hashicorp.com/terraform/internals/module-registry-protocol#module-addresses</a></p>", "answers": ["<p>in the modules subdirectory in the current working directory where Terraform is being executed</p>", "<p>the same working directory where Terraform is being executed</p>", "<p>stored in the Terraform public module registry</p>", "<p>stored in a private module registry managed by the organization</p>"]}, "correct_response": ["a"], "section": "Objective 5 - Interact with Terraform Modules", "question_plain": "Based on the code snippet below, where is the module that the code is referencing?module \"server_subnet_1\" {\n  source          = \"./modules/web_server\"\n  ami             = data.aws_ami.ubuntu.id\n  key_name        = aws_key_pair.generated.key_name\n  user            = \"ubuntu\"\n  private_key     = tls_private_key.generated.private_key_pem\n  subnet_id       = aws_subnet.public_subnets[\"public_subnet_1\"].id\n  security_groups = [aws_security_group.vpc-ping.id, aws_security_group.vpc-web.id]\n}", "related_lectures": []}, {"_class": "assessment", "id": 67004872, "assessment_type": "multiple-choice", "prompt": {"question": "<p>The command <code>terraform destroy</code> is actually just an alias to which command?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>This command is just a convenience alias for the command <code>terraform apply -destroy</code></p><p>For that reason, this command accepts most of the options that <a href=\"https://www.terraform.io/cli/commands/apply\"><code>terraform apply</code></a> accepts, although it does not accept a plan file argument and forces the selection of the \"destroy\" planning mode.</p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/destroy\">https://developer.hashicorp.com/terraform/cli/commands/destroy</a></p>", "answers": ["<p><code>terraform apply -destroy</code> </p>", "<p><code>terraform plan - destroy</code> </p>", "<p><code>terraform apply -replace-all</code> </p>", "<p><code>terraform delete</code> </p>"]}, "correct_response": ["a"], "section": "Objective 6 - Use the Core Terraform Workflow", "question_plain": "The command terraform destroy is actually just an alias to which command?", "related_lectures": []}, {"_class": "assessment", "id": 67004874, "assessment_type": "multiple-choice", "prompt": {"question": "<p>True or False?&nbsp;In order to use the <code>terraform console</code> command, the CLI must be able to lock state to prevent changes.</p>", "relatedLectureIds": "", "feedbacks": ["", ""], "explanation": "<p>The <code>terraform console</code> command will read the Terraform configuration in the current working directory and the Terraform state file from the configured backend so that interpolations can be tested against both the values in the configuration and the state file.</p><p>When you execute a <code>terraform console</code> command, you'll get this output:</p><p><br></p><pre class=\"prettyprint linenums\">$ terraform console\nAcquiring state lock. This may take a few moments...\n&gt; </pre><p> </p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/console\">https://developer.hashicorp.com/terraform/cli/commands/console</a></p><p><br></p>", "answers": ["<p>True</p>", "<p>False</p>"]}, "correct_response": ["a"], "section": "Objective 7 - Implement and Maintain State", "question_plain": "True or False?&nbsp;In order to use the terraform console command, the CLI must be able to lock state to prevent changes.", "related_lectures": []}, {"_class": "assessment", "id": 67004876, "assessment_type": "multi-select", "prompt": {"question": "<p>Terraform relies on state in order to create and manage resources. Which of the following is true regarding the state file? (select four)</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", "", ""], "explanation": "<p>In order to properly and correctly manage your infrastructure resources, Terraform stores the state of your managed infrastructure. Terraform uses this state on each execution to plan and make changes to your infrastructure. This state must be stored and maintained on each execution so future operations can perform correctly.</p><p>During execution, Terraform will examine the state of the currently running infrastructure, determine what differences exist between the current state and the revised desired state, and indicate the necessary changes that must be applied. When approved to proceed, only the necessary changes will be applied, leaving existing, valid infrastructure untouched.</p><p>By default, Terraform will store the state in a JSON-formatted file named terraform.tfstate in the current working directory. The file should never be modified directly if state needs to be manually changed. You should use the <code>terraform state</code> command to modify state where possible.</p><p>The local state file is NOT encrypted (unless your local disk is encrypted or using something like Windows Bitlocker). This is why many organizations use a remote backend, which will store the state file in an encrypted store. This also allows multiple team members to work with the state file rather than storing it on an individual's laptop/desktop.</p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/language/state\">https://developer.hashicorp.com/terraform/language/state</a></p>", "answers": ["<p>the state file is formatted using JSON</p>", "<p>it may contain sensitive data that you might not want others to view</p>", "<p>by default, state is stored in a file named terraform.tfstate in the current working directory</p>", "<p>remote state is required when more than one person wants to manage the infrastructure managed by Terraform</p>", "<p>state should be modified by editing the file directly</p>"]}, "correct_response": ["a", "b", "c", "d"], "section": "Objective 7 - Implement and Maintain State", "question_plain": "Terraform relies on state in order to create and manage resources. Which of the following is true regarding the state file? (select four)", "related_lectures": []}, {"_class": "assessment", "id": 67004878, "assessment_type": "multiple-choice", "prompt": {"question": "<p>As you are developing new Terraform code, you are finding that you are constantly repeating the same expression over and over throughout your code, and you are worried about the effort that will be needed if this expression needs to be changed. What feature of Terraform can you use to avoid repetition and make your code easier to maintain?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>A local value assigns a name to an expression, so you can use it multiple times within a configuration without repeating it. The expressions in local values are not limited to literal constants; they can also reference other values in the configuration in order to transform or combine them, including variables, resource attributes, or other local values.</p><p>You can use local values to simplify your Terraform configuration and avoid repetition. Local values (locals) can also help you write a more readable configuration by using meaningful names rather than hard-coding values. If overused they can also make a configuration hard to read by future maintainers by hiding the actual values used.</p><p>Use local values only in moderation, in situations where a single value or result is used in many places and that value is likely to be changed in the future. The ability to easily change the value in a central place is the key advantage of local values.</p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/language/values/locals\">https://developer.hashicorp.com/terraform/language/values/locals</a></p>", "answers": ["<p>locals</p>", "<p>remote backend</p>", "<p>data block</p>", "<p>terraform graph</p>"]}, "correct_response": ["a"], "section": "Objective 8 - Read, Generate, and Modify Configuration", "question_plain": "As you are developing new Terraform code, you are finding that you are constantly repeating the same expression over and over throughout your code, and you are worried about the effort that will be needed if this expression needs to be changed. What feature of Terraform can you use to avoid repetition and make your code easier to maintain?", "related_lectures": []}, {"_class": "assessment", "id": 67004880, "assessment_type": "multi-select", "prompt": {"question": "<p>Which of the following are <em>collection </em>or<em> structural types</em> that can be used when declaring a variable in order to group values together? (select four)</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", "", "", "", ""], "explanation": "<p>As you continue to work with Terraform, you're going to need a way to organize and structure data. This data could be input variables that you are giving to Terraform, or it could be the result of resource creation, like having Terraform create a fleet of web servers or other resources. Either way, you'll find that data needs to be organized yet accessible so it is referenceable throughout your configuration. The Terraform language uses the following types for values:</p><p>&nbsp; &nbsp; * <strong>string</strong>: a sequence of Unicode characters representing some text, like \"hello\".</p><p>&nbsp; &nbsp; * <strong>number</strong>: a numeric value. The number type can represent both whole numbers like 15 and fractional values like 6.283185.</p><p>&nbsp; &nbsp; * <strong>bool</strong>: a boolean value, either true or false. bool values can be used in conditional logic.</p><p>&nbsp; &nbsp; * <strong>list (or tuple)</strong>: a sequence of values, like [\"us-west-1a\", \"us-west-1c\"]. Elements in a list or tuple are identified by consecutive whole numbers, starting with zero.</p><p>&nbsp; &nbsp; * <strong>map (or object)</strong>: a group of values identified by named labels, like {name = \"Mabel\", age = 52}. Maps are used to store key/value pairs.</p><p>Strings, numbers, and bools are sometimes called primitive types. Lists/tuples and maps/objects are sometimes called complex types, structural types, or collection types. </p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/language/expressions/types#types-and-values\">https://developer.hashicorp.com/terraform/language/expressions/types#types-and-values</a></p>", "answers": ["<p>map</p>", "<p>list</p>", "<p>bool</p>", "<p>number</p>", "<p>string</p>", "<p>tuple</p>", "<p>object</p>"]}, "correct_response": ["a", "b", "f", "g"], "section": "Objective 8 - Read, Generate, and Modify Configuration", "question_plain": "Which of the following are collection or structural types that can be used when declaring a variable in order to group values together? (select four)", "related_lectures": []}, {"_class": "assessment", "id": 67004882, "assessment_type": "multiple-choice", "prompt": {"question": "<p><em>Fill in the blank from the correct answer below:</em></p><p>A Terraform module (usually the root module of a configuration) can <em>call</em> other modules to include their resources into the configuration. A module that has been called by another module is often referred to as _______________. </p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>A Terraform module (usually the root module of a configuration) can <em>call</em> other modules to include their resources into the configuration. A module that has been called by another module is often referred to as a <em>child module.</em></p><p>Child modules can be called multiple times within the same configuration, and multiple configurations can use the same child module.</p><p><a href=\"https://developer.hashicorp.com/terraform/language/modules\">https://developer.hashicorp.com/terraform/language/modules</a></p>", "answers": ["<p>child module</p>", "<p>parent module</p>", "<p>sourced module</p>", "<p>called module</p>"]}, "correct_response": ["a"], "section": "Objective 5 - Interact with Terraform Modules", "question_plain": "Fill in the blank from the correct answer below:A Terraform module (usually the root module of a configuration) can call other modules to include their resources into the configuration. A module that has been called by another module is often referred to as _______________.", "related_lectures": []}, {"_class": "assessment", "id": 67004884, "assessment_type": "multiple-choice", "prompt": {"question": "<p>As part of a Terraform configuration, you are deploying a Linux-based server using a default image that needs to be customized based on input variables. What feature of Terraform can execute a script on the server once is has been provisioned?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>We can utilize Terraform provisioners to deploy a web app onto an instance we've created. In order to run these steps, Terraform needs a connection block along with our generated SSH key from the previous labs in order to authenticate into our instance. Terraform can utilize both the `local-exec` provisioner to run commands on our local workstation (that is executing Terraform) and the `remote-exec` provisioner to execute commands against a resource that has been provisioned with Terraform.</p><p><strong>Note:</strong> Provisioners should only be used as a last resort. For most common situations there are better alternatives.</p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/language/resources/provisioners/syntax\">https://developer.hashicorp.com/terraform/language/resources/provisioners/syntax</a></p>", "answers": ["<p>remote-exec provisioner</p>", "<p>local-exec provisioner</p>", "<p>provider</p>", "<p>data resource</p>"]}, "correct_response": ["a"], "section": "Objective 3 - Understand Terraform Basics", "question_plain": "As part of a Terraform configuration, you are deploying a Linux-based server using a default image that needs to be customized based on input variables. What feature of Terraform can execute a script on the server once is has been provisioned?", "related_lectures": []}, {"_class": "assessment", "id": 67004886, "assessment_type": "multiple-choice", "prompt": {"question": "<p>What command can be used to display the resources that are being managed by Terraform?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>The <code>terraform show</code> command is used to provide human-readable output from a state or plan file. This can be used to inspect a plan to ensure that the planned operations are expected, or to inspect the current state as Terraform sees it.</p><p>Machine-readable output is generated by adding the <code>-json</code> command-line flag.</p><p><br></p><p><strong>WRONG&nbsp;ANSWERS:</strong></p><p><code>terraform state rm</code> is used to remove resources from state</p><p><code>terraform output</code> is used to get values from an output of a module or configuration</p><p><code>terraform version</code> is used to display the current version of Terraform</p><p><br><a href=\"https://developer.hashicorp.com/terraform/cli/commands/show\">https://developer.hashicorp.com/terraform/cli/commands/show</a></p>", "answers": ["<p><code>terraform show</code> </p>", "<p><code>terraform state rm</code> </p>", "<p><code>terraform output</code> </p>", "<p><code>terraform version</code> </p>"]}, "correct_response": ["a"], "section": "Objective 4 - Use the Terraform Outside Core Workflow", "question_plain": "What command can be used to display the resources that are being managed by Terraform?", "related_lectures": []}, {"_class": "assessment", "id": 67004888, "assessment_type": "multiple-choice", "prompt": {"question": "<p>When working with Terraform CLI/OSS workspaces, what command can you use to display the current workspace you are working in?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>The <code>terraform workspace show</code> command is used to output the current workspace.</p><p><br></p><p><strong>WRONG&nbsp;ANSWERS:</strong></p><p><code>terraform workspace new</code> will create a new workspace</p><p><code>terraform workspace select</code> will tell Terraform what workspace to change to and use</p><p><code>terraform workspace</code> is just a container that requires additional subcommands</p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/cli/commands/workspace\">https://developer.hashicorp.com/terraform/cli/commands/workspace</a></p>", "answers": ["<p><code>terraform workspace show</code> </p>", "<p><code>terraform workspace new</code></p>", "<p><code>terraform workspace select</code></p>", "<p><code>terraform workspace</code></p>"]}, "correct_response": ["a"], "section": "Objective 4 - Use the Terraform Outside Core Workflow", "question_plain": "When working with Terraform CLI/OSS workspaces, what command can you use to display the current workspace you are working in?", "related_lectures": []}, {"_class": "assessment", "id": 67004890, "assessment_type": "multiple-choice", "prompt": {"question": "<p>You have declared the variable as shown below. How should you reference this variable throughout your configuration?</p><p><br></p><pre class=\"prettyprint linenums\">variable \"aws_region\" {\n  type        = string\n  description = \"region used to deploy workloads\"\n  default     = \"us-east-1\"\n  validation {\n    condition     = can(regex(\"^us-\", var.aws_region))\n    error_message = \"The aws_region value must be a valid region in the USA, starting with \\\"us-\\\".\"\n  }\n}</pre>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Input variables (commonly referenced as just 'variables') are often declared in a separate file called `variables.tf`, although this is not required. Most people will consolidate variable declaration in this file for organization and simplification of management. Each variable used in a Terraform configuration must be declared before it can be used. Variables are declared in a variable block - one block for each variable. The variable block contains the variable name, most importantly, and then often includes additional information such as the type, a description, a default value, and other options.</p><p>The value of a Terraform variable can be set multiple ways, including setting a default value, interactively passing a value when executing a terraform plan and apply, using an environment variable, or setting the value in a `.tfvars` file. Each of these different options follows a strict order of precedence that Terraform uses to set the value of a variable.</p><p>A huge benefit of using Terraform is the ability to reference other resources throughout your configuration for other functions. These might include getting certain values needed to create other resources, creating an output to export a specific value, or using data retrieved from a data block. Most of these use dot-separated paths for elements of object values.</p><p>The following represents the kinds of named values available in Terraform:</p><p>&nbsp; &nbsp; * &lt;RESOURCE TYPE&gt;.&lt;NAME&gt; represents a managed resource of the given type and name.</p><p><strong>&nbsp; &nbsp; * var.&lt;NAME&gt; is the value of the input variable of the given name.</strong></p><p>&nbsp; &nbsp; * local.&lt;NAME&gt; is the value of the local value of the given name.</p><p>&nbsp; &nbsp; * module.&lt;MODULE NAME&gt; is a value representing the results of a module block.</p><p>&nbsp; &nbsp; * data.&lt;DATA TYPE&gt;.&lt;NAME&gt; is an object representing a data resource of a given type and name</p><p>&nbsp; &nbsp; * Additional named values include ones for filesystem and workspace info and block-local values</p><p><br></p><p><a href=\"https://developer.hashicorp.com/terraform/language/expressions/references#input-variables\">https://developer.hashicorp.com/terraform/language/expressions/references#input-variables</a></p><p><br></p>", "answers": ["<p><code>var.aws_region</code> </p>", "<p><code>variable.aws_region</code> </p>", "<p><code>var.aws_region.id</code> </p>", "<p><code>variable.aws_region.id</code> </p>"]}, "correct_response": ["a"], "section": "Objective 8 - Read, Generate, and Modify Configuration", "question_plain": "You have declared the variable as shown below. How should you reference this variable throughout your configuration?variable \"aws_region\" {\n  type        = string\n  description = \"region used to deploy workloads\"\n  default     = \"us-east-1\"\n  validation {\n    condition     = can(regex(\"^us-\", var.aws_region))\n    error_message = \"The aws_region value must be a valid region in the USA, starting with \\\"us-\\\".\"\n  }\n}", "related_lectures": []}, {"_class": "assessment", "id": 67004892, "assessment_type": "multiple-choice", "prompt": {"question": "<p>You want to restrict your team members to specific modules that are approved by the organization's security team when using Terraform Cloud. What feature should you use?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Private providers and private modules are hosted on an organization's private registry and are only available to members of that organization.</p><p><a href=\"https://developer.hashicorp.com/terraform/cloud-docs/registry\">https://developer.hashicorp.com/terraform/cloud-docs/registry</a></p>", "answers": ["<p>Terraform Cloud Private Module Registry</p>", "<p>Terraform Module Registry (public)</p>", "<p>Terraform Cloud Organizations</p>", "<p>Terraform Workspaces</p>"]}, "correct_response": ["a"], "section": "Objective 9 - Understand Terraform Cloud Capabilities", "question_plain": "You want to restrict your team members to specific modules that are approved by the organization's security team when using Terraform Cloud. What feature should you use?", "related_lectures": []}, {"_class": "assessment", "id": 67004894, "assessment_type": "multiple-choice", "prompt": {"question": "<p>True or False?&nbsp;You can use a combination of Terraform Cloud's cost estimation feature and Sentinel policies to ensure your organization doesn't apply changes to your environment that would result in exceeding your monthly operating budget.</p>", "relatedLectureIds": "", "feedbacks": ["", ""], "explanation": "<p>Terraform Cloud provides cost estimates for many resources found in your Terraform configuration. For each resource, an hourly and monthly cost is shown, along with the monthly delta. The total cost and delta of all estimable resources is also shown.</p><p>Since Sentinel policies are run AFTER cost estimation, you can take cost into account when evaluating Sentinel policies before the run is executed.</p><p><a href=\"https://developer.hashicorp.com/terraform/cloud-docs/cost-estimation#verifying-costs-in-policies\">https://developer.hashicorp.com/terraform/cloud-docs/cost-estimation#verifying-costs-in-policies</a></p>", "answers": ["<p>True</p>", "<p>False</p>"]}, "correct_response": ["a"], "section": "Objective 9 - Understand Terraform Cloud Capabilities", "question_plain": "True or False?&nbsp;You can use a combination of Terraform Cloud's cost estimation feature and Sentinel policies to ensure your organization doesn't apply changes to your environment that would result in exceeding your monthly operating budget.", "related_lectures": []}]}
5434842
~~~
{"count": 10, "next": null, "previous": null, "results": [{"_class": "assessment", "id": 42772298, "assessment_type": "multiple-choice", "prompt": {"question": "<p>What flag would you use to perform a dry-run of your changes and save the proposed changes to a file for future use?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Make sure to know that you need to use the flag <code>-out</code> to save a <code>terraform plan</code> output so you can execute it later</p>", "answers": ["<p><code>terraform plan -out=bryan</code> </p>", "<p><code>terraform plan -save=bryan</code> </p>", "<p><code>terraform plan -output=bryan</code> </p>", "<p><code>terraform plan -file=bryan</code> </p>"]}, "correct_response": ["a"], "section": "", "question_plain": "What flag would you use to perform a dry-run of your changes and save the proposed changes to a file for future use?", "related_lectures": []}, {"_class": "assessment", "id": 42772300, "assessment_type": "multiple-choice", "prompt": {"question": "<p>You have the following code snippet as part of your Terraform configuration. How would you reference the <code>id</code> of the <em>s3_bucket</em>?</p><p><br></p><pre class=\"prettyprint linenums\">data \"aws_s3_bucket\" \"data_bucket\" {\n  bucket = \"my-data-lookup-bucket-bk\"\n}</pre>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>You would use <code>data.&lt;resource type&gt;.&lt;resource name&gt;.id</code> </p>", "answers": ["<p><code>data.aws_s3_bucket.data_bucket.id</code> </p>", "<p><code>data.data_bucket.id</code> </p>", "<p><code>aws_s3_bucket.data_bucket.id</code> </p>", "<p><code>data_bucket.id</code> </p>"]}, "correct_response": ["a"], "section": "", "question_plain": "You have the following code snippet as part of your Terraform configuration. How would you reference the id of the s3_bucket?data \"aws_s3_bucket\" \"data_bucket\" {\n  bucket = \"my-data-lookup-bucket-bk\"\n}", "related_lectures": []}, {"_class": "assessment", "id": 42772302, "assessment_type": "multiple-choice", "prompt": {"question": "<p>How can you reference all of the subnets that are created by this resource block?</p><p><br></p><pre class=\"prettyprint linenums\">#Deploy the private subnets\nresource \"aws_subnet\" \"private_subnets\" {\n  for_each          = var.private_subnets\n  vpc_id            = aws_vpc.vpc.id\n  cidr_block        = cidrsubnet(var.vpc_cidr, 8, each.value)\n  availability_zone = tolist(data.aws_availability_zones.available.names)[each.value]\n\n  tags = {\n    Name      = each.key\n    Terraform = \"true\"\n  }\n}</pre>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>You can reference all of the subnets created by this for_each by using a [*] at the end of the resource address like this <code>aws_subnet.private_subnets[*]</code> </p>", "answers": ["<p><code>aws_subnet.private_subnets[*]</code> </p>", "<p><code>aws_subnet.private_subnets.id</code> </p>", "<p><code>aws_subnet.private_subnets[0,3]</code> </p>", "<p><code>aws_subnet.private_subnets(each.value)</code> </p>"]}, "correct_response": ["a"], "section": "", "question_plain": "How can you reference all of the subnets that are created by this resource block?#Deploy the private subnets\nresource \"aws_subnet\" \"private_subnets\" {\n  for_each          = var.private_subnets\n  vpc_id            = aws_vpc.vpc.id\n  cidr_block        = cidrsubnet(var.vpc_cidr, 8, each.value)\n  availability_zone = tolist(data.aws_availability_zones.available.names)[each.value]\n\n  tags = {\n    Name      = each.key\n    Terraform = \"true\"\n  }\n}", "related_lectures": []}, {"_class": "assessment", "id": 42772304, "assessment_type": "multiple-choice", "prompt": {"question": "<p>You have recently added new resource blocks to your configuration from a different provider. What command do you need to run before you can run a terraform plan/apply?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>You need to run a <code>terraform init</code> in order to download the provider for the new resource blocks you added</p>", "answers": ["<p><code>terraform init</code> </p>", "<p><code>terraform get</code> </p>", "<p><code>terraform fmt</code> </p>", "<p><code>terraform validate</code> </p>"]}, "correct_response": ["a"], "section": "", "question_plain": "You have recently added new resource blocks to your configuration from a different provider. What command do you need to run before you can run a terraform plan/apply?", "related_lectures": []}, {"_class": "assessment", "id": 42772306, "assessment_type": "multiple-choice", "prompt": {"question": "<p>You want Terraform to redeploy a specific resource that it is managing. What command should you use to mark the resource for replacement?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>You would mark the resource for replacement using <code>terraform apply -replace</code>.</p><p><strong>NOTE:</strong> This used to be <code>terraform taint</code> and has been replaced with <code>terraform apply -replace</code> </p>", "answers": ["<p><code>terraform apply -replace</code> </p>", "<p><code>terraform destroy</code> </p>", "<p><code>terraform plan -destroy</code> </p>", "<p><code>terraform fmt</code> </p>"]}, "correct_response": ["a"], "section": "", "question_plain": "You want Terraform to redeploy a specific resource that it is managing. What command should you use to mark the resource for replacement?", "related_lectures": []}, {"_class": "assessment", "id": 42772308, "assessment_type": "multiple-choice", "prompt": {"question": "<p>By default, in what file does Terraform store its state file?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p>Terraform stores its state in a file called <code>terraform.tfstate</code> </p>", "answers": ["<p><code>terraform.tfstate</code> </p>", "<p><code>terraform.state</code> </p>", "<p><code>terraformstate.hcl</code> </p>", "<p><code>state.json</code> </p>"]}, "correct_response": ["a"], "section": "", "question_plain": "By default, in what file does Terraform store its state file?", "related_lectures": []}, {"_class": "assessment", "id": 42772310, "assessment_type": "multiple-choice", "prompt": {"question": "<p>What command can you use to display details about the resource as shown below?</p><p><br></p><pre class=\"prettyprint linenums\">resource \"aws_internet_gateway\" \"demo\" {\n  vpc_id = aws_vpc.vpc.id\n  tags = {\n    Name = \"demo_igw\"\n  }\n}</pre>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p><code>terraform state show ADDRESS </code>will show the attributes of a single resource, therefore the answer is <code>aws_internet_gateway.demo</code></p>", "answers": ["<p><code>terraform state show aws_internet_gateway.demo</code> </p>", "<p><code>terraform state list aws_internet_gateway.demo</code> </p>", "<p><code>terraform state rm aws_internet_gateway.demo</code> </p>", "<p><code>terraform display aws_internet_gateway.demo</code> </p>"]}, "correct_response": ["a"], "section": "", "question_plain": "What command can you use to display details about the resource as shown below?resource \"aws_internet_gateway\" \"demo\" {\n  vpc_id = aws_vpc.vpc.id\n  tags = {\n    Name = \"demo_igw\"\n  }\n}", "related_lectures": []}, {"_class": "assessment", "id": 42772312, "assessment_type": "multiple-choice", "prompt": {"question": "<p>What command can be used to get an interactive console to evaluate expressions in your Terraform code?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p><code>terraform console [options]</code></p><p>This command provides an interactive command-line console for evaluating and experimenting with <a href=\"https://www.terraform.io/language/expressions\">expressions</a>.</p>", "answers": ["<p><code>terraform console</code> </p>", "<p><code>terraform graph</code> </p>", "<p><code>terraform help</code> </p>", "<p><code>terraform env</code> </p>"]}, "correct_response": ["a"], "section": "", "question_plain": "What command can be used to get an interactive console to evaluate expressions in your Terraform code?", "related_lectures": []}, {"_class": "assessment", "id": 42772314, "assessment_type": "multi-select", "prompt": {"question": "<p>What two options are available to delete all of your managed infrastructure? (select two)</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p><code>terraform destroy [options]</code></p><p>This command is just a convenience alias for the following command:</p><p><br></p><pre class=\"prettyprint linenums\">terraform apply -destroy</pre>", "answers": ["<p>terraform destroy</p>", "<p>terraform apply -destroy</p>", "<p>terraform plan -destroy</p>", "<p>terraform init -destroy</p>"]}, "correct_response": ["a", "b"], "section": "", "question_plain": "What two options are available to delete all of your managed infrastructure? (select two)", "related_lectures": []}, {"_class": "assessment", "id": 42772316, "assessment_type": "multiple-choice", "prompt": {"question": "<p>What command can be used to ensure your code is syntactically valid and internally consistent?</p>", "relatedLectureIds": "", "feedbacks": ["", "", "", ""], "explanation": "<p><code>terraform validate</code> runs checks that verify whether a configuration is syntactically valid and internally consistent, regardless of any provided variables or existing state. It is thus primarily useful for general verification of reusable modules, including the correctness of attribute names and value types.</p>", "answers": ["<p><code>terraform validate</code> </p>", "<p><code>terraform fmt</code> </p>", "<p><code>terraform plan</code> </p>", "<p><code>terraform env</code> </p>"]}, "correct_response": ["a"], "section": "", "question_plain": "What command can be used to ensure your code is syntactically valid and internally consistent?", "related_lectures": []}]}
